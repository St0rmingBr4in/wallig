
BaseArm7AT91:     format de fichier elf32-littlearm

Sections:
Idx Nom           Taille    VMA       LMA       Fich off  Algn
  0 .text         00003f20  00100000  00100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ctors        00000008  00103f20  00103f20  0000bf20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .dtors        00000008  00103f28  00103f28  0000bf28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .rodata       00000020  00103f30  00103f30  0000bf30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .eh_frame     00000004  00103f50  00103f50  0000bf50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000ab0  00200000  00103f54  00010000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  6 .jcr          00000004  00200ab0  00104a04  00010ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003ac  00200ab4  00200ab4  00010ab4  2**2
                  ALLOC
  8 .comment      00000438  00000000  00000000  00010ab4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000550  00000000  00000000  00010ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00000b27  00000000  00000000  00011440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00010617  00000000  00000000  00011f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003029  00000000  00000000  0002257e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000037f5  00000000  00000000  000255a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001178  00000000  00000000  00028d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001860  00000000  00000000  00029f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000034aa  00000000  00000000  0002b774  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 0008ee21  00000000  00000000  0002ec1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000002c0  00000000  00000000  000bda3f  2**0
                  CONTENTS, READONLY, DEBUGGING
Déassemblage de la section .text:

00100000 <Vectors>:
			.text
			.arm
			.section .vectrom, "ax"

Vectors:        LDR     PC,Reset_Addr         
  100000:	e59ff018 	ldr	pc, [pc, #24]	; 100020 <Reset_Addr>
                LDR     PC,Undef_Addr
  100004:	e59ff018 	ldr	pc, [pc, #24]	; 100024 <Undef_Addr>
                LDR     PC,SWI_Addr
  100008:	e59ff018 	ldr	pc, [pc, #24]	; 100028 <SWI_Addr>
                LDR     PC,PAbt_Addr
  10000c:	e59ff018 	ldr	pc, [pc, #24]	; 10002c <PAbt_Addr>
                LDR     PC,DAbt_Addr
  100010:	e59ff018 	ldr	pc, [pc, #24]	; 100030 <DAbt_Addr>
                NOP                            /* Reserved Vector */
  100014:	e1a00000 	nop			(mov r0,r0)
//                LDR     PC,IRQ_Addr
                LDR     PC,[PC,#-0xF20]        /* Vector From AIC_IVR */
  100018:	e51fff20 	ldr	pc, [pc, #-3872]	; ff100 <PMC_OSCOUNT+0xef200>
//                LDR     PC,FIQ_Addr
                LDR     PC,[PC,#-0xF20]        /* Vector From AIC_FVR */
  10001c:	e51fff20 	ldr	pc, [pc, #-3872]	; ff104 <PMC_OSCOUNT+0xef204>

00100020 <Reset_Addr>:
  100020:	0010006c 	andeqs	r0, r0, ip, rrx

00100024 <Undef_Addr>:
  100024:	00100040 	andeqs	r0, r0, r0, asr #32

00100028 <SWI_Addr>:
  100028:	00100044 	andeqs	r0, r0, r4, asr #32

0010002c <PAbt_Addr>:
  10002c:	00100048 	andeqs	r0, r0, r8, asr #32

00100030 <DAbt_Addr>:
  100030:	0010004c 	andeqs	r0, r0, ip, asr #32
  100034:	00000000 	andeq	r0, r0, r0

00100038 <IRQ_Addr>:
  100038:	00100050 	andeqs	r0, r0, r0, asr r0

0010003c <FIQ_Addr>:
  10003c:	00100054 	andeqs	r0, r0, r4, asr r0

00100040 <Undef_Handler>:

Reset_Addr:     .word   Reset_Handler
Undef_Addr:     .word   Undef_Handler
SWI_Addr:       .word   SWI_Handler
PAbt_Addr:      .word   PAbt_Handler
DAbt_Addr:      .word   DAbt_Handler
                .word   0                      /* Reserved Address */
IRQ_Addr:       .word   IRQ_Handler
FIQ_Addr:       .word   FIQ_Handler

Undef_Handler:  B       Undef_Handler
  100040:	eafffffe 	b	100040 <Undef_Handler>

00100044 <SWI_Handler>:
SWI_Handler:    B       SWI_Handler
  100044:	eafffffe 	b	100044 <SWI_Handler>

00100048 <PAbt_Handler>:
PAbt_Handler:   B       PAbt_Handler
  100048:	eafffffe 	b	100048 <PAbt_Handler>

0010004c <DAbt_Handler>:
DAbt_Handler:   B       DAbt_Handler
  10004c:	eafffffe 	b	10004c <DAbt_Handler>

00100050 <IRQ_Handler>:
IRQ_Handler:    B       IRQ_Handler
  100050:	eafffffe 	b	100050 <IRQ_Handler>

00100054 <FIQ_Handler>:
FIQ_Handler:    B       FIQ_Handler
  100054:	eafffffe 	b	100054 <FIQ_Handler>

00100058 <_init>:
  100058:	e1a0c00d 	mov	ip, sp
  10005c:	e92ddff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
  100060:	e24cb004 	sub	fp, ip, #4	; 0x4
  100064:	eb000073 	bl	100238 <frame_dummy>

00100068 <_startup>:


// Starupt Code must be linked first at Address at which it expects to run.

		.text
		.arm
		.section .init, "ax"
	
		.global _startup
		.func   _startup
_startup:


// Reset Handler
                LDR     pc, =Reset_Handler
  100068:	e59ff100 	ldr	pc, [pc, #256]	; 100170 <.text+0x170>

0010006c <Reset_Handler>:
Reset_Handler:

// Setup EFC
.if EFC_SETUP
                LDR     R0, =EFC_BASE
  10006c:	e3e000ff 	mvn	r0, #255	; 0xff
                LDR     R1, =EFC_FMR_Val
  100070:	e59f10fc 	ldr	r1, [pc, #252]	; 100174 <.text+0x174>
                STR     R1, [R0, #EFC_FMR]
  100074:	e5801060 	str	r1, [r0, #96]
.endif


// Setup WDT
.if WDT_SETUP
                LDR     R0, =WDT_BASE
  100078:	e59f00f8 	ldr	r0, [pc, #248]	; 100178 <.text+0x178>
                LDR     R1, =WDT_MR_Val
  10007c:	e3a01902 	mov	r1, #32768	; 0x8000
                STR     R1, [R0, #WDT_MR]
  100080:	e5801004 	str	r1, [r0, #4]
.endif


// Setup PMC
.if PMC_SETUP
                LDR     R0, =PMC_BASE
  100084:	e59f00f0 	ldr	r0, [pc, #240]	; 10017c <.text+0x17c>

//  Setup Main Oscillator
                LDR     R1, =PMC_MOR_Val
  100088:	e59f10f0 	ldr	r1, [pc, #240]	; 100180 <.text+0x180>
                STR     R1, [R0, #PMC_MOR]
  10008c:	e5801020 	str	r1, [r0, #32]

00100090 <MOSCS_Loop>:

//  Wait until Main Oscillator is stablilized
.if (PMC_MOR_Val & PMC_MOSCEN)
MOSCS_Loop:     LDR     R2, [R0, #PMC_SR]
  100090:	e5902068 	ldr	r2, [r0, #104]
                ANDS    R2, R2, #PMC_MOSCS
  100094:	e2122001 	ands	r2, r2, #1	; 0x1
                BEQ     MOSCS_Loop
  100098:	0afffffc 	beq	100090 <MOSCS_Loop>
.endif

//  Setup the PLL
.if (PMC_PLLR_Val & PMC_MUL)
                LDR     R1, =PMC_PLLR_Val
  10009c:	e59f10e0 	ldr	r1, [pc, #224]	; 100184 <.text+0x184>
                STR     R1, [R0, #PMC_PLLR]
  1000a0:	e580102c 	str	r1, [r0, #44]

001000a4 <PLL_Loop>:

//  Wait until PLL is stabilized
PLL_Loop:       LDR     R2, [R0, #PMC_SR]
  1000a4:	e5902068 	ldr	r2, [r0, #104]
                ANDS    R2, R2, #PMC_LOCK
  1000a8:	e2122004 	ands	r2, r2, #4	; 0x4
                BEQ     PLL_Loop
  1000ac:	0afffffc 	beq	1000a4 <PLL_Loop>
.endif

//  Select Clock
                LDR     R1, =PMC_MCKR_Val
  1000b0:	e3a01007 	mov	r1, #7	; 0x7
                STR     R1, [R0, #PMC_MCKR]
  1000b4:	e5801030 	str	r1, [r0, #48]
.endif


// Setup Stack for each mode

                LDR     R0, =Top_Stack
  1000b8:	e3a00981 	mov	r0, #2113536	; 0x204000

//  Enter Undefined Instruction Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_UND|I_Bit|F_Bit
  1000bc:	e321f0db 	msr	CPSR_c, #219	; 0xdb
                MOV     SP, R0
  1000c0:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #UND_Stack_Size
  1000c4:	e2400004 	sub	r0, r0, #4	; 0x4

//  Enter Abort Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_ABT|I_Bit|F_Bit
  1000c8:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
                MOV     SP, R0
  1000cc:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #ABT_Stack_Size
  1000d0:	e2400004 	sub	r0, r0, #4	; 0x4

//  Enter FIQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_FIQ|I_Bit|F_Bit
  1000d4:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
                MOV     SP, R0
  1000d8:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #FIQ_Stack_Size
  1000dc:	e2400004 	sub	r0, r0, #4	; 0x4

//  Enter IRQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_IRQ|I_Bit|F_Bit
  1000e0:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
                MOV     SP, R0
  1000e4:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #IRQ_Stack_Size
  1000e8:	e2400c01 	sub	r0, r0, #256	; 0x100

//  Enter Supervisor Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_SVC|I_Bit|F_Bit
  1000ec:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
                MOV     SP, R0
  1000f0:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #SVC_Stack_Size
  1000f4:	e2400c01 	sub	r0, r0, #256	; 0x100

//  Enter User Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_USR
  1000f8:	e321f010 	msr	CPSR_c, #16	; 0x10
                MOV     SP, R0
  1000fc:	e1a0d000 	mov	sp, r0

// Setup a default Stack Limit (when compiled with "-mapcs-stack-check")
                SUB     SL, SP, #USR_Stack_Size
  100100:	e24dab01 	sub	sl, sp, #1024	; 0x400


// Relocate .data section (Copy from ROM to RAM)
                LDR     R1, =_etext
  100104:	e59f107c 	ldr	r1, [pc, #124]	; 100188 <.text+0x188>
                LDR     R2, =_data
  100108:	e59f207c 	ldr	r2, [pc, #124]	; 10018c <.text+0x18c>
                LDR     R3, =_edata
  10010c:	e59f307c 	ldr	r3, [pc, #124]	; 100190 <.text+0x190>

00100110 <LoopRel>:
LoopRel:        CMP     R2, R3
  100110:	e1520003 	cmp	r2, r3
                LDRLO   R0, [R1], #4
  100114:	34910004 	ldrcc	r0, [r1], #4
                STRLO   R0, [R2], #4
  100118:	34820004 	strcc	r0, [r2], #4
                BLO     LoopRel
  10011c:	3afffffb 	bcc	100110 <LoopRel>


// Clear .bss section (Zero init)
                MOV     R0, #0
  100120:	e3a00000 	mov	r0, #0	; 0x0
                LDR     R1, =__bss_start__
  100124:	e59f1068 	ldr	r1, [pc, #104]	; 100194 <.text+0x194>
                LDR     R2, =__bss_end__
  100128:	e59f2068 	ldr	r2, [pc, #104]	; 100198 <.text+0x198>

0010012c <LoopZI>:
LoopZI:         CMP     R1, R2
  10012c:	e1510002 	cmp	r1, r2
                STRLO   R0, [R1], #4
  100130:	34810004 	strcc	r0, [r1], #4
                BLO     LoopZI
  100134:	3afffffc 	bcc	10012c <LoopZI>


#ifdef VECTORS_IN_RAM
/* 
   remap - exception vectors for RAM have been already copied 
   to 0x00200000 by the .data copy-loop 
*/
				.equ    MC_BASE,0xFFFFFF00  /* MC Base Address */
				.equ    MC_RCR, 0x00        /* MC_RCR Offset */

				LDR     R0, =MC_BASE
  100138:	e3e000ff 	mvn	r0, #255	; 0xff
				MOV     R1, #1
  10013c:	e3a01001 	mov	r1, #1	; 0x1
				STR     R1, [R0, #MC_RCR]   // Remap
  100140:	e5801000 	str	r1, [r0]
#endif /* VECTORS_IN_RAM */


/*
   Call C++ constructors (for objects in "global scope")
   added by Martin Thomas based on a Anglia Design 
   example-application for STR7 ARM
*/

			LDR 	r0, =__ctors_start__
  100144:	e59f0050 	ldr	r0, [pc, #80]	; 10019c <.text+0x19c>
			LDR 	r1, =__ctors_end__
  100148:	e59f1050 	ldr	r1, [pc, #80]	; 1001a0 <.text+0x1a0>

0010014c <ctor_end>:
ctor_loop:
//			CMP 	r0, r1
//			BEQ 	ctor_end
//			LDR 	r2, [r0], #4   /* this ctor's address */
//			STMFD 	sp!, {r0-r1}   /* save loop counters  */
//			MOV 	lr, pc         /* set return address  */
////			MOV 	pc, r2
//			BX      r2             /* call ctor */
//			LDMFD 	sp!, {r0-r1}   /* restore loop counters */
//			B 		ctor_loop
ctor_end:

       
// Enter the C code
				mov   r0,#0            // no arguments (argc = 0)
  10014c:	e3a00000 	mov	r0, #0	; 0x0
				mov   r1,r0
  100150:	e1a01000 	mov	r1, r0
				mov   r2,r0
  100154:	e1a02000 	mov	r2, r0
				mov   fp,r0            // null frame pointer
  100158:	e1a0b000 	mov	fp, r0
				mov   r7,r0            // null frame pointer for thumb
  10015c:	e1a07000 	mov	r7, r0
				ldr   r10,=main
  100160:	e59fa03c 	ldr	sl, [pc, #60]	; 1001a4 <.text+0x1a4>
				adr   lr, __main_exit
  100164:	e28fe000 	add	lr, pc, #0	; 0x0
				bx    r10              // enter main()
  100168:	e12fff1a 	bx	sl

0010016c <__main_exit>:

__main_exit:    B       __main_exit
  10016c:	eafffffe 	b	10016c <__main_exit>
  100170:	0010006c 	andeqs	r0, r0, ip, rrx
  100174:	00320100 	eoreqs	r0, r2, r0, lsl #2
  100178:	fffffd40 	undefined instruction 0xfffffd40
  10017c:	fffffc00 	undefined instruction 0xfffffc00
  100180:	00000601 	andeq	r0, r0, r1, lsl #12
  100184:	00191c05 	andeqs	r1, r9, r5, lsl #24
  100188:	00103f54 	andeqs	r3, r0, r4, asr pc
  10018c:	00200000 	eoreq	r0, r0, r0
  100190:	00200ab4 	streqh	r0, [r0], -r4
  100194:	00200ab4 	streqh	r0, [r0], -r4
  100198:	00200e60 	eoreq	r0, r0, r0, ror #28
  10019c:	00103f20 	andeqs	r3, r0, r0, lsr #30
  1001a0:	00103f28 	andeqs	r3, r0, r8, lsr #30
  1001a4:	001003a4 	andeqs	r0, r0, r4, lsr #7
  1001a8:	eb000f46 	bl	103ec8 <__do_global_ctors_aux>
  1001ac:	e24bd028 	sub	sp, fp, #40	; 0x28
  1001b0:	e89d6ff0 	ldmia	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
  1001b4:	e1a0f00e 	mov	pc, lr

001001b8 <__do_global_dtors_aux>:
  1001b8:	e92d4030 	stmdb	sp!, {r4, r5, lr}
  1001bc:	e59f505c 	ldr	r5, [pc, #92]	; 100220 <.text+0x220>
  1001c0:	e5d53000 	ldrb	r3, [r5]
  1001c4:	e3530000 	cmp	r3, #0	; 0x0
  1001c8:	18bd8030 	ldmneia	sp!, {r4, r5, pc}
  1001cc:	e59f4050 	ldr	r4, [pc, #80]	; 100224 <.text+0x224>
  1001d0:	e5943000 	ldr	r3, [r4]
  1001d4:	e5932000 	ldr	r2, [r3]
  1001d8:	e3520000 	cmp	r2, #0	; 0x0
  1001dc:	0a000007 	beq	100200 <__do_global_dtors_aux+0x48>
  1001e0:	e2833004 	add	r3, r3, #4	; 0x4
  1001e4:	e5843000 	str	r3, [r4]
  1001e8:	e1a0e00f 	mov	lr, pc
  1001ec:	e12fff12 	bx	r2
  1001f0:	e5943000 	ldr	r3, [r4]
  1001f4:	e5932000 	ldr	r2, [r3]
  1001f8:	e3520000 	cmp	r2, #0	; 0x0
  1001fc:	1afffff7 	bne	1001e0 <__do_global_dtors_aux+0x28>
  100200:	e59f3020 	ldr	r3, [pc, #32]	; 100228 <.text+0x228>
  100204:	e3530000 	cmp	r3, #0	; 0x0
  100208:	159f001c 	ldrne	r0, [pc, #28]	; 10022c <.text+0x22c>
  10020c:	11a0e00f 	movne	lr, pc
  100210:	112fff13 	bxne	r3
  100214:	e3a03001 	mov	r3, #1	; 0x1
  100218:	e5c53000 	strb	r3, [r5]
  10021c:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
  100220:	00200ab4 	streqh	r0, [r0], -r4
  100224:	00200060 	eoreq	r0, r0, r0, rrx
  100228:	00000000 	andeq	r0, r0, r0
  10022c:	00103f50 	andeqs	r3, r0, r0, asr pc

00100230 <call___do_global_dtors_aux>:
  100230:	e52de004 	str	lr, [sp, #-4]!
  100234:	e49df004 	ldr	pc, [sp], #4

00100238 <frame_dummy>:
  100238:	e59f303c 	ldr	r3, [pc, #60]	; 10027c <.text+0x27c>
  10023c:	e3530000 	cmp	r3, #0	; 0x0
  100240:	e52de004 	str	lr, [sp, #-4]!
  100244:	e59f0034 	ldr	r0, [pc, #52]	; 100280 <.text+0x280>
  100248:	e59f1034 	ldr	r1, [pc, #52]	; 100284 <.text+0x284>
  10024c:	11a0e00f 	movne	lr, pc
  100250:	112fff13 	bxne	r3
  100254:	e59f002c 	ldr	r0, [pc, #44]	; 100288 <.text+0x288>
  100258:	e5903000 	ldr	r3, [r0]
  10025c:	e3530000 	cmp	r3, #0	; 0x0
  100260:	e59f3024 	ldr	r3, [pc, #36]	; 10028c <.text+0x28c>
  100264:	049df004 	ldreq	pc, [sp], #4
  100268:	e3530000 	cmp	r3, #0	; 0x0
  10026c:	049df004 	ldreq	pc, [sp], #4
  100270:	e1a0e00f 	mov	lr, pc
  100274:	e12fff13 	bx	r3
  100278:	e49df004 	ldr	pc, [sp], #4
  10027c:	00000000 	andeq	r0, r0, r0
  100280:	00103f50 	andeqs	r3, r0, r0, asr pc
  100284:	00200ab8 	streqh	r0, [r0], -r8
  100288:	00200ab0 	streqh	r0, [r0], -r0
  10028c:	00000000 	andeq	r0, r0, r0

00100290 <call_frame_dummy>:
  100290:	e52de004 	str	lr, [sp, #-4]!
  100294:	e49df004 	ldr	pc, [sp], #4

00100298 <_mainCRTStartup>:
  100298:	e3a00016 	mov	r0, #22	; 0x16
  10029c:	e28f10e8 	add	r1, pc, #232	; 0xe8
  1002a0:	ef123456 	svc	0x00123456
  1002a4:	e59f00e0 	ldr	r0, [pc, #224]	; 10038c <.text+0x38c>
  1002a8:	e590d008 	ldr	sp, [r0, #8]
  1002ac:	e590a00c 	ldr	sl, [r0, #12]
  1002b0:	e28aac01 	add	sl, sl, #256	; 0x100
  1002b4:	e3a01000 	mov	r1, #0	; 0x0
  1002b8:	e1a0b001 	mov	fp, r1
  1002bc:	e1a07001 	mov	r7, r1
  1002c0:	e59f00c8 	ldr	r0, [pc, #200]	; 100390 <.text+0x390>
  1002c4:	e59f20c8 	ldr	r2, [pc, #200]	; 100394 <.text+0x394>
  1002c8:	e0422000 	sub	r2, r2, r0
  1002cc:	eb000808 	bl	1022f4 <memset>
  1002d0:	eb000b48 	bl	102ff8 <initialise_monitor_handles>
  1002d4:	e3a00015 	mov	r0, #21	; 0x15
  1002d8:	e28f10bc 	add	r1, pc, #188	; 0xbc
  1002dc:	ef123456 	svc	0x00123456
  1002e0:	e59f10b4 	ldr	r1, [pc, #180]	; 10039c <.text+0x39c>
  1002e4:	e3a00000 	mov	r0, #0	; 0x0
  1002e8:	e92d0001 	stmdb	sp!, {r0}
  1002ec:	e4d13001 	ldrb	r3, [r1], #1
  1002f0:	e3530000 	cmp	r3, #0	; 0x0
  1002f4:	0a000011 	beq	100340 <_mainCRTStartup+0xa8>
  1002f8:	e3530020 	cmp	r3, #32	; 0x20
  1002fc:	0afffffa 	beq	1002ec <_mainCRTStartup+0x54>
  100300:	e3530022 	cmp	r3, #34	; 0x22
  100304:	13530027 	cmpne	r3, #39	; 0x27
  100308:	01a02003 	moveq	r2, r3
  10030c:	13a02020 	movne	r2, #32	; 0x20
  100310:	12411001 	subne	r1, r1, #1	; 0x1
  100314:	e92d0002 	stmdb	sp!, {r1}
  100318:	e2800001 	add	r0, r0, #1	; 0x1
  10031c:	e4d13001 	ldrb	r3, [r1], #1
  100320:	e3530000 	cmp	r3, #0	; 0x0
  100324:	0a000005 	beq	100340 <_mainCRTStartup+0xa8>
  100328:	e1520003 	cmp	r2, r3
  10032c:	1afffffa 	bne	10031c <_mainCRTStartup+0x84>
  100330:	e3a02000 	mov	r2, #0	; 0x0
  100334:	e2413001 	sub	r3, r1, #1	; 0x1
  100338:	e5c32000 	strb	r2, [r3]
  10033c:	eaffffea 	b	1002ec <_mainCRTStartup+0x54>
  100340:	e1a0100d 	mov	r1, sp
  100344:	e08d2100 	add	r2, sp, r0, lsl #2
  100348:	e1a0300d 	mov	r3, sp
  10034c:	e1520003 	cmp	r2, r3
  100350:	85124004 	ldrhi	r4, [r2, #-4]
  100354:	85935000 	ldrhi	r5, [r3]
  100358:	85225004 	strhi	r5, [r2, #-4]!
  10035c:	84834004 	strhi	r4, [r3], #4
  100360:	8afffff9 	bhi	10034c <_mainCRTStartup+0xb4>
  100364:	e3cdd007 	bic	sp, sp, #7	; 0x7
  100368:	e1a04000 	mov	r4, r0
  10036c:	e1a05001 	mov	r5, r1
  100370:	e59f0020 	ldr	r0, [pc, #32]	; 100398 <.text+0x398>
  100374:	eb0005e7 	bl	101b18 <atexit>
  100378:	ebffff36 	bl	100058 <_init>
  10037c:	e1a00004 	mov	r0, r4
  100380:	e1a01005 	mov	r1, r5
  100384:	eb000006 	bl	1003a4 <main>
  100388:	eb0005e7 	bl	101b2c <exit>
  10038c:	00200064 	eoreq	r0, r0, r4, rrx
  100390:	00200ab4 	streqh	r0, [r0], -r4
  100394:	00200e60 	eoreq	r0, r0, r0, ror #28
  100398:	00103f04 	andeqs	r3, r0, r4, lsl #30
  10039c:	00200074 	eoreq	r0, r0, r4, ror r0
  1003a0:	000000ff 	streqd	r0, [r0], -pc

001003a4 <main>:

/*** Main Program ***/

int main (void) 
{
  1003a4:	e52de004 	str	lr, [sp, #-4]!
	
	vFsysManager_Init();
  1003a8:	eb000004 	bl	1003c0 <vFsysManager_Init>
	vFdvManager_Init();
  1003ac:	eb00056b 	bl	101960 <vFdvManager_Init>
	vFlibManager_Init();
  1003b0:	eb00014f 	bl	1008f4 <vFlibManager_Init>
	vFappManager_Init();
  1003b4:	eb00058f 	bl	1019f8 <vFappManager_Init>
	
	while (1) 
	{                              /* Loop forever */
		vFappManager_Main();
  1003b8:	eb00058b 	bl	1019ec <vFappManager_Main>
  1003bc:	eafffffd 	b	1003b8 <main+0x14>

001003c0 <vFsysManager_Init>:
void vFsysManager_Init( void )
{
	// enable reset-button (mt)
	// AT91F_RSTSetMode( AT91C_BASE_RSTC , AT91C_RSTC_URSTEN );
	*AT91C_RSTC_RMR = ( 0xA5000000 | AT91C_RSTC_URSTEN );
  1003c0:	e3e03000 	mvn	r3, #0	; 0x0
  1003c4:	e3a024a5 	mov	r2, #-1526726656	; 0xa5000000
  1003c8:	e2822001 	add	r2, r2, #1	; 0x1
  1003cc:	e50322f7 	str	r2, [r3, #-759]
	
	*AT91C_PMC_PCER = (1 << AT91C_ID_PIOA) |  /* Enable Clock for PIO    */
  1003d0:	e3a02101 	mov	r2, #1073741824	; 0x40000000
  1003d4:	e2822044 	add	r2, r2, #68	; 0x44
  1003d8:	e50323ef 	str	r2, [r3, #-1007]
		(1 << AT91C_ID_IRQ0) |  /* Enable Clock for IRQ0   */
		(1 << AT91C_ID_US0);    /* Enable Clock for USART0 */
}
  1003dc:	e12fff1e 	bx	lr

001003e0 <_close_r>:
    struct _reent *r, 
    int file)
{
	return 0;
}
  1003e0:	e3a00000 	mov	r0, #0	; 0x0
  1003e4:	e12fff1e 	bx	lr

001003e8 <_lseek_r>:


_off_t _lseek_r(
    struct _reent *r, 
    int file, 
    _off_t ptr, 
    int dir)
{
	return (_off_t)0;	/*  Always indicate we are at file beginning.  */
}
  1003e8:	e3a00000 	mov	r0, #0	; 0x0
  1003ec:	e12fff1e 	bx	lr

001003f0 <_fstat_r>:


int _fstat_r(
    struct _reent *r, 
    int file, 
    struct stat *st)
{
	/*  Always set as character device.				*/
	st->st_mode = S_IFCHR;
  1003f0:	e3a03a02 	mov	r3, #8192	; 0x2000
  1003f4:	e5823004 	str	r3, [r2, #4]
	/* assigned to strong type with implicit 	*/
	/* signed/unsigned conversion.  Required by 	*/
	/* newlib.					*/

	return 0;
}
  1003f8:	e3a00000 	mov	r0, #0	; 0x0
  1003fc:	e12fff1e 	bx	lr

00100400 <_sbrk_r>:


/*int isatty(int file); // avoid warning 

int isatty(int file)
{
	return 1;
}*/


#if 0
static void _exit (int n) {
label:  goto label; /* endless loop */
}
#endif 


/* "malloc clue function" from newlib-lpc/Keil-Demo/"generic" */

/**** Locally used variables. ****/
// mt: "cleaner": extern char* end;
extern char end[];              /*  end is set in the linker command 	*/
				/* file and is the end of statically 	*/
				/* allocated data (thus start of heap).	*/

static char *heap_ptr;		/* Points to current end of the heap.	*/

/************************** _sbrk_r *************************************
 * Support function. Adjusts end of heap to provide more memory to
 * memory allocator. Simple and dumb with no sanity checks.

 *  struct _reent *r -- re-entrancy structure, used by newlib to
 *                      support multiple threads of operation.
 *  ptrdiff_t nbytes -- number of bytes to add.
 *                      Returns pointer to start of new heap area.
 *
 *  Note:  This implementation is not thread safe (despite taking a
 *         _reent structure as a parameter).
 *         Since _s_r is not used in the current implementation, 
 *         the following messages must be suppressed.
 */
void * _sbrk_r(
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
	char  *base;		/*  errno should be set to  ENOMEM on error  */

	if (!heap_ptr) {	/*  Initialize if first time through.  */
  100400:	e59f2020 	ldr	r2, [pc, #32]	; 100428 <.text+0x428>
  100404:	e5923000 	ldr	r3, [r2]
  100408:	e3530000 	cmp	r3, #0	; 0x0
		heap_ptr = end;
  10040c:	059f3018 	ldreq	r3, [pc, #24]	; 10042c <.text+0x42c>
  100410:	05823000 	streq	r3, [r2]
	}
	base = heap_ptr;	/*  Point to end of heap.  */
  100414:	e59f300c 	ldr	r3, [pc, #12]	; 100428 <.text+0x428>
  100418:	e5930000 	ldr	r0, [r3]
	heap_ptr += nbytes;	/*  Increase heap.  */
  10041c:	e0802001 	add	r2, r0, r1
  100420:	e5832000 	str	r2, [r3]
	
	return base;		/*  Return pointer to start of new heap area.  */
}
  100424:	e12fff1e 	bx	lr
  100428:	00200ad0 	ldreqd	r0, [r0], -r0
  10042c:	00200e60 	eoreq	r0, r0, r0, ror #28

00100430 <_write_r>:
  100430:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
  100434:	e2537000 	subs	r7, r3, #0	; 0x0
  100438:	0a00000b 	beq	10046c <_write_r+0x3c>
  10043c:	e1a06002 	mov	r6, r2
  100440:	e3a04000 	mov	r4, #0	; 0x0
  100444:	e1a05004 	mov	r5, r4
  100448:	e7d43006 	ldrb	r3, [r4, r6]
  10044c:	e353000a 	cmp	r3, #10	; 0xa
  100450:	03a0000d 	moveq	r0, #13	; 0xd
  100454:	0b000290 	bleq	100e9c <uart0_putc>
  100458:	e7d50006 	ldrb	r0, [r5, r6]
  10045c:	eb00028e 	bl	100e9c <uart0_putc>
  100460:	e2844001 	add	r4, r4, #1	; 0x1
  100464:	e1540007 	cmp	r4, r7
  100468:	1afffff5 	bne	100444 <_write_r+0x14>
  10046c:	e1a00007 	mov	r0, r7
  100470:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}

00100474 <_read_r>:
  100474:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
  100478:	e2538000 	subs	r8, r3, #0	; 0x0
  10047c:	01a0a008 	moveq	sl, r8
  100480:	0a000015 	beq	1004dc <_read_r+0x68>
  100484:	ea000002 	b	100494 <_read_r+0x20>
  100488:	e3a03000 	mov	r3, #0	; 0x0
  10048c:	e5c73000 	strb	r3, [r7]
  100490:	ea000011 	b	1004dc <_read_r+0x68>
  100494:	e1a06002 	mov	r6, r2
  100498:	e3a0a000 	mov	sl, #0	; 0x0
  10049c:	e1a0400a 	mov	r4, sl
  1004a0:	e1a05004 	mov	r5, r4
  1004a4:	e0867004 	add	r7, r6, r4
  1004a8:	eb0002d3 	bl	100ffc <iFdvUart_kbhit>
  1004ac:	e3500000 	cmp	r0, #0	; 0x0
  1004b0:	0afffffc 	beq	1004a8 <_read_r+0x34>
  1004b4:	eb0002e4 	bl	10104c <uart0_getc>
  1004b8:	e20000ff 	and	r0, r0, #255	; 0xff
  1004bc:	e350000d 	cmp	r0, #13	; 0xd
  1004c0:	0afffff0 	beq	100488 <_read_r+0x14>
  1004c4:	e7c50006 	strb	r0, [r5, r6]
  1004c8:	eb000273 	bl	100e9c <uart0_putc>
  1004cc:	e284a001 	add	sl, r4, #1	; 0x1
  1004d0:	e1a0400a 	mov	r4, sl
  1004d4:	e158000a 	cmp	r8, sl
  1004d8:	1afffff0 	bne	1004a0 <_read_r+0x2c>
  1004dc:	e06a0008 	rsb	r0, sl, r8
  1004e0:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}

001004e4 <cflibUart_SendReady>:

char cflibUart_SendReady( void )
{
	return 0;
}
  1004e4:	e3a00000 	mov	r0, #0	; 0x0
  1004e8:	e12fff1e 	bx	lr

001004ec <vFlibUart_SetRXByte>:

void vFlibUart_SetRXByte( unsigned char *pu8Byte)
{
	unsigned short uiIndex;
	
	uiIndex = tLibUartData.uiIndexIn+1;
  1004ec:	e59f3040 	ldr	r3, [pc, #64]	; 100534 <.text+0x534>
  1004f0:	e593c080 	ldr	ip, [r3, #128]
  1004f4:	e28c3001 	add	r3, ip, #1	; 0x1
  1004f8:	e1a03803 	mov	r3, r3, lsl #16
	
	if( uiIndex >= kLIBUART_INPUT_BUFFER_SIZE )
  1004fc:	e353087f 	cmp	r3, #8323072	; 0x7f0000
  100500:	91a01823 	movls	r1, r3, lsr #16
  100504:	83a01000 	movhi	r1, #0	; 0x0
		uiIndex = 0;
	if( tLibUartData.uiIndexOut != uiIndex )
  100508:	e59f2024 	ldr	r2, [pc, #36]	; 100534 <.text+0x534>
  10050c:	e5923084 	ldr	r3, [r2, #132]
  100510:	e1530001 	cmp	r3, r1
  100514:	012fff1e 	bxeq	lr
	{
		tLibUartData.tucInputBuffer[ tLibUartData.uiIndexIn ] = *pu8Byte;
  100518:	e5d03000 	ldrb	r3, [r0]
  10051c:	e7c2300c 	strb	r3, [r2, ip]
		tLibUartData.uiIndexIn = uiIndex;
  100520:	e5821080 	str	r1, [r2, #128]
		tLibUartData.uiByteCount++;
  100524:	e5923088 	ldr	r3, [r2, #136]
  100528:	e2833001 	add	r3, r3, #1	; 0x1
  10052c:	e5823088 	str	r3, [r2, #136]
  100530:	e12fff1e 	bx	lr
  100534:	00200ad4 	ldreqd	r0, [r0], -r4

00100538 <cFlibUart_SendBuff>:
  100538:	e92d4030 	stmdb	sp!, {r4, r5, lr}
  10053c:	e1a04000 	mov	r4, r0
  100540:	e1a05001 	mov	r5, r1
  100544:	eb000249 	bl	100e70 <vFdvUart_WaitTXFree>
  100548:	e3540000 	cmp	r4, #0	; 0x0
  10054c:	13550000 	cmpne	r5, #0	; 0x0
  100550:	0a00000e 	beq	100590 <cFlibUart_SendBuff+0x58>
	unsigned int szBuffer,
	char *pNextBuffer,
	unsigned int szNextBuffer )
{
	return AT91F_PDC_SendFrame(
  100554:	e3a034ff 	mov	r3, #-16777216	; 0xff000000
  100558:	e283373f 	add	r3, r3, #16515072	; 0xfc0000
  10055c:	e2832c01 	add	r2, r3, #256	; 0x100
  100560:	e592300c 	ldr	r3, [r2, #12]
  100564:	e3530000 	cmp	r3, #0	; 0x0
  100568:	1a000004 	bne	100580 <cFlibUart_SendBuff+0x48>
  10056c:	e5824008 	str	r4, [r2, #8]
  100570:	e582500c 	str	r5, [r2, #12]
  100574:	e5823018 	str	r3, [r2, #24]
  100578:	e582301c 	str	r3, [r2, #28]
  10057c:	ea000003 	b	100590 <cFlibUart_SendBuff+0x58>
  100580:	e592301c 	ldr	r3, [r2, #28]
  100584:	e3530000 	cmp	r3, #0	; 0x0
  100588:	05824018 	streq	r4, [r2, #24]
  10058c:	0582501c 	streq	r5, [r2, #28]
  100590:	eb000236 	bl	100e70 <vFdvUart_WaitTXFree>
  100594:	e3a00000 	mov	r0, #0	; 0x0
  100598:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

0010059c <vFlibUart_Init>:
  10059c:	e52de004 	str	lr, [sp, #-4]!
  1005a0:	e59f2024 	ldr	r2, [pc, #36]	; 1005cc <.text+0x5cc>
  1005a4:	e3a03000 	mov	r3, #0	; 0x0
  1005a8:	e5823080 	str	r3, [r2, #128]
  1005ac:	e5823084 	str	r3, [r2, #132]
  1005b0:	e5823088 	str	r3, [r2, #136]
  1005b4:	e59f0014 	ldr	r0, [pc, #20]	; 1005d0 <.text+0x5d0>
  1005b8:	eb000222 	bl	100e48 <vFdvUart_SetRXCallback>
	AT91PS_USART pUSART, // \arg pointer to a USART controller
	unsigned int flag)   // \arg IT to be enabled
{
	//* Write to the IER register
	pUSART->US_IER = flag;
  1005bc:	e3a02001 	mov	r2, #1	; 0x1
  1005c0:	e3e03bff 	mvn	r3, #261120	; 0x3fc00
  1005c4:	e50323f7 	str	r2, [r3, #-1015]
  1005c8:	e49df004 	ldr	pc, [sp], #4
  1005cc:	00200ad4 	ldreqd	r0, [r0], -r4
  1005d0:	001004ec 	andeqs	r0, r0, ip, ror #9

001005d4 <cFlibUart_GetRXByte>:
	}

}

char cFlibUart_GetRXByte( unsigned char *pu8Byte)
{
  1005d4:	e1a0c000 	mov	ip, r0
	if(tLibUartData.uiByteCount)
  1005d8:	e59f3080 	ldr	r3, [pc, #128]	; 100660 <.text+0x660>
  1005dc:	e5930088 	ldr	r0, [r3, #136]
  1005e0:	e3500000 	cmp	r0, #0	; 0x0
  1005e4:	012fff1e 	bxeq	lr
	AT91PS_USART pUSART, // \arg pointer to a USART controller
	unsigned int flag)   // \arg IT to be disabled
{
	//* Write to the IER register
	pUSART->US_IDR = flag;
  1005e8:	e3a03001 	mov	r3, #1	; 0x1
  1005ec:	e3e02bff 	mvn	r2, #261120	; 0x3fc00
  1005f0:	e50233f3 	str	r3, [r2, #-1011]
	{
		mDISABLE_UART_RX_IT();
		if( tLibUartData.uiIndexOut != tLibUartData.uiIndexIn )
  1005f4:	e59f1064 	ldr	r1, [pc, #100]	; 100660 <.text+0x660>
  1005f8:	e5912084 	ldr	r2, [r1, #132]
  1005fc:	e5913080 	ldr	r3, [r1, #128]
  100600:	e1520003 	cmp	r2, r3
  100604:	0a000010 	beq	10064c <cFlibUart_GetRXByte+0x78>
		{
			*pu8Byte = tLibUartData.tucInputBuffer[ tLibUartData.uiIndexOut ];
  100608:	e7d13002 	ldrb	r3, [r1, r2]
  10060c:	e5cc3000 	strb	r3, [ip]
			tLibUartData.uiIndexOut++;
  100610:	e5913084 	ldr	r3, [r1, #132]
  100614:	e2833001 	add	r3, r3, #1	; 0x1
  100618:	e5813084 	str	r3, [r1, #132]
			if( tLibUartData.uiIndexOut >= kLIBUART_INPUT_BUFFER_SIZE)
  10061c:	e353007f 	cmp	r3, #127	; 0x7f
				tLibUartData.uiIndexOut = 0;
  100620:	83a03000 	movhi	r3, #0	; 0x0
  100624:	85813084 	strhi	r3, [r1, #132]
			tLibUartData.uiByteCount--;
  100628:	e59f2030 	ldr	r2, [pc, #48]	; 100660 <.text+0x660>
  10062c:	e5923088 	ldr	r3, [r2, #136]
  100630:	e2433001 	sub	r3, r3, #1	; 0x1
  100634:	e5823088 	str	r3, [r2, #136]
	AT91PS_USART pUSART, // \arg pointer to a USART controller
	unsigned int flag)   // \arg IT to be enabled
{
	//* Write to the IER register
	pUSART->US_IER = flag;
  100638:	e3a02001 	mov	r2, #1	; 0x1
  10063c:	e3e03bff 	mvn	r3, #261120	; 0x3fc00
  100640:	e50323f7 	str	r2, [r3, #-1015]
  100644:	e1a00002 	mov	r0, r2
  100648:	e12fff1e 	bx	lr
			mENABLE_UART_RX_IT();
			return 1;
		}
		mENABLE_UART_RX_IT();
	}
	return 0;
}
  10064c:	e3a02001 	mov	r2, #1	; 0x1
  100650:	e3e03bff 	mvn	r3, #261120	; 0x3fc00
  100654:	e50323f7 	str	r2, [r3, #-1015]
  100658:	e3a00000 	mov	r0, #0	; 0x0
  10065c:	e12fff1e 	bx	lr
  100660:	00200ad4 	ldreqd	r0, [r0], -r4

00100664 <vFlibTimer_Tick>:
{
	unsigned char ucTimerCount;
	tPeriodicTimer *pTimer;
	
	for( ucTimerCount = 0 ; ucTimerCount < tlibTimerData.iHandlerCount ; ucTimerCount++ )
  100664:	e59f304c 	ldr	r3, [pc, #76]	; 1006b8 <.text+0x6b8>
  100668:	e593c000 	ldr	ip, [r3]
  10066c:	e35c0000 	cmp	ip, #0	; 0x0
  100670:	d12fff1e 	bxle	lr
	{
		
		pTimer = tlibTimerData.ptTimerArray[ucTimerCount]; //newt timer
  100674:	e5930004 	ldr	r0, [r3, #4]
  100678:	e3a01000 	mov	r1, #0	; 0x0
  10067c:	e7902101 	ldr	r2, [r0, r1, lsl #2]
		pTimer->uiCount--; //decrement the timer count
  100680:	e592300c 	ldr	r3, [r2, #12]
  100684:	e2433001 	sub	r3, r3, #1	; 0x1
  100688:	e582300c 	str	r3, [r2, #12]
		if(!pTimer->uiCount)
  10068c:	e3530000 	cmp	r3, #0	; 0x0
		{	//new periodextern 
			pTimer->uiCount = pTimer->uiPeriod;
  100690:	05923004 	ldreq	r3, [r2, #4]
  100694:	0582300c 	streq	r3, [r2, #12]
			pTimer->uiPeriodCount++;
  100698:	05923008 	ldreq	r3, [r2, #8]
  10069c:	02833001 	addeq	r3, r3, #1	; 0x1
  1006a0:	05823008 	streq	r3, [r2, #8]
  1006a4:	e2813001 	add	r3, r1, #1	; 0x1
  1006a8:	e20310ff 	and	r1, r3, #255	; 0xff
  1006ac:	e151000c 	cmp	r1, ip
  1006b0:	bafffff1 	blt	10067c <vFlibTimer_Tick+0x18>
  1006b4:	e12fff1e 	bx	lr
  1006b8:	00200b60 	eoreq	r0, r0, r0, ror #22

001006bc <vFlibTimer_DeletPeriodicTimer>:
		}
	}
}

/// \brief Creat a new periodic Timer
/// \param uiPeiod period timer in ms
/// \return Pointer to the new timer
tPeriodicTimer *ptFlibTimer_NewPeriodicTimer( unsigned int uiPeriod )
{
	tPeriodicTimer *pNewTimer=NULL;
	
	if( tlibTimerData.iHandlerCount < LIBTIMER_MAX_TIMER_NUMBER )
	{
		//allocate memory for the new timer
		pNewTimer = (tPeriodicTimer*) malloc( sizeof( tPeriodicTimer)  );
		if( pNewTimer != NULL)
		{
			//add the new timer in the timer array
			if( realloc( tlibTimerData.ptTimerArray , (tlibTimerData.iHandlerCount+1)*sizeof(tPeriodicTimer*)) != NULL )
			{
				tlibTimerData.ptTimerArray[tlibTimerData.iHandlerCount] = pNewTimer;
				//update handler count
				kLIBTIMER_DISABLE_IT();
				tlibTimerData.iHandlerCount++;
				kLIBTIMER_ENABLE_IT();
				//init the new timer data
				pNewTimer->iHanler = tlibTimerData.iHandlerCount;
				pNewTimer->uiPeriod = uiPeriod;
				pNewTimer->uiPeriodCount= 0;
				pNewTimer->uiCount = uiPeriod;
			}
			else
			{
				free( pNewTimer );
				pNewTimer = NULL;
			}
		}
	}
	return pNewTimer;
}

void vFlibTimer_DeletPeriodicTimer( tPeriodicTimer *ptTimer)
{
  1006bc:	e52de004 	str	lr, [sp, #-4]!
	free( ptTimer );
  1006c0:	eb000525 	bl	101b5c <free>
	tlibTimerData.iHandlerCount--;
  1006c4:	e59f3018 	ldr	r3, [pc, #24]	; 1006e4 <.text+0x6e4>
  1006c8:	e5931000 	ldr	r1, [r3]
  1006cc:	e2411001 	sub	r1, r1, #1	; 0x1
  1006d0:	e5831000 	str	r1, [r3]
	realloc( tlibTimerData.ptTimerArray , (tlibTimerData.iHandlerCount)*sizeof(tPeriodicTimer*));
  1006d4:	e5930004 	ldr	r0, [r3, #4]
  1006d8:	e1a01101 	mov	r1, r1, lsl #2
  1006dc:	eb00072c 	bl	102394 <realloc>
}
  1006e0:	e49df004 	ldr	pc, [sp], #4
  1006e4:	00200b60 	eoreq	r0, r0, r0, ror #22

001006e8 <vFlibTimer_Iinit>:
  1006e8:	e92d4010 	stmdb	sp!, {r4, lr}
  1006ec:	e59f4014 	ldr	r4, [pc, #20]	; 100708 <.text+0x708>
  1006f0:	e3a03000 	mov	r3, #0	; 0x0
  1006f4:	e5843000 	str	r3, [r4]
  1006f8:	e3a00004 	mov	r0, #4	; 0x4
  1006fc:	eb00051b 	bl	101b70 <malloc>
  100700:	e5840004 	str	r0, [r4, #4]
  100704:	e8bd8010 	ldmia	sp!, {r4, pc}
  100708:	00200b60 	eoreq	r0, r0, r0, ror #22

0010070c <ptFlibTimer_NewPeriodicTimer>:
  10070c:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
  100710:	e1a06000 	mov	r6, r0
  100714:	e59f3090 	ldr	r3, [pc, #144]	; 1007ac <.text+0x7ac>
  100718:	e5933000 	ldr	r3, [r3]
  10071c:	e353000e 	cmp	r3, #14	; 0xe
  100720:	c3a04000 	movgt	r4, #0	; 0x0
  100724:	ca00001e 	bgt	1007a4 <ptFlibTimer_NewPeriodicTimer+0x98>
  100728:	e3a00010 	mov	r0, #16	; 0x10
  10072c:	eb00050f 	bl	101b70 <malloc>
  100730:	e2504000 	subs	r4, r0, #0	; 0x0
  100734:	0a00001a 	beq	1007a4 <ptFlibTimer_NewPeriodicTimer+0x98>
  100738:	e59f506c 	ldr	r5, [pc, #108]	; 1007ac <.text+0x7ac>
  10073c:	e5951000 	ldr	r1, [r5]
  100740:	e1a01101 	mov	r1, r1, lsl #2
  100744:	e5950004 	ldr	r0, [r5, #4]
  100748:	e2811004 	add	r1, r1, #4	; 0x4
  10074c:	eb000710 	bl	102394 <realloc>
  100750:	e3500000 	cmp	r0, #0	; 0x0
  100754:	0a00000f 	beq	100798 <ptFlibTimer_NewPeriodicTimer+0x8c>
  100758:	e895000a 	ldmia	r5, {r1, r3}
  10075c:	e7834101 	str	r4, [r3, r1, lsl #2]
//*----------------------------------------------------------------------------
static __inline void AT91F_PITDisableInt(
        AT91PS_PITC pPITC)
{
	pPITC->PITC_PIMR &= ~AT91C_PITC_PITIEN;	 
  100760:	e3e02c02 	mvn	r2, #512	; 0x200
  100764:	e51230cf 	ldr	r3, [r2, #-207]
  100768:	e3c33402 	bic	r3, r3, #33554432	; 0x2000000
  10076c:	e50230cf 	str	r3, [r2, #-207]
  100770:	e2811001 	add	r1, r1, #1	; 0x1
  100774:	e5851000 	str	r1, [r5]
//*----------------------------------------------------------------------------
static __inline void AT91F_PITEnableInt(
        AT91PS_PITC pPITC)
{
	pPITC->PITC_PIMR |= AT91C_PITC_PITIEN;	 
  100778:	e51230cf 	ldr	r3, [r2, #-207]
  10077c:	e3833402 	orr	r3, r3, #33554432	; 0x2000000
  100780:	e50230cf 	str	r3, [r2, #-207]
  100784:	e8840042 	stmia	r4, {r1, r6}
  100788:	e3a03000 	mov	r3, #0	; 0x0
  10078c:	e5843008 	str	r3, [r4, #8]
  100790:	e584600c 	str	r6, [r4, #12]
  100794:	ea000002 	b	1007a4 <ptFlibTimer_NewPeriodicTimer+0x98>
  100798:	e1a00004 	mov	r0, r4
  10079c:	eb0004ee 	bl	101b5c <free>
  1007a0:	e3a04000 	mov	r4, #0	; 0x0
  1007a4:	e1a00004 	mov	r0, r4
  1007a8:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
  1007ac:	00200b60 	eoreq	r0, r0, r0, ror #22

001007b0 <vFlibTimer_GetCount>:

unsigned int  vFlibTimer_GetCount(tPeriodicTimer *ptTimer )
{
	unsigned int uiLocalCount=0;
	
	if( ptTimer->uiPeriodCount )
  1007b0:	e5901008 	ldr	r1, [r0, #8]
  1007b4:	e3510000 	cmp	r1, #0	; 0x0
  1007b8:	0a000008 	beq	1007e0 <vFlibTimer_GetCount+0x30>
//*----------------------------------------------------------------------------
static __inline void AT91F_PITDisableInt(
        AT91PS_PITC pPITC)
{
	pPITC->PITC_PIMR &= ~AT91C_PITC_PITIEN;	 
  1007bc:	e3e02c02 	mvn	r2, #512	; 0x200
  1007c0:	e51230cf 	ldr	r3, [r2, #-207]
  1007c4:	e3c33402 	bic	r3, r3, #33554432	; 0x2000000
  1007c8:	e50230cf 	str	r3, [r2, #-207]
	{
		kLIBTIMER_DISABLE_IT();
		uiLocalCount = ptTimer->uiPeriodCount;
		ptTimer->uiPeriodCount = 0;
  1007cc:	e3a03000 	mov	r3, #0	; 0x0
  1007d0:	e5803008 	str	r3, [r0, #8]
//*----------------------------------------------------------------------------
static __inline void AT91F_PITEnableInt(
        AT91PS_PITC pPITC)
{
	pPITC->PITC_PIMR |= AT91C_PITC_PITIEN;	 
  1007d4:	e51230cf 	ldr	r3, [r2, #-207]
  1007d8:	e3833402 	orr	r3, r3, #33554432	; 0x2000000
  1007dc:	e50230cf 	str	r3, [r2, #-207]
		kLIBTIMER_ENABLE_IT();
	}
	
	return uiLocalCount;
}
  1007e0:	e1a00001 	mov	r0, r1
  1007e4:	e12fff1e 	bx	lr

001007e8 <TC_Configure>:
//------------------------------------------------------------------------------
void TC_Configure(AT91S_TC *pTc, unsigned int mode)
{
    // Disable TC clock
    pTc->TC_CCR = AT91C_TC_CLKDIS;
  1007e8:	e3a03002 	mov	r3, #2	; 0x2
  1007ec:	e5803000 	str	r3, [r0]

    // Disable interrupts
    pTc->TC_IDR = 0xFFFFFFFF;
  1007f0:	e2433003 	sub	r3, r3, #3	; 0x3
  1007f4:	e5803028 	str	r3, [r0, #40]

    // Clear status register
    pTc->TC_SR;
  1007f8:	e5903020 	ldr	r3, [r0, #32]

    // Set mode
    pTc->TC_CMR = mode;
  1007fc:	e5801004 	str	r1, [r0, #4]
}
  100800:	e12fff1e 	bx	lr

00100804 <TC_Start>:

//------------------------------------------------------------------------------
/// Starts the timer clock.
/// \param pTc  Pointer to an AT91S_TC instance.
//------------------------------------------------------------------------------
void TC_Start(AT91S_TC *pTc)
{
    pTc->TC_CCR = AT91C_TC_CLKEN | AT91C_TC_SWTRG;
  100804:	e3a03005 	mov	r3, #5	; 0x5
  100808:	e5803000 	str	r3, [r0]
}
  10080c:	e12fff1e 	bx	lr

00100810 <TC_Stop>:

//------------------------------------------------------------------------------
/// Stops the timer clock.
/// \param pTc  Pointer to an AT91S_TC instance.
//------------------------------------------------------------------------------
void TC_Stop(AT91S_TC *pTc)
{
    pTc->TC_CCR = AT91C_TC_CLKDIS;
  100810:	e3a03002 	mov	r3, #2	; 0x2
  100814:	e5803000 	str	r3, [r0]
}
  100818:	e12fff1e 	bx	lr

0010081c <TC_FindMckDivisor>:

//------------------------------------------------------------------------------
/// Finds the best MCK divisor given the timer frequency and MCK. The result
/// is guaranteed to satisfy the following equation:
///   (MCK / (DIV * 65536)) <= freq <= (MCK / DIV)
/// with DIV being the highest possible value.
/// Returns 1 if a divisor could be found; otherwise returns 0.
/// \param freq  Desired timer frequency.
/// \param mck  Master clock frequency.
/// \param div  Divisor value.
/// \param tcclks  TCCLKS field value for divisor.
//------------------------------------------------------------------------------
unsigned char TC_FindMckDivisor(
    unsigned int freq,
    unsigned int mck,
    unsigned int *div,
    unsigned int *tcclks)
{
  10081c:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  100820:	e1a07000 	mov	r7, r0
  100824:	e1a06001 	mov	r6, r1
  100828:	e1a0a002 	mov	sl, r2
  10082c:	e1a09003 	mov	r9, r3
  100830:	e3a05000 	mov	r5, #0	; 0x0
  100834:	e59f40b4 	ldr	r4, [pc, #180]	; 1008f0 <.text+0x8f0>
  100838:	ea000003 	b	10084c <TC_FindMckDivisor+0x30>
    const unsigned int divisors[5] = {2, 8, 32, 128,
#if defined(at91sam9260) || defined(at91sam9261) || defined(at91sam9263) \
    || defined(at91sam9xe) || defined(at91sam9rl64) || defined(at91cap9)
        BOARD_MCK / 32768};
#else
        1024};
#endif
    unsigned int index = 0;

    // Satisfy lower bound
    while (freq < ((mck / divisors[index]) / 65536)) {

        index++;
  10083c:	e2855001 	add	r5, r5, #1	; 0x1
  100840:	e2844004 	add	r4, r4, #4	; 0x4

        // If no divisor can be found, return 0
        if (index == 5) {
  100844:	e3550005 	cmp	r5, #5	; 0x5
  100848:	0a000023 	beq	1008dc <TC_FindMckDivisor+0xc0>
  10084c:	e1a00006 	mov	r0, r6
  100850:	e5941000 	ldr	r1, [r4]
  100854:	eb00046a 	bl	101a04 <__aeabi_uidiv>
  100858:	e1570820 	cmp	r7, r0, lsr #16
  10085c:	3afffff6 	bcc	10083c <TC_FindMckDivisor+0x20>
  100860:	ea00000a 	b	100890 <TC_FindMckDivisor+0x74>

            return 0;
        }
    }

    // Try to maximise DIV while satisfying upper bound
    while (index < 4) {

        if (freq > (mck / divisors[index + 1])) {
  100864:	e2858001 	add	r8, r5, #1	; 0x1
  100868:	e1a00006 	mov	r0, r6
  10086c:	e5941008 	ldr	r1, [r4, #8]
  100870:	eb000463 	bl	101a04 <__aeabi_uidiv>
  100874:	e2844004 	add	r4, r4, #4	; 0x4
  100878:	e1570000 	cmp	r7, r0
  10087c:	8a00000e 	bhi	1008bc <TC_FindMckDivisor+0xa0>

            break;
  100880:	e1a05008 	mov	r5, r8
  100884:	e3550004 	cmp	r5, #4	; 0x4
  100888:	1afffff5 	bne	100864 <TC_FindMckDivisor+0x48>
  10088c:	ea00000a 	b	1008bc <TC_FindMckDivisor+0xa0>
  100890:	e3550003 	cmp	r5, #3	; 0x3
  100894:	8a000008 	bhi	1008bc <TC_FindMckDivisor+0xa0>
  100898:	e2858001 	add	r8, r5, #1	; 0x1
  10089c:	e59f404c 	ldr	r4, [pc, #76]	; 1008f0 <.text+0x8f0>
  1008a0:	e1a00006 	mov	r0, r6
  1008a4:	e7941108 	ldr	r1, [r4, r8, lsl #2]
  1008a8:	eb000455 	bl	101a04 <__aeabi_uidiv>
  1008ac:	e1570000 	cmp	r7, r0
  1008b0:	90844105 	addls	r4, r4, r5, lsl #2
  1008b4:	91a05008 	movls	r5, r8
  1008b8:	9afffff1 	bls	100884 <TC_FindMckDivisor+0x68>
        }
        index++;
    }

    // Store results
    if (div) {
  1008bc:	e35a0000 	cmp	sl, #0	; 0x0

        *div = divisors[index];
  1008c0:	159f3028 	ldrne	r3, [pc, #40]	; 1008f0 <.text+0x8f0>
  1008c4:	17933105 	ldrne	r3, [r3, r5, lsl #2]
  1008c8:	158a3000 	strne	r3, [sl]
    }
    if (tcclks) {
  1008cc:	e3590000 	cmp	r9, #0	; 0x0
  1008d0:	03a00001 	moveq	r0, #1	; 0x1
  1008d4:	08bd87f0 	ldmeqia	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  1008d8:	ea000001 	b	1008e4 <TC_FindMckDivisor+0xc8>
  1008dc:	e3a00000 	mov	r0, #0	; 0x0
  1008e0:	e8bd87f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

        *tcclks = index;
  1008e4:	e5895000 	str	r5, [r9]
  1008e8:	e3a00001 	mov	r0, #1	; 0x1
    }

    return 1;
}
  1008ec:	e8bd87f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  1008f0:	00103f30 	andeqs	r3, r0, r0, lsr pc

001008f4 <vFlibManager_Init>:
#include "libTime/libTimer.h"
#include "libUart/libUart.h"

void vFlibManager_Init( void )
{
  1008f4:	e52de004 	str	lr, [sp, #-4]!
	vFlibTimer_Iinit();
  1008f8:	ebffff7a 	bl	1006e8 <vFlibTimer_Iinit>
	vFlibUart_Init();
  1008fc:	ebffff26 	bl	10059c <vFlibUart_Init>
}
  100900:	e49df004 	ldr	pc, [sp], #4

00100904 <vFdvUart_init>:
#define USART_INTERRUPT_LEVEL		5
AT91S_USART * pUSART = AT91C_BASE_US0;      /* Global Pointer to USART0 */
void (*pvfRXCallback)(unsigned char*);

void vFdvUart_init (void) {                   /* Initialize Serial Interface */
  100904:	e1a0c00d 	mov	ip, sp
  100908:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  10090c:	e24cb004 	sub	fp, ip, #4	; 0x4
  100910:	e24dd004 	sub	sp, sp, #4	; 0x4
  /* mt: n.b: uart0 clock must be enabled to use it */

  *AT91C_PIOA_PDR = AT91C_PA5_RXD0 |        /* Enable RxD0 Pin */
  100914:	e3e03ebf 	mvn	r3, #3056	; 0xbf0
  100918:	e243300b 	sub	r3, r3, #11	; 0xb
  10091c:	e3a02060 	mov	r2, #96	; 0x60
  100920:	e5832000 	str	r2, [r3]
                    AT91C_PA6_TXD0;         /* Enalbe TxD0 Pin */

  	// Disable interrupts
  pUSART->US_IDR = (unsigned int) -1;
  100924:	e59f30c8 	ldr	r3, [pc, #200]	; 1009f4 <.text+0x9f4>
  100928:	e5932000 	ldr	r2, [r3]
  10092c:	e3e03000 	mvn	r3, #0	; 0x0
  100930:	e582300c 	str	r3, [r2, #12]

    // Timeguard disabled
  pUSART->US_TTGR = 0;
  100934:	e59f30b8 	ldr	r3, [pc, #184]	; 1009f4 <.text+0x9f4>
  100938:	e5932000 	ldr	r2, [r3]
  10093c:	e3a03000 	mov	r3, #0	; 0x0
  100940:	e5823028 	str	r3, [r2, #40]

  
  pUSART->US_CR = AT91C_US_RSTRX |          /* Reset Receiver      */
  100944:	e59f30a8 	ldr	r3, [pc, #168]	; 1009f4 <.text+0x9f4>
  100948:	e5932000 	ldr	r2, [r3]
  10094c:	e3a030ac 	mov	r3, #172	; 0xac
  100950:	e5823000 	str	r3, [r2]
                  AT91C_US_RSTTX |          /* Reset Transmitter   */
                  AT91C_US_RXDIS |          /* Receiver Disable    */
                  AT91C_US_TXDIS;           /* Transmitter Disable */

  pUSART->US_MR = AT91C_US_USMODE_NORMAL |  /* Normal Mode */
  100954:	e59f3098 	ldr	r3, [pc, #152]	; 1009f4 <.text+0x9f4>
  100958:	e5932000 	ldr	r2, [r3]
  10095c:	e3a03d23 	mov	r3, #2240	; 0x8c0
  100960:	e5823004 	str	r3, [r2, #4]
                  AT91C_US_CLKS_CLOCK    |  /* Clock = MCK */
                  AT91C_US_CHRL_8_BITS   |  /* 8-bit Data  */
                  AT91C_US_PAR_NONE      |  /* No Parity   */
                  AT91C_US_NBSTOP_1_BIT;    /* 1 Stop Bit  */

  pUSART->US_BRGR = BRD;                    /* Baud Rate Divisor */
  100964:	e59f3088 	ldr	r3, [pc, #136]	; 1009f4 <.text+0x9f4>
  100968:	e5932000 	ldr	r2, [r3]
  10096c:	e3a0301a 	mov	r3, #26	; 0x1a
  100970:	e5823020 	str	r3, [r2, #32]

  //* Reset receiver and transmitter
      pUSART->US_CR = AT91C_US_RSTRX | AT91C_US_RSTTX ;
  100974:	e59f3078 	ldr	r3, [pc, #120]	; 1009f4 <.text+0x9f4>
  100978:	e5932000 	ldr	r2, [r3]
  10097c:	e3a0300c 	mov	r3, #12	; 0xc
  100980:	e5823000 	str	r3, [r2]
  
      pUSART->US_CR = AT91C_US_RXEN  |          /* Receiver Enable     */
  100984:	e59f3068 	ldr	r3, [pc, #104]	; 1009f4 <.text+0x9f4>
  100988:	e5932000 	ldr	r2, [r3]
  10098c:	e3a03050 	mov	r3, #80	; 0x50
  100990:	e5823000 	str	r3, [r2]
                  AT91C_US_TXEN;            /* Transmitter Enable  */
  //* Enable USART IT AT91C_US_ENDRX
  	AT91F_US_EnableIt(AT91C_BASE_US0, AT91C_US_RXRDY);
  100994:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
  100998:	e1a006c0 	mov	r0, r0, asr #13
  10099c:	e3a01001 	mov	r1, #1	; 0x1
  1009a0:	eb000016 	bl	100a00 <AT91F_US_EnableIt>
  //* open Usart 0 interrupt
  	AT91F_AIC_ConfigureIt ( AT91C_BASE_AIC, AT91C_ID_US0, USART_INTERRUPT_LEVEL,AT91C_AIC_SRCTYPE_HIGH_LEVEL, (void (*) ())SerialIsr_Wrapper); 
  1009a4:	e59f304c 	ldr	r3, [pc, #76]	; 1009f8 <.text+0x9f8>
  1009a8:	e58d3000 	str	r3, [sp]
  1009ac:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
  1009b0:	e1a009c0 	mov	r0, r0, asr #19
  1009b4:	e3a01006 	mov	r1, #6	; 0x6
  1009b8:	e3a02005 	mov	r2, #5	; 0x5
  1009bc:	e3a03040 	mov	r3, #64	; 0x40
  1009c0:	eb000019 	bl	100a2c <AT91F_AIC_ConfigureIt>
  	AT91F_AIC_EnableIt (AT91C_BASE_AIC, AT91C_ID_US0);
  1009c4:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
  1009c8:	e1a009c0 	mov	r0, r0, asr #19
  1009cc:	e3a01006 	mov	r1, #6	; 0x6
  1009d0:	eb000042 	bl	100ae0 <AT91F_AIC_EnableIt>

  	pvfRXCallback=0;
  1009d4:	e59f2020 	ldr	r2, [pc, #32]	; 1009fc <.text+0x9fc>
  1009d8:	e3a03000 	mov	r3, #0	; 0x0
  1009dc:	e5823000 	str	r3, [r2]
  	AT91F_PDC_Open(AT91C_BASE_PDC_US0);
  1009e0:	e3a004ff 	mov	r0, #-16777216	; 0xff000000
  1009e4:	e280073f 	add	r0, r0, #16515072	; 0xfc0000
  1009e8:	e2800c01 	add	r0, r0, #256	; 0x100
  1009ec:	eb000049 	bl	100b18 <AT91F_PDC_Open>
  	//AT91F_PDC_Close(AT91C_BASE_PDC_US0);
  	/*AT91F_PDC_DisableTx(AT91C_BASE_PDC_US0);
  	AT91F_PDC_SetNextTx(AT91C_BASE_PDC_US0, (char *) 0, 0);
  	AT91F_PDC_SetTx(AT91C_BASE_PDC_US0, (char *) 0, 0);
  	AT91F_PDC_EnableTx(AT91C_BASE_PDC_US0);*/
}
  1009f0:	e89da808 	ldmia	sp, {r3, fp, sp, pc}
  1009f4:	00200178 	eoreq	r0, r0, r8, ror r1
  1009f8:	00100e28 	andeqs	r0, r0, r8, lsr #28
  1009fc:	00200c58 	eoreq	r0, r0, r8, asr ip

00100a00 <AT91F_US_EnableIt>:
//*----------------------------------------------------------------------------
static __inline void AT91F_US_EnableIt (
	AT91PS_USART pUSART, // \arg pointer to a USART controller
	unsigned int flag)   // \arg IT to be enabled
{
  100a00:	e1a0c00d 	mov	ip, sp
  100a04:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100a08:	e24cb004 	sub	fp, ip, #4	; 0x4
  100a0c:	e24dd008 	sub	sp, sp, #8	; 0x8
  100a10:	e50b0010 	str	r0, [fp, #-16]
  100a14:	e50b1014 	str	r1, [fp, #-20]
	//* Write to the IER register
	pUSART->US_IER = flag;
  100a18:	e51b2010 	ldr	r2, [fp, #-16]
  100a1c:	e51b3014 	ldr	r3, [fp, #-20]
  100a20:	e5823008 	str	r3, [r2, #8]
}
  100a24:	e24bd00c 	sub	sp, fp, #12	; 0xc
  100a28:	e89da800 	ldmia	sp, {fp, sp, pc}

00100a2c <AT91F_AIC_ConfigureIt>:
  100a2c:	e1a0c00d 	mov	ip, sp
  100a30:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100a34:	e24cb004 	sub	fp, ip, #4	; 0x4
  100a38:	e24dd018 	sub	sp, sp, #24	; 0x18
  100a3c:	e50b0018 	str	r0, [fp, #-24]
  100a40:	e50b101c 	str	r1, [fp, #-28]
  100a44:	e50b2020 	str	r2, [fp, #-32]
  100a48:	e50b3024 	str	r3, [fp, #-36]
  100a4c:	e51b301c 	ldr	r3, [fp, #-28]
  100a50:	e51b2018 	ldr	r2, [fp, #-24]
  100a54:	e3a01080 	mov	r1, #128	; 0x80
  100a58:	e1a03103 	mov	r3, r3, lsl #2
  100a5c:	e0833002 	add	r3, r3, r2
  100a60:	e0833001 	add	r3, r3, r1
  100a64:	e5933000 	ldr	r3, [r3]
  100a68:	e50b3014 	str	r3, [fp, #-20]
  100a6c:	e51b201c 	ldr	r2, [fp, #-28]
  100a70:	e3a03001 	mov	r3, #1	; 0x1
  100a74:	e1a03213 	mov	r3, r3, lsl r2
  100a78:	e50b3010 	str	r3, [fp, #-16]
  100a7c:	e51b2018 	ldr	r2, [fp, #-24]
  100a80:	e51b3010 	ldr	r3, [fp, #-16]
  100a84:	e5823124 	str	r3, [r2, #292]
  100a88:	e51b001c 	ldr	r0, [fp, #-28]
  100a8c:	e59b3004 	ldr	r3, [fp, #4]
  100a90:	e1a0c003 	mov	ip, r3
  100a94:	e51b2018 	ldr	r2, [fp, #-24]
  100a98:	e3a01080 	mov	r1, #128	; 0x80
  100a9c:	e1a03100 	mov	r3, r0, lsl #2
  100aa0:	e0833002 	add	r3, r3, r2
  100aa4:	e0833001 	add	r3, r3, r1
  100aa8:	e583c000 	str	ip, [r3]
  100aac:	e51b101c 	ldr	r1, [fp, #-28]
  100ab0:	e51b2024 	ldr	r2, [fp, #-36]
  100ab4:	e51b3020 	ldr	r3, [fp, #-32]
  100ab8:	e1822003 	orr	r2, r2, r3
  100abc:	e51b3018 	ldr	r3, [fp, #-24]
  100ac0:	e7832101 	str	r2, [r3, r1, lsl #2]
  100ac4:	e51b2018 	ldr	r2, [fp, #-24]
  100ac8:	e51b3010 	ldr	r3, [fp, #-16]
  100acc:	e5823128 	str	r3, [r2, #296]
  100ad0:	e51b3014 	ldr	r3, [fp, #-20]
  100ad4:	e1a00003 	mov	r0, r3
  100ad8:	e24bd00c 	sub	sp, fp, #12	; 0xc
  100adc:	e89da800 	ldmia	sp, {fp, sp, pc}

00100ae0 <AT91F_AIC_EnableIt>:
  100ae0:	e1a0c00d 	mov	ip, sp
  100ae4:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100ae8:	e24cb004 	sub	fp, ip, #4	; 0x4
  100aec:	e24dd008 	sub	sp, sp, #8	; 0x8
  100af0:	e50b0010 	str	r0, [fp, #-16]
  100af4:	e50b1014 	str	r1, [fp, #-20]
  100af8:	e51b2014 	ldr	r2, [fp, #-20]
  100afc:	e3a03001 	mov	r3, #1	; 0x1
  100b00:	e1a03213 	mov	r3, r3, lsl r2
  100b04:	e1a02003 	mov	r2, r3
  100b08:	e51b3010 	ldr	r3, [fp, #-16]
  100b0c:	e5832120 	str	r2, [r3, #288]
  100b10:	e24bd00c 	sub	sp, fp, #12	; 0xc
  100b14:	e89da800 	ldmia	sp, {fp, sp, pc}

00100b18 <AT91F_PDC_Open>:
  100b18:	e1a0c00d 	mov	ip, sp
  100b1c:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100b20:	e24cb004 	sub	fp, ip, #4	; 0x4
  100b24:	e24dd004 	sub	sp, sp, #4	; 0x4
  100b28:	e50b0010 	str	r0, [fp, #-16]
  100b2c:	e51b0010 	ldr	r0, [fp, #-16]
  100b30:	eb000016 	bl	100b90 <AT91F_PDC_DisableRx>
  100b34:	e51b0010 	ldr	r0, [fp, #-16]
  100b38:	eb00001d 	bl	100bb4 <AT91F_PDC_DisableTx>
  100b3c:	e51b0010 	ldr	r0, [fp, #-16]
  100b40:	e3a01000 	mov	r1, #0	; 0x0
  100b44:	e3a02000 	mov	r2, #0	; 0x0
  100b48:	eb000022 	bl	100bd8 <AT91F_PDC_SetNextTx>
  100b4c:	e51b0010 	ldr	r0, [fp, #-16]
  100b50:	e3a01000 	mov	r1, #0	; 0x0
  100b54:	e3a02000 	mov	r2, #0	; 0x0
  100b58:	eb00002e 	bl	100c18 <AT91F_PDC_SetNextRx>
  100b5c:	e51b0010 	ldr	r0, [fp, #-16]
  100b60:	e3a01000 	mov	r1, #0	; 0x0
  100b64:	e3a02000 	mov	r2, #0	; 0x0
  100b68:	eb00003a 	bl	100c58 <AT91F_PDC_SetTx>
  100b6c:	e51b0010 	ldr	r0, [fp, #-16]
  100b70:	e3a01000 	mov	r1, #0	; 0x0
  100b74:	e3a02000 	mov	r2, #0	; 0x0
  100b78:	eb000046 	bl	100c98 <AT91F_PDC_SetRx>
  100b7c:	e51b0010 	ldr	r0, [fp, #-16]
  100b80:	eb000054 	bl	100cd8 <AT91F_PDC_EnableRx>
  100b84:	e51b0010 	ldr	r0, [fp, #-16]
  100b88:	eb00005b 	bl	100cfc <AT91F_PDC_EnableTx>
  100b8c:	e89da808 	ldmia	sp, {r3, fp, sp, pc}

00100b90 <AT91F_PDC_DisableRx>:
  100b90:	e1a0c00d 	mov	ip, sp
  100b94:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100b98:	e24cb004 	sub	fp, ip, #4	; 0x4
  100b9c:	e24dd004 	sub	sp, sp, #4	; 0x4
  100ba0:	e50b0010 	str	r0, [fp, #-16]
  100ba4:	e51b2010 	ldr	r2, [fp, #-16]
  100ba8:	e3a03002 	mov	r3, #2	; 0x2
  100bac:	e5823020 	str	r3, [r2, #32]
  100bb0:	e89da808 	ldmia	sp, {r3, fp, sp, pc}

00100bb4 <AT91F_PDC_DisableTx>:
  100bb4:	e1a0c00d 	mov	ip, sp
  100bb8:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100bbc:	e24cb004 	sub	fp, ip, #4	; 0x4
  100bc0:	e24dd004 	sub	sp, sp, #4	; 0x4
  100bc4:	e50b0010 	str	r0, [fp, #-16]
  100bc8:	e51b2010 	ldr	r2, [fp, #-16]
  100bcc:	e3a03c02 	mov	r3, #512	; 0x200
  100bd0:	e5823020 	str	r3, [r2, #32]
  100bd4:	e89da808 	ldmia	sp, {r3, fp, sp, pc}

00100bd8 <AT91F_PDC_SetNextTx>:
  100bd8:	e1a0c00d 	mov	ip, sp
  100bdc:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100be0:	e24cb004 	sub	fp, ip, #4	; 0x4
  100be4:	e24dd00c 	sub	sp, sp, #12	; 0xc
  100be8:	e50b0010 	str	r0, [fp, #-16]
  100bec:	e50b1014 	str	r1, [fp, #-20]
  100bf0:	e50b2018 	str	r2, [fp, #-24]
  100bf4:	e51b3014 	ldr	r3, [fp, #-20]
  100bf8:	e1a02003 	mov	r2, r3
  100bfc:	e51b3010 	ldr	r3, [fp, #-16]
  100c00:	e5832018 	str	r2, [r3, #24]
  100c04:	e51b2010 	ldr	r2, [fp, #-16]
  100c08:	e51b3018 	ldr	r3, [fp, #-24]
  100c0c:	e582301c 	str	r3, [r2, #28]
  100c10:	e24bd00c 	sub	sp, fp, #12	; 0xc
  100c14:	e89da800 	ldmia	sp, {fp, sp, pc}

00100c18 <AT91F_PDC_SetNextRx>:
  100c18:	e1a0c00d 	mov	ip, sp
  100c1c:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100c20:	e24cb004 	sub	fp, ip, #4	; 0x4
  100c24:	e24dd00c 	sub	sp, sp, #12	; 0xc
  100c28:	e50b0010 	str	r0, [fp, #-16]
  100c2c:	e50b1014 	str	r1, [fp, #-20]
  100c30:	e50b2018 	str	r2, [fp, #-24]
  100c34:	e51b3014 	ldr	r3, [fp, #-20]
  100c38:	e1a02003 	mov	r2, r3
  100c3c:	e51b3010 	ldr	r3, [fp, #-16]
  100c40:	e5832010 	str	r2, [r3, #16]
  100c44:	e51b2010 	ldr	r2, [fp, #-16]
  100c48:	e51b3018 	ldr	r3, [fp, #-24]
  100c4c:	e5823014 	str	r3, [r2, #20]
  100c50:	e24bd00c 	sub	sp, fp, #12	; 0xc
  100c54:	e89da800 	ldmia	sp, {fp, sp, pc}

00100c58 <AT91F_PDC_SetTx>:
  100c58:	e1a0c00d 	mov	ip, sp
  100c5c:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100c60:	e24cb004 	sub	fp, ip, #4	; 0x4
  100c64:	e24dd00c 	sub	sp, sp, #12	; 0xc
  100c68:	e50b0010 	str	r0, [fp, #-16]
  100c6c:	e50b1014 	str	r1, [fp, #-20]
  100c70:	e50b2018 	str	r2, [fp, #-24]
  100c74:	e51b3014 	ldr	r3, [fp, #-20]
  100c78:	e1a02003 	mov	r2, r3
  100c7c:	e51b3010 	ldr	r3, [fp, #-16]
  100c80:	e5832008 	str	r2, [r3, #8]
  100c84:	e51b2010 	ldr	r2, [fp, #-16]
  100c88:	e51b3018 	ldr	r3, [fp, #-24]
  100c8c:	e582300c 	str	r3, [r2, #12]
  100c90:	e24bd00c 	sub	sp, fp, #12	; 0xc
  100c94:	e89da800 	ldmia	sp, {fp, sp, pc}

00100c98 <AT91F_PDC_SetRx>:
  100c98:	e1a0c00d 	mov	ip, sp
  100c9c:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100ca0:	e24cb004 	sub	fp, ip, #4	; 0x4
  100ca4:	e24dd00c 	sub	sp, sp, #12	; 0xc
  100ca8:	e50b0010 	str	r0, [fp, #-16]
  100cac:	e50b1014 	str	r1, [fp, #-20]
  100cb0:	e50b2018 	str	r2, [fp, #-24]
  100cb4:	e51b3014 	ldr	r3, [fp, #-20]
  100cb8:	e1a02003 	mov	r2, r3
  100cbc:	e51b3010 	ldr	r3, [fp, #-16]
  100cc0:	e5832000 	str	r2, [r3]
  100cc4:	e51b2010 	ldr	r2, [fp, #-16]
  100cc8:	e51b3018 	ldr	r3, [fp, #-24]
  100ccc:	e5823004 	str	r3, [r2, #4]
  100cd0:	e24bd00c 	sub	sp, fp, #12	; 0xc
  100cd4:	e89da800 	ldmia	sp, {fp, sp, pc}

00100cd8 <AT91F_PDC_EnableRx>:
  100cd8:	e1a0c00d 	mov	ip, sp
  100cdc:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100ce0:	e24cb004 	sub	fp, ip, #4	; 0x4
  100ce4:	e24dd004 	sub	sp, sp, #4	; 0x4
  100ce8:	e50b0010 	str	r0, [fp, #-16]
  100cec:	e51b2010 	ldr	r2, [fp, #-16]
  100cf0:	e3a03001 	mov	r3, #1	; 0x1
  100cf4:	e5823020 	str	r3, [r2, #32]
  100cf8:	e89da808 	ldmia	sp, {r3, fp, sp, pc}

00100cfc <AT91F_PDC_EnableTx>:
  100cfc:	e1a0c00d 	mov	ip, sp
  100d00:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100d04:	e24cb004 	sub	fp, ip, #4	; 0x4
  100d08:	e24dd004 	sub	sp, sp, #4	; 0x4
  100d0c:	e50b0010 	str	r0, [fp, #-16]
  100d10:	e51b2010 	ldr	r2, [fp, #-16]
  100d14:	e3a03c01 	mov	r3, #256	; 0x100
  100d18:	e5823020 	str	r3, [r2, #32]
  100d1c:	e89da808 	ldmia	sp, {r3, fp, sp, pc}

00100d20 <usart_c_irq_handler>:

void usart_c_irq_handler( void )
{
  100d20:	e1a0c00d 	mov	ip, sp
  100d24:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100d28:	e24cb004 	sub	fp, ip, #4	; 0x4
  100d2c:	e24dd008 	sub	sp, sp, #8	; 0x8
	//volatile unsigned int status;
	volatile unsigned char ucByteIn;
	volatile unsigned int uiStatus;
	
	uiStatus = AT91C_BASE_US0->US_CSR;
  100d30:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
  100d34:	e1a036c3 	mov	r3, r3, asr #13
  100d38:	e5933014 	ldr	r3, [r3, #20]
  100d3c:	e50b3014 	str	r3, [fp, #-20]
	uiStatus &= AT91C_BASE_US0->US_IMR;
  100d40:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
  100d44:	e1a036c3 	mov	r3, r3, asr #13
  100d48:	e5932010 	ldr	r2, [r3, #16]
  100d4c:	e51b3014 	ldr	r3, [fp, #-20]
  100d50:	e0023003 	and	r3, r2, r3
  100d54:	e50b3014 	str	r3, [fp, #-20]
	//* get Usart status register
	//if ( AT91F_US_RxReady(AT91C_BASE_US0)&AT91C_US_RXRDY )
	 if ( uiStatus&AT91C_US_RXRDY )
  100d58:	e51b3014 	ldr	r3, [fp, #-20]
  100d5c:	e2033001 	and	r3, r3, #1	; 0x1
  100d60:	e20330ff 	and	r3, r3, #255	; 0xff
  100d64:	e3530000 	cmp	r3, #0	; 0x0
  100d68:	0a00000f 	beq	100dac <usart_c_irq_handler+0x8c>
	{
		ucByteIn = AT91F_US_GetChar( AT91C_BASE_US0 );
  100d6c:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
  100d70:	e1a006c0 	mov	r0, r0, asr #13
  100d74:	eb000016 	bl	100dd4 <AT91F_US_GetChar>
  100d78:	e1a03000 	mov	r3, r0
  100d7c:	e20330ff 	and	r3, r3, #255	; 0xff
  100d80:	e54b300d 	strb	r3, [fp, #-13]
		if( pvfRXCallback )
  100d84:	e59f3044 	ldr	r3, [pc, #68]	; 100dd0 <.text+0xdd0>
  100d88:	e5933000 	ldr	r3, [r3]
  100d8c:	e3530000 	cmp	r3, #0	; 0x0
  100d90:	0a000005 	beq	100dac <usart_c_irq_handler+0x8c>
			pvfRXCallback((unsigned char*)&ucByteIn);
  100d94:	e59f3034 	ldr	r3, [pc, #52]	; 100dd0 <.text+0xdd0>
  100d98:	e5932000 	ldr	r2, [r3]
  100d9c:	e24b300d 	sub	r3, fp, #13	; 0xd
  100da0:	e1a00003 	mov	r0, r3
  100da4:	e1a0e00f 	mov	lr, pc
  100da8:	e12fff12 	bx	r2
	}
	
	//* Reset the satus bit
	 AT91C_BASE_US0->US_CR = AT91C_US_RSTSTA;
  100dac:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
  100db0:	e1a036c3 	mov	r3, r3, asr #13
  100db4:	e3a02c01 	mov	r2, #256	; 0x100
  100db8:	e5832000 	str	r2, [r3]
	AT91F_AIC_AcknowledgeIt(AT91C_BASE_AIC);
  100dbc:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
  100dc0:	e1a009c0 	mov	r0, r0, asr #19
  100dc4:	eb00000d 	bl	100e00 <AT91F_AIC_AcknowledgeIt>
}
  100dc8:	e24bd00c 	sub	sp, fp, #12	; 0xc
  100dcc:	e89da800 	ldmia	sp, {fp, sp, pc}
  100dd0:	00200c58 	eoreq	r0, r0, r8, asr ip

00100dd4 <AT91F_US_GetChar>:
//* \brief Receive a character,does not check if a character is available
//*----------------------------------------------------------------------------
static __inline int AT91F_US_GetChar (
	const AT91PS_USART pUSART)
{
  100dd4:	e1a0c00d 	mov	ip, sp
  100dd8:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100ddc:	e24cb004 	sub	fp, ip, #4	; 0x4
  100de0:	e24dd004 	sub	sp, sp, #4	; 0x4
  100de4:	e50b0010 	str	r0, [fp, #-16]
    return((pUSART->US_RHR) & 0x1FF);
  100de8:	e51b3010 	ldr	r3, [fp, #-16]
  100dec:	e5933018 	ldr	r3, [r3, #24]
  100df0:	e1a03b83 	mov	r3, r3, lsl #23
  100df4:	e1a03ba3 	mov	r3, r3, lsr #23
}
  100df8:	e1a00003 	mov	r0, r3
  100dfc:	e89da808 	ldmia	sp, {r3, fp, sp, pc}

00100e00 <AT91F_AIC_AcknowledgeIt>:
  100e00:	e1a0c00d 	mov	ip, sp
  100e04:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100e08:	e24cb004 	sub	fp, ip, #4	; 0x4
  100e0c:	e24dd004 	sub	sp, sp, #4	; 0x4
  100e10:	e50b0010 	str	r0, [fp, #-16]
  100e14:	e51b3010 	ldr	r3, [fp, #-16]
  100e18:	e5932130 	ldr	r2, [r3, #304]
  100e1c:	e51b3010 	ldr	r3, [fp, #-16]
  100e20:	e5832130 	str	r2, [r3, #304]
  100e24:	e89da808 	ldmia	sp, {r3, fp, sp, pc}

00100e28 <SerialIsr_Wrapper>:

void NACKEDFUNC SerialIsr_Wrapper( void )
{
	/* Save the context of the interrupted task. */
	ISR_ENTRY();
  100e28:	e24ee004 	sub	lr, lr, #4	; 0x4
  100e2c:	e92d5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
  100e30:	e14f1000 	mrs	r1, SPSR
  100e34:	e92d0002 	stmdb	sp!, {r1}

	/* Call the handler to do the work.  This must be a separate
	function to ensure the stack frame is set up correctly. */
	usart_c_irq_handler();
  100e38:	ebffffb8 	bl	100d20 <usart_c_irq_handler>

	/* Restore the context of whichever task will execute next. */
	ISR_EXIT();
  100e3c:	e8bd0002 	ldmia	sp!, {r1}
  100e40:	e161f001 	msr	SPSR_c, r1
  100e44:	e8fd9fff 	ldmia	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

00100e48 <vFdvUart_SetRXCallback>:
}

void vFdvUart_SetRXCallback( void (*callback)(unsigned char*))
{
  100e48:	e1a0c00d 	mov	ip, sp
  100e4c:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100e50:	e24cb004 	sub	fp, ip, #4	; 0x4
  100e54:	e24dd004 	sub	sp, sp, #4	; 0x4
  100e58:	e50b0010 	str	r0, [fp, #-16]
	pvfRXCallback = callback;
  100e5c:	e59f2008 	ldr	r2, [pc, #8]	; 100e6c <.text+0xe6c>
  100e60:	e51b3010 	ldr	r3, [fp, #-16]
  100e64:	e5823000 	str	r3, [r2]

}
  100e68:	e89da808 	ldmia	sp, {r3, fp, sp, pc}
  100e6c:	00200c58 	eoreq	r0, r0, r8, asr ip

00100e70 <vFdvUart_WaitTXFree>:

void vFdvUart_WaitTXFree(void)
{
  100e70:	e1a0c00d 	mov	ip, sp
  100e74:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100e78:	e24cb004 	sub	fp, ip, #4	; 0x4
	while (!(pUSART->US_CSR & AT91C_US_TXRDY));   /* Wait for Empty Tx Buffer */
  100e7c:	e59f3014 	ldr	r3, [pc, #20]	; 100e98 <.text+0xe98>
  100e80:	e5933000 	ldr	r3, [r3]
  100e84:	e5933014 	ldr	r3, [r3, #20]
  100e88:	e2033002 	and	r3, r3, #2	; 0x2
  100e8c:	e3530000 	cmp	r3, #0	; 0x0
  100e90:	0afffff9 	beq	100e7c <vFdvUart_WaitTXFree+0xc>
}
  100e94:	e89da800 	ldmia	sp, {fp, sp, pc}
  100e98:	00200178 	eoreq	r0, r0, r8, ror r1

00100e9c <uart0_putc>:

int uart0_putc(int ch) 
{
  100e9c:	e1a0c00d 	mov	ip, sp
  100ea0:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100ea4:	e24cb004 	sub	fp, ip, #4	; 0x4
  100ea8:	e24dd004 	sub	sp, sp, #4	; 0x4
  100eac:	e50b0010 	str	r0, [fp, #-16]
	while (!(pUSART->US_CSR & AT91C_US_TXRDY));   /* Wait for Empty Tx Buffer */
  100eb0:	e59f302c 	ldr	r3, [pc, #44]	; 100ee4 <.text+0xee4>
  100eb4:	e5933000 	ldr	r3, [r3]
  100eb8:	e5933014 	ldr	r3, [r3, #20]
  100ebc:	e2033002 	and	r3, r3, #2	; 0x2
  100ec0:	e3530000 	cmp	r3, #0	; 0x0
  100ec4:	0afffff9 	beq	100eb0 <uart0_putc+0x14>
	return (pUSART->US_THR = ch);                 /* Transmit Character */
  100ec8:	e59f3014 	ldr	r3, [pc, #20]	; 100ee4 <.text+0xee4>
  100ecc:	e5932000 	ldr	r2, [r3]
  100ed0:	e51b3010 	ldr	r3, [fp, #-16]
  100ed4:	e582301c 	str	r3, [r2, #28]
  100ed8:	e592301c 	ldr	r3, [r2, #28]
}	
  100edc:	e1a00003 	mov	r0, r3
  100ee0:	e89da808 	ldmia	sp, {r3, fp, sp, pc}
  100ee4:	00200178 	eoreq	r0, r0, r8, ror r1

00100ee8 <uart0_putchar>:

int uart0_putchar (int ch) {                      /* Write Character to Serial Port */
  100ee8:	e1a0c00d 	mov	ip, sp
  100eec:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100ef0:	e24cb004 	sub	fp, ip, #4	; 0x4
  100ef4:	e24dd004 	sub	sp, sp, #4	; 0x4
  100ef8:	e50b0010 	str	r0, [fp, #-16]

  if (ch == '\n')  {                            /* Check for LF */
  100efc:	e51b3010 	ldr	r3, [fp, #-16]
  100f00:	e353000a 	cmp	r3, #10	; 0xa
  100f04:	1a000001 	bne	100f10 <uart0_putchar+0x28>
    uart0_putc( '\r' );                         /* Output CR */
  100f08:	e3a0000d 	mov	r0, #13	; 0xd
  100f0c:	ebffffe2 	bl	100e9c <uart0_putc>
  }
  return uart0_putc( ch );                     /* Transmit Character */
  100f10:	e51b0010 	ldr	r0, [fp, #-16]
  100f14:	ebffffe0 	bl	100e9c <uart0_putc>
  100f18:	e1a03000 	mov	r3, r0
}
  100f1c:	e1a00003 	mov	r0, r3
  100f20:	e89da808 	ldmia	sp, {r3, fp, sp, pc}

00100f24 <uart0_puts>:

int uart0_puts ( char* s )
{
  100f24:	e1a0c00d 	mov	ip, sp
  100f28:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100f2c:	e24cb004 	sub	fp, ip, #4	; 0x4
  100f30:	e24dd008 	sub	sp, sp, #8	; 0x8
  100f34:	e50b0014 	str	r0, [fp, #-20]
	int i = 0;
  100f38:	e3a03000 	mov	r3, #0	; 0x0
  100f3c:	e50b3010 	str	r3, [fp, #-16]
	while ( *s ) {
  100f40:	ea00000a 	b	100f70 <uart0_puts+0x4c>
		uart0_putc( *s++ );
  100f44:	e51b3014 	ldr	r3, [fp, #-20]
  100f48:	e5d33000 	ldrb	r3, [r3]
  100f4c:	e1a02003 	mov	r2, r3
  100f50:	e51b3014 	ldr	r3, [fp, #-20]
  100f54:	e2833001 	add	r3, r3, #1	; 0x1
  100f58:	e50b3014 	str	r3, [fp, #-20]
  100f5c:	e1a00002 	mov	r0, r2
  100f60:	ebffffcd 	bl	100e9c <uart0_putc>
		i++;
  100f64:	e51b3010 	ldr	r3, [fp, #-16]
  100f68:	e2833001 	add	r3, r3, #1	; 0x1
  100f6c:	e50b3010 	str	r3, [fp, #-16]
  100f70:	e51b3014 	ldr	r3, [fp, #-20]
  100f74:	e5d33000 	ldrb	r3, [r3]
  100f78:	e3530000 	cmp	r3, #0	; 0x0
  100f7c:	1afffff0 	bne	100f44 <uart0_puts+0x20>
	}
	return i;
  100f80:	e51b3010 	ldr	r3, [fp, #-16]
}
  100f84:	e1a00003 	mov	r0, r3
  100f88:	e24bd00c 	sub	sp, fp, #12	; 0xc
  100f8c:	e89da800 	ldmia	sp, {fp, sp, pc}

00100f90 <uart0_prints>:

int uart0_prints ( char* s )
{
  100f90:	e1a0c00d 	mov	ip, sp
  100f94:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  100f98:	e24cb004 	sub	fp, ip, #4	; 0x4
  100f9c:	e24dd008 	sub	sp, sp, #8	; 0x8
  100fa0:	e50b0014 	str	r0, [fp, #-20]
	int i = 0;
  100fa4:	e3a03000 	mov	r3, #0	; 0x0
  100fa8:	e50b3010 	str	r3, [fp, #-16]
	while ( *s ) {
  100fac:	ea00000a 	b	100fdc <uart0_prints+0x4c>
		uart0_putchar( *s++ );
  100fb0:	e51b3014 	ldr	r3, [fp, #-20]
  100fb4:	e5d33000 	ldrb	r3, [r3]
  100fb8:	e1a02003 	mov	r2, r3
  100fbc:	e51b3014 	ldr	r3, [fp, #-20]
  100fc0:	e2833001 	add	r3, r3, #1	; 0x1
  100fc4:	e50b3014 	str	r3, [fp, #-20]
  100fc8:	e1a00002 	mov	r0, r2
  100fcc:	ebffffc5 	bl	100ee8 <uart0_putchar>
		i++;
  100fd0:	e51b3010 	ldr	r3, [fp, #-16]
  100fd4:	e2833001 	add	r3, r3, #1	; 0x1
  100fd8:	e50b3010 	str	r3, [fp, #-16]
  100fdc:	e51b3014 	ldr	r3, [fp, #-20]
  100fe0:	e5d33000 	ldrb	r3, [r3]
  100fe4:	e3530000 	cmp	r3, #0	; 0x0
  100fe8:	1afffff0 	bne	100fb0 <uart0_prints+0x20>
	}
	return i;
  100fec:	e51b3010 	ldr	r3, [fp, #-16]
}
  100ff0:	e1a00003 	mov	r0, r3
  100ff4:	e24bd00c 	sub	sp, fp, #12	; 0xc
  100ff8:	e89da800 	ldmia	sp, {fp, sp, pc}

00100ffc <iFdvUart_kbhit>:

int iFdvUart_kbhit( void ) /* returns true if character in receive buffer */
{
  100ffc:	e1a0c00d 	mov	ip, sp
  101000:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  101004:	e24cb004 	sub	fp, ip, #4	; 0x4
  101008:	e24dd004 	sub	sp, sp, #4	; 0x4
	if ( pUSART->US_CSR & AT91C_US_RXRDY) {
  10100c:	e59f3034 	ldr	r3, [pc, #52]	; 101048 <.text+0x1048>
  101010:	e5933000 	ldr	r3, [r3]
  101014:	e5933014 	ldr	r3, [r3, #20]
  101018:	e2033001 	and	r3, r3, #1	; 0x1
  10101c:	e20330ff 	and	r3, r3, #255	; 0xff
  101020:	e3530000 	cmp	r3, #0	; 0x0
  101024:	0a000002 	beq	101034 <iFdvUart_kbhit+0x38>
		return 1;
  101028:	e3a03001 	mov	r3, #1	; 0x1
  10102c:	e50b3010 	str	r3, [fp, #-16]
  101030:	ea000001 	b	10103c <iFdvUart_kbhit+0x40>
	}
	else {
		return 0;
  101034:	e3a03000 	mov	r3, #0	; 0x0
  101038:	e50b3010 	str	r3, [fp, #-16]
  10103c:	e51b3010 	ldr	r3, [fp, #-16]
	}
}
  101040:	e1a00003 	mov	r0, r3
  101044:	e89da808 	ldmia	sp, {r3, fp, sp, pc}
  101048:	00200178 	eoreq	r0, r0, r8, ror r1

0010104c <uart0_getc>:

int uart0_getc ( void )  /* Read Character from Serial Port */
{    
  10104c:	e1a0c00d 	mov	ip, sp
  101050:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  101054:	e24cb004 	sub	fp, ip, #4	; 0x4
  while (!(pUSART->US_CSR & AT91C_US_RXRDY));   /* Wait for Full Rx Buffer */
  101058:	e59f3024 	ldr	r3, [pc, #36]	; 101084 <.text+0x1084>
  10105c:	e5933000 	ldr	r3, [r3]
  101060:	e5933014 	ldr	r3, [r3, #20]
  101064:	e2033001 	and	r3, r3, #1	; 0x1
  101068:	e3530000 	cmp	r3, #0	; 0x0
  10106c:	0afffff9 	beq	101058 <uart0_getc+0xc>
  return (pUSART->US_RHR);                      /* Read Character */
  101070:	e59f300c 	ldr	r3, [pc, #12]	; 101084 <.text+0x1084>
  101074:	e5933000 	ldr	r3, [r3]
  101078:	e5933018 	ldr	r3, [r3, #24]
}
  10107c:	e1a00003 	mov	r0, r3
  101080:	e89da800 	ldmia	sp, {fp, sp, pc}
  101084:	00200178 	eoreq	r0, r0, r8, ror r1

00101088 <ucFdvUart_GetByte>:


unsigned char ucFdvUart_GetByte(void)
{
  101088:	e1a0c00d 	mov	ip, sp
  10108c:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  101090:	e24cb004 	sub	fp, ip, #4	; 0x4
	return (pUSART->US_RHR);                      /* Read Character */
  101094:	e59f3010 	ldr	r3, [pc, #16]	; 1010ac <.text+0x10ac>
  101098:	e5933000 	ldr	r3, [r3]
  10109c:	e5933018 	ldr	r3, [r3, #24]
  1010a0:	e20330ff 	and	r3, r3, #255	; 0xff
}
  1010a4:	e1a00003 	mov	r0, r3
  1010a8:	e89da800 	ldmia	sp, {fp, sp, pc}
  1010ac:	00200178 	eoreq	r0, r0, r8, ror r1

001010b0 <vFdvUart0_init>:



void vFdvUartSendPS2Byte( unsigned char );
//static unsigned char uc1,uc2;

void vFdvUart0_init (void) 
{                   /* Initialize Serial Interface */
  1010b0:	e1a0c00d 	mov	ip, sp
  1010b4:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  1010b8:	e24cb004 	sub	fp, ip, #4	; 0x4
  1010bc:	e24dd008 	sub	sp, sp, #8	; 0x8
	  /* mt: n.b: uart0 clock must be enabled to use it */
	volatile unsigned int uiCount,uiDummy;
	

	  *AT91C_PIOA_PDR = AT91C_PA5_RXD0 ;        /* Enable RxD0 & SCK0 Pin */
  1010c0:	e3e03ebf 	mvn	r3, #3056	; 0xbf0
  1010c4:	e243300b 	sub	r3, r3, #11	; 0xb
  1010c8:	e3a02020 	mov	r2, #32	; 0x20
  1010cc:	e5832000 	str	r2, [r3]

	  	// Disable interrupts
	  pUSART->US_IDR = (unsigned int) -1;
  1010d0:	e59f308c 	ldr	r3, [pc, #140]	; 101164 <.text+0x1164>
  1010d4:	e5932000 	ldr	r2, [r3]
  1010d8:	e3e03000 	mvn	r3, #0	; 0x0
  1010dc:	e582300c 	str	r3, [r2, #12]

	    // Timeguard disabled
	  pUSART->US_TTGR = 0;
  1010e0:	e59f307c 	ldr	r3, [pc, #124]	; 101164 <.text+0x1164>
  1010e4:	e5932000 	ldr	r2, [r3]
  1010e8:	e3a03000 	mov	r3, #0	; 0x0
  1010ec:	e5823028 	str	r3, [r2, #40]

	  
	  pUSART->US_CR = AT91C_US_RSTRX |          /* Reset Receiver      */
  1010f0:	e59f306c 	ldr	r3, [pc, #108]	; 101164 <.text+0x1164>
  1010f4:	e5932000 	ldr	r2, [r3]
  1010f8:	e3a030ac 	mov	r3, #172	; 0xac
  1010fc:	e5823000 	str	r3, [r2]
	                  AT91C_US_RSTTX |          /* Reset Transmitter   */
	                  AT91C_US_RXDIS |          /* Receiver Disable    */
	                  AT91C_US_TXDIS;           /* Transmitter Disable */

	  pUSART->US_MR = AT91C_US_USMODE_NORMAL |  /* Normal Mode */
  101100:	e59f305c 	ldr	r3, [pc, #92]	; 101164 <.text+0x1164>
  101104:	e5932000 	ldr	r2, [r3]
  101108:	e3a03e3f 	mov	r3, #1008	; 0x3f0
  10110c:	e5823004 	str	r3, [r2, #4]
	  					AT91C_US_CLKS_EXT    |  /* Externalclock */
	                  AT91C_US_CHRL_8_BITS   |  /* 8-bit Data  */
	                  AT91C_US_PAR_ODD      |  /* Parity  Odd */
	                  AT91C_US_NBSTOP_1_BIT  | /* 1 Stop Bit  */
	                  AT91C_US_SYNC;    	 /*synchonous mode*/


	  	//* Reset receiver and transmitter
	      pUSART->US_CR = AT91C_US_RSTRX | AT91C_US_RSTTX ;
  101110:	e59f304c 	ldr	r3, [pc, #76]	; 101164 <.text+0x1164>
  101114:	e5932000 	ldr	r2, [r3]
  101118:	e3a0300c 	mov	r3, #12	; 0xc
  10111c:	e5823000 	str	r3, [r2]
	  
//
	      vFdvUartSendPS2Byte(0xF4);
  101120:	e3a000f4 	mov	r0, #244	; 0xf4
  101124:	eb00000f 	bl	101168 <vFdvUartSendPS2Byte>
	      
  	      for (uiCount=0;uiCount<500;uiCount++)
  101128:	e3a03000 	mov	r3, #0	; 0x0
  10112c:	e50b3010 	str	r3, [fp, #-16]
  101130:	ea000005 	b	10114c <vFdvUart0_init+0x9c>
  	      	uiDummy++;
  101134:	e51b3014 	ldr	r3, [fp, #-20]
  101138:	e2833001 	add	r3, r3, #1	; 0x1
  10113c:	e50b3014 	str	r3, [fp, #-20]
  101140:	e51b3010 	ldr	r3, [fp, #-16]
  101144:	e2833001 	add	r3, r3, #1	; 0x1
  101148:	e50b3010 	str	r3, [fp, #-16]
  10114c:	e51b2010 	ldr	r2, [fp, #-16]
  101150:	e3a03e1f 	mov	r3, #496	; 0x1f0
  101154:	e2833003 	add	r3, r3, #3	; 0x3
  101158:	e1520003 	cmp	r2, r3
  10115c:	9afffff4 	bls	101134 <vFdvUart0_init+0x84>
  	      

	      while( 1)
	    	  ;
  101160:	eafffffe 	b	101160 <vFdvUart0_init+0xb0>
  101164:	00200178 	eoreq	r0, r0, r8, ror r1

00101168 <vFdvUartSendPS2Byte>:
}


void vFdvUartSendPS2Byte( unsigned char ucData )
{
  101168:	e1a0c00d 	mov	ip, sp
  10116c:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  101170:	e24cb004 	sub	fp, ip, #4	; 0x4
  101174:	e24dd010 	sub	sp, sp, #16	; 0x10
  101178:	e1a03000 	mov	r3, r0
  10117c:	e54b301c 	strb	r3, [fp, #-28]
	volatile unsigned int uiCount,uiDummy;
	unsigned char ucParityCount = 0;
  101180:	e3a03000 	mov	r3, #0	; 0x0
  101184:	e54b300d 	strb	r3, [fp, #-13]
	
	 pUSART->US_CR =  AT91C_US_RXDIS ;          /* Receiver Disable    */
  101188:	e59f320c 	ldr	r3, [pc, #524]	; 10139c <.text+0x139c>
  10118c:	e5932000 	ldr	r2, [r3]
  101190:	e3a03020 	mov	r3, #32	; 0x20
  101194:	e5823000 	str	r3, [r2]
      //set clock line low: configure pio tx has pio
      AT91F_PIO_CfgOutput(AT91C_BASE_PIOA,AT91C_PA2_SCK0);
  101198:	e3a0020a 	mov	r0, #-1610612736	; 0xa0000000
  10119c:	e1a009c0 	mov	r0, r0, asr #19
  1011a0:	e3a01004 	mov	r1, #4	; 0x4
  1011a4:	eb00007d 	bl	1013a0 <AT91F_PIO_CfgOutput>
      AT91C_BASE_PIOA->PIO_MDER = AT91C_PA2_SCK0;
  1011a8:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
  1011ac:	e1a039c3 	mov	r3, r3, asr #19
  1011b0:	e3a02004 	mov	r2, #4	; 0x4
  1011b4:	e5832050 	str	r2, [r3, #80]
      AT91F_PIO_ClearOutput(AT91C_BASE_PIOA,AT91C_PA2_SCK0);
  1011b8:	e3a0020a 	mov	r0, #-1610612736	; 0xa0000000
  1011bc:	e1a009c0 	mov	r0, r0, asr #19
  1011c0:	e3a01004 	mov	r1, #4	; 0x4
  1011c4:	eb000083 	bl	1013d8 <AT91F_PIO_ClearOutput>
      //wait 
      for (uiCount=0;uiCount<500;uiCount++)
  1011c8:	e3a03000 	mov	r3, #0	; 0x0
  1011cc:	e50b3014 	str	r3, [fp, #-20]
  1011d0:	ea000005 	b	1011ec <vFdvUartSendPS2Byte+0x84>
      	uiDummy++;
  1011d4:	e51b3018 	ldr	r3, [fp, #-24]
  1011d8:	e2833001 	add	r3, r3, #1	; 0x1
  1011dc:	e50b3018 	str	r3, [fp, #-24]
  1011e0:	e51b3014 	ldr	r3, [fp, #-20]
  1011e4:	e2833001 	add	r3, r3, #1	; 0x1
  1011e8:	e50b3014 	str	r3, [fp, #-20]
  1011ec:	e51b2014 	ldr	r2, [fp, #-20]
  1011f0:	e3a03e1f 	mov	r3, #496	; 0x1f0
  1011f4:	e2833003 	add	r3, r3, #3	; 0x3
  1011f8:	e1520003 	cmp	r2, r3
  1011fc:	9afffff4 	bls	1011d4 <vFdvUartSendPS2Byte+0x6c>
      AT91F_PIO_CfgOutput(AT91C_BASE_PIOA,AT91C_PIO_PA6);
  101200:	e3a0020a 	mov	r0, #-1610612736	; 0xa0000000
  101204:	e1a009c0 	mov	r0, r0, asr #19
  101208:	e3a01040 	mov	r1, #64	; 0x40
  10120c:	eb000063 	bl	1013a0 <AT91F_PIO_CfgOutput>
      AT91C_BASE_PIOA->PIO_MDER = AT91C_PIO_PA6;
  101210:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
  101214:	e1a039c3 	mov	r3, r3, asr #19
  101218:	e3a02040 	mov	r2, #64	; 0x40
  10121c:	e5832050 	str	r2, [r3, #80]
      AT91F_PIO_ClearOutput(AT91C_BASE_PIOA,AT91C_PIO_PA6);
  101220:	e3a0020a 	mov	r0, #-1610612736	; 0xa0000000
  101224:	e1a009c0 	mov	r0, r0, asr #19
  101228:	e3a01040 	mov	r1, #64	; 0x40
  10122c:	eb000069 	bl	1013d8 <AT91F_PIO_ClearOutput>
      AT91F_PIO_SetOutput(AT91C_BASE_PIOA,AT91C_PA2_SCK0);
  101230:	e3a0020a 	mov	r0, #-1610612736	; 0xa0000000
  101234:	e1a009c0 	mov	r0, r0, asr #19
  101238:	e3a01004 	mov	r1, #4	; 0x4
  10123c:	eb000070 	bl	101404 <AT91F_PIO_SetOutput>
      AT91F_PIO_CfgInput(AT91C_BASE_PIOA,AT91C_PA2_SCK0);
  101240:	e3a0020a 	mov	r0, #-1610612736	; 0xa0000000
  101244:	e1a009c0 	mov	r0, r0, asr #19
  101248:	e3a01004 	mov	r1, #4	; 0x4
  10124c:	eb000077 	bl	101430 <AT91F_PIO_CfgInput>
      
      for (uiCount=0;uiCount<8;uiCount++)
  101250:	e3a03000 	mov	r3, #0	; 0x0
  101254:	e50b3014 	str	r3, [fp, #-20]
  101258:	ea000022 	b	1012e8 <vFdvUartSendPS2Byte+0x180>
      {
    	  //wait clock line low
    	  while( (AT91C_BASE_PIOA->PIO_PDSR)&AT91C_PA2_SCK0)
  10125c:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
  101260:	e1a039c3 	mov	r3, r3, asr #19
  101264:	e593303c 	ldr	r3, [r3, #60]
  101268:	e2033004 	and	r3, r3, #4	; 0x4
  10126c:	e3530000 	cmp	r3, #0	; 0x0
  101270:	1afffff9 	bne	10125c <vFdvUartSendPS2Byte+0xf4>
    		  ;
    	  //set data line level
    	  if( ucData & 0x1 )
  101274:	e55b301c 	ldrb	r3, [fp, #-28]
  101278:	e2033001 	and	r3, r3, #1	; 0x1
  10127c:	e20330ff 	and	r3, r3, #255	; 0xff
  101280:	e3530000 	cmp	r3, #0	; 0x0
  101284:	0a000007 	beq	1012a8 <vFdvUartSendPS2Byte+0x140>
    	  {
    		ucParityCount++;
  101288:	e55b300d 	ldrb	r3, [fp, #-13]
  10128c:	e2833001 	add	r3, r3, #1	; 0x1
  101290:	e54b300d 	strb	r3, [fp, #-13]
    		AT91C_BASE_PIOA->PIO_SODR = AT91C_PA6_TXD0;
  101294:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
  101298:	e1a039c3 	mov	r3, r3, asr #19
  10129c:	e3a02040 	mov	r2, #64	; 0x40
  1012a0:	e5832030 	str	r2, [r3, #48]
  1012a4:	ea000003 	b	1012b8 <vFdvUartSendPS2Byte+0x150>
    	  }
    	  else
    		AT91C_BASE_PIOA->PIO_CODR = AT91C_PA6_TXD0;
  1012a8:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
  1012ac:	e1a039c3 	mov	r3, r3, asr #19
  1012b0:	e3a02040 	mov	r2, #64	; 0x40
  1012b4:	e5832034 	str	r2, [r3, #52]
    	  ucData>>=1;
  1012b8:	e55b301c 	ldrb	r3, [fp, #-28]
  1012bc:	e1a030a3 	mov	r3, r3, lsr #1
  1012c0:	e54b301c 	strb	r3, [fp, #-28]
    	//wait clock line high
    	  while( !((AT91C_BASE_PIOA->PIO_PDSR)&AT91C_PA2_SCK0))
  1012c4:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
  1012c8:	e1a039c3 	mov	r3, r3, asr #19
  1012cc:	e593303c 	ldr	r3, [r3, #60]
  1012d0:	e2033004 	and	r3, r3, #4	; 0x4
  1012d4:	e3530000 	cmp	r3, #0	; 0x0
  1012d8:	0afffff9 	beq	1012c4 <vFdvUartSendPS2Byte+0x15c>
  1012dc:	e51b3014 	ldr	r3, [fp, #-20]
  1012e0:	e2833001 	add	r3, r3, #1	; 0x1
  1012e4:	e50b3014 	str	r3, [fp, #-20]
  1012e8:	e51b3014 	ldr	r3, [fp, #-20]
  1012ec:	e3530007 	cmp	r3, #7	; 0x7
  1012f0:	9affffd9 	bls	10125c <vFdvUartSendPS2Byte+0xf4>
    		  ;
      }
      //wait clock line low
      while( (AT91C_BASE_PIOA->PIO_PDSR)&AT91C_PA2_SCK0)
  1012f4:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
  1012f8:	e1a039c3 	mov	r3, r3, asr #19
  1012fc:	e593303c 	ldr	r3, [r3, #60]
  101300:	e2033004 	and	r3, r3, #4	; 0x4
  101304:	e3530000 	cmp	r3, #0	; 0x0
  101308:	1afffff9 	bne	1012f4 <vFdvUartSendPS2Byte+0x18c>
		  ;
      //parity: 
      if( ucParityCount & 0x1 )
  10130c:	e55b300d 	ldrb	r3, [fp, #-13]
  101310:	e2033001 	and	r3, r3, #1	; 0x1
  101314:	e20330ff 	and	r3, r3, #255	; 0xff
  101318:	e3530000 	cmp	r3, #0	; 0x0
  10131c:	0a000004 	beq	101334 <vFdvUartSendPS2Byte+0x1cc>
    	  AT91C_BASE_PIOA->PIO_CODR = AT91C_PA6_TXD0;
  101320:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
  101324:	e1a039c3 	mov	r3, r3, asr #19
  101328:	e3a02040 	mov	r2, #64	; 0x40
  10132c:	e5832034 	str	r2, [r3, #52]
  101330:	ea000003 	b	101344 <vFdvUartSendPS2Byte+0x1dc>
	  else
    	  AT91C_BASE_PIOA->PIO_SODR = AT91C_PA6_TXD0;
  101334:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
  101338:	e1a039c3 	mov	r3, r3, asr #19
  10133c:	e3a02040 	mov	r2, #64	; 0x40
  101340:	e5832030 	str	r2, [r3, #48]
	  //wait clock line high
	  while( !((AT91C_BASE_PIOA->PIO_PDSR)&AT91C_PA2_SCK0))
  101344:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
  101348:	e1a039c3 	mov	r3, r3, asr #19
  10134c:	e593303c 	ldr	r3, [r3, #60]
  101350:	e2033004 	and	r3, r3, #4	; 0x4
  101354:	e3530000 	cmp	r3, #0	; 0x0
  101358:	0afffff9 	beq	101344 <vFdvUartSendPS2Byte+0x1dc>
  		  ;
	  //wait clock line low
	  while( (AT91C_BASE_PIOA->PIO_PDSR)&AT91C_PA2_SCK0)
  10135c:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
  101360:	e1a039c3 	mov	r3, r3, asr #19
  101364:	e593303c 	ldr	r3, [r3, #60]
  101368:	e2033004 	and	r3, r3, #4	; 0x4
  10136c:	e3530000 	cmp	r3, #0	; 0x0
  101370:	1afffff9 	bne	10135c <vFdvUartSendPS2Byte+0x1f4>
		  ;
      //stop bit:level 1 <=> cfg input
	  AT91F_PIO_CfgInput(AT91C_BASE_PIOA,AT91C_PA6_TXD0);
  101374:	e3a0020a 	mov	r0, #-1610612736	; 0xa0000000
  101378:	e1a009c0 	mov	r0, r0, asr #19
  10137c:	e3a01040 	mov	r1, #64	; 0x40
  101380:	eb00002a 	bl	101430 <AT91F_PIO_CfgInput>
	  /* Receiver Enable     */
      pUSART->US_CR = AT91C_US_RXEN ;         
  101384:	e59f3010 	ldr	r3, [pc, #16]	; 10139c <.text+0x139c>
  101388:	e5932000 	ldr	r2, [r3]
  10138c:	e3a03010 	mov	r3, #16	; 0x10
  101390:	e5823000 	str	r3, [r2]
}
  101394:	e24bd00c 	sub	sp, fp, #12	; 0xc
  101398:	e89da800 	ldmia	sp, {fp, sp, pc}
  10139c:	00200178 	eoreq	r0, r0, r8, ror r1

001013a0 <AT91F_PIO_CfgOutput>:
//*----------------------------------------------------------------------------
static __inline void AT91F_PIO_CfgOutput(
	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
	unsigned int pioEnable)      // \arg PIO to be enabled
{
  1013a0:	e1a0c00d 	mov	ip, sp
  1013a4:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  1013a8:	e24cb004 	sub	fp, ip, #4	; 0x4
  1013ac:	e24dd008 	sub	sp, sp, #8	; 0x8
  1013b0:	e50b0010 	str	r0, [fp, #-16]
  1013b4:	e50b1014 	str	r1, [fp, #-20]
	pPio->PIO_PER = pioEnable; // Set in PIO mode
  1013b8:	e51b2010 	ldr	r2, [fp, #-16]
  1013bc:	e51b3014 	ldr	r3, [fp, #-20]
  1013c0:	e5823000 	str	r3, [r2]
	pPio->PIO_OER = pioEnable; // Configure in Output
  1013c4:	e51b2010 	ldr	r2, [fp, #-16]
  1013c8:	e51b3014 	ldr	r3, [fp, #-20]
  1013cc:	e5823010 	str	r3, [r2, #16]
}
  1013d0:	e24bd00c 	sub	sp, fp, #12	; 0xc
  1013d4:	e89da800 	ldmia	sp, {fp, sp, pc}

001013d8 <AT91F_PIO_ClearOutput>:

//*----------------------------------------------------------------------------
//* \fn    AT91F_PIO_CfgInput
//* \brief Enable PIO in input mode
//*----------------------------------------------------------------------------
static __inline void AT91F_PIO_CfgInput(
	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
	unsigned int inputEnable)      // \arg PIO to be enabled
{
	// Disable output
	pPio->PIO_ODR  = inputEnable;
	pPio->PIO_PER  = inputEnable;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PIO_CfgOpendrain
//* \brief Configure PIO in open drain
//*----------------------------------------------------------------------------
static __inline void AT91F_PIO_CfgOpendrain(
	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
	unsigned int multiDrvEnable) // \arg pio to be configured in open drain
{
	// Configure the multi-drive option
	pPio->PIO_MDDR = ~multiDrvEnable;
	pPio->PIO_MDER = multiDrvEnable;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PIO_CfgPullup
//* \brief Enable pullup on PIO
//*----------------------------------------------------------------------------
static __inline void AT91F_PIO_CfgPullup(
	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
	unsigned int pullupEnable)   // \arg enable pullup on PIO
{
		// Connect or not Pullup
	pPio->PIO_PPUDR = ~pullupEnable;
	pPio->PIO_PPUER = pullupEnable;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PIO_CfgDirectDrive
//* \brief Enable direct drive on PIO
//*----------------------------------------------------------------------------
static __inline void AT91F_PIO_CfgDirectDrive(
	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
	unsigned int directDrive)    // \arg PIO to be configured with direct drive

{
	// Configure the Direct Drive
	pPio->PIO_OWDR  = ~directDrive;
	pPio->PIO_OWER  = directDrive;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PIO_CfgInputFilter
//* \brief Enable input filter on input PIO
//*----------------------------------------------------------------------------
static __inline void AT91F_PIO_CfgInputFilter(
	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
	unsigned int inputFilter)    // \arg PIO to be configured with input filter

{
	// Configure the Direct Drive
	pPio->PIO_IFDR  = ~inputFilter;
	pPio->PIO_IFER  = inputFilter;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PIO_GetInput
//* \brief Return PIO input value
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_PIO_GetInput( // \return PIO input
	AT91PS_PIO pPio) // \arg  pointer to a PIO controller
{
	return pPio->PIO_PDSR;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PIO_IsInputSet
//* \brief Test if PIO is input flag is active
//*----------------------------------------------------------------------------
static __inline int AT91F_PIO_IsInputSet(
	AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
	unsigned int flag) // \arg  flag to be tested
{
	return (AT91F_PIO_GetInput(pPio) & flag);
}


//*----------------------------------------------------------------------------
//* \fn    AT91F_PIO_SetOutput
//* \brief Set to 1 output PIO
//*----------------------------------------------------------------------------
static __inline void AT91F_PIO_SetOutput(
	AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
	unsigned int flag) // \arg  output to be set
{
	pPio->PIO_SODR = flag;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PIO_ClearOutput
//* \brief Set to 0 output PIO
//*----------------------------------------------------------------------------
static __inline void AT91F_PIO_ClearOutput(
	AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
	unsigned int flag) // \arg  output to be cleared
{
  1013d8:	e1a0c00d 	mov	ip, sp
  1013dc:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  1013e0:	e24cb004 	sub	fp, ip, #4	; 0x4
  1013e4:	e24dd008 	sub	sp, sp, #8	; 0x8
  1013e8:	e50b0010 	str	r0, [fp, #-16]
  1013ec:	e50b1014 	str	r1, [fp, #-20]
	pPio->PIO_CODR = flag;
  1013f0:	e51b2010 	ldr	r2, [fp, #-16]
  1013f4:	e51b3014 	ldr	r3, [fp, #-20]
  1013f8:	e5823034 	str	r3, [r2, #52]
}
  1013fc:	e24bd00c 	sub	sp, fp, #12	; 0xc
  101400:	e89da800 	ldmia	sp, {fp, sp, pc}

00101404 <AT91F_PIO_SetOutput>:
  101404:	e1a0c00d 	mov	ip, sp
  101408:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  10140c:	e24cb004 	sub	fp, ip, #4	; 0x4
  101410:	e24dd008 	sub	sp, sp, #8	; 0x8
  101414:	e50b0010 	str	r0, [fp, #-16]
  101418:	e50b1014 	str	r1, [fp, #-20]
  10141c:	e51b2010 	ldr	r2, [fp, #-16]
  101420:	e51b3014 	ldr	r3, [fp, #-20]
  101424:	e5823030 	str	r3, [r2, #48]
  101428:	e24bd00c 	sub	sp, fp, #12	; 0xc
  10142c:	e89da800 	ldmia	sp, {fp, sp, pc}

00101430 <AT91F_PIO_CfgInput>:
  101430:	e1a0c00d 	mov	ip, sp
  101434:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  101438:	e24cb004 	sub	fp, ip, #4	; 0x4
  10143c:	e24dd008 	sub	sp, sp, #8	; 0x8
  101440:	e50b0010 	str	r0, [fp, #-16]
  101444:	e50b1014 	str	r1, [fp, #-20]
  101448:	e51b2010 	ldr	r2, [fp, #-16]
  10144c:	e51b3014 	ldr	r3, [fp, #-20]
  101450:	e5823014 	str	r3, [r2, #20]
  101454:	e51b2010 	ldr	r2, [fp, #-16]
  101458:	e51b3014 	ldr	r3, [fp, #-20]
  10145c:	e5823000 	str	r3, [r2]
  101460:	e24bd00c 	sub	sp, fp, #12	; 0xc
  101464:	e89da800 	ldmia	sp, {fp, sp, pc}

00101468 <vFdvTimer_init>:
  ISR_EXIT();
}


void vFdvTimer_init(void) {                    /* Setup PIT with Interrupt */
  101468:	e1a0c00d 	mov	ip, sp
  10146c:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  101470:	e24cb004 	sub	fp, ip, #4	; 0x4
  101474:	e24dd004 	sub	sp, sp, #4	; 0x4
  volatile AT91S_AIC * pAIC = AT91C_BASE_AIC;
  101478:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
  10147c:	e1a039c3 	mov	r3, r3, asr #19
  101480:	e50b3010 	str	r3, [fp, #-16]

  //*AT91C_PIOA_CODR = LED3; 

  *AT91C_PITC_PIMR = AT91C_PITC_PITIEN |    /* PIT Interrupt Enable */ 
  101484:	e3a024a6 	mov	r2, #-1509949440	; 0xa6000000
  101488:	e1a02ac2 	mov	r2, r2, asr #21
  10148c:	e3a03403 	mov	r3, #50331648	; 0x3000000
  101490:	e2833ebb 	add	r3, r3, #2992	; 0xbb0
  101494:	e283300a 	add	r3, r3, #10	; 0xa
  101498:	e5823000 	str	r3, [r2]
                     AT91C_PITC_PITEN  |    /* PIT Enable */
                     PIV;                   /* Periodic Interval Value */ 

  /* Setup System Interrupt Mode and Vector with Priority 7 and Enable it */
  // mt pAIC->AIC_SMR[AT91C_ID_SYS] = AT91C_AIC_SRCTYPE_INT_EDGE_TRIGGERED | 7;
  pAIC->AIC_SMR[AT91C_ID_SYS] = AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE | 7;
  10149c:	e51b2010 	ldr	r2, [fp, #-16]
  1014a0:	e3a03027 	mov	r3, #39	; 0x27
  1014a4:	e5823004 	str	r3, [r2, #4]
  
  pAIC->AIC_SVR[AT91C_ID_SYS] = (unsigned long) system_int;
  1014a8:	e59f3018 	ldr	r3, [pc, #24]	; 1014c8 <.text+0x14c8>
  1014ac:	e1a02003 	mov	r2, r3
  1014b0:	e51b3010 	ldr	r3, [fp, #-16]
  1014b4:	e5832084 	str	r2, [r3, #132]
  pAIC->AIC_IECR = (1 << AT91C_ID_SYS);
  1014b8:	e51b2010 	ldr	r2, [fp, #-16]
  1014bc:	e3a03002 	mov	r3, #2	; 0x2
  1014c0:	e5823120 	str	r3, [r2, #288]
  
  //*AT91C_PIOA_CODR = LED2; 
  
}
  1014c4:	e89da808 	ldmia	sp, {r3, fp, sp, pc}
  1014c8:	0020099c 	mlaeq	r0, ip, r9, r0

001014cc <dvTimerwait>:

void dvTimerwait(unsigned long time)
{
  1014cc:	e1a0c00d 	mov	ip, sp
  1014d0:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  1014d4:	e24cb004 	sub	fp, ip, #4	; 0x4
  1014d8:	e24dd008 	sub	sp, sp, #8	; 0x8
  1014dc:	e50b0014 	str	r0, [fp, #-20]
	unsigned long tick;
	
	tick = timeval;
  1014e0:	e59f3028 	ldr	r3, [pc, #40]	; 101510 <.text+0x1510>
  1014e4:	e5933000 	ldr	r3, [r3]
  1014e8:	e50b3010 	str	r3, [fp, #-16]
	
	/* Wait for specified Time */
	while ((unsigned long)(timeval - tick) < time);
  1014ec:	e59f301c 	ldr	r3, [pc, #28]	; 101510 <.text+0x1510>
  1014f0:	e5932000 	ldr	r2, [r3]
  1014f4:	e51b3010 	ldr	r3, [fp, #-16]
  1014f8:	e0632002 	rsb	r2, r3, r2
  1014fc:	e51b3014 	ldr	r3, [fp, #-20]
  101500:	e1520003 	cmp	r2, r3
  101504:	3afffff8 	bcc	1014ec <dvTimerwait+0x20>
}
  101508:	e24bd00c 	sub	sp, fp, #12	; 0xc
  10150c:	e89da800 	ldmia	sp, {fp, sp, pc}
  101510:	00200c5c 	eoreq	r0, r0, ip, asr ip

00101514 <AT91_spiSetSpeed>:
 BYTE Timer;			/* 100Hz decrement timer */


void AT91_spiSetSpeed(BYTE speed)
{
  101514:	e1a0c00d 	mov	ip, sp
  101518:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  10151c:	e24cb004 	sub	fp, ip, #4	; 0x4
  101520:	e24dd008 	sub	sp, sp, #8	; 0x8
  101524:	e1a03000 	mov	r3, r0
  101528:	e54b3014 	strb	r3, [fp, #-20]
	DWORD reg;

	if ( speed < SPI_SCBR_MIN ) 
  10152c:	e55b3014 	ldrb	r3, [fp, #-20]
  101530:	e3530001 	cmp	r3, #1	; 0x1
  101534:	8a000001 	bhi	101540 <AT91_spiSetSpeed+0x2c>
		speed = SPI_SCBR_MIN;
  101538:	e3a03002 	mov	r3, #2	; 0x2
  10153c:	e54b3014 	strb	r3, [fp, #-20]
	if ( speed > 1 ) 
  101540:	e55b3014 	ldrb	r3, [fp, #-20]
  101544:	e3530001 	cmp	r3, #1	; 0x1
  101548:	9a000004 	bls	101560 <AT91_spiSetSpeed+0x4c>
		speed &= 0xFE;
  10154c:	e3e03001 	mvn	r3, #1	; 0x1
  101550:	e1a02003 	mov	r2, r3
  101554:	e55b3014 	ldrb	r3, [fp, #-20]
  101558:	e0033002 	and	r3, r3, r2
  10155c:	e54b3014 	strb	r3, [fp, #-20]

	reg = pSPI->SPI_CSR[SPI_CSR_NUM];
  101560:	e59f3038 	ldr	r3, [pc, #56]	; 1015a0 <.text+0x15a0>
  101564:	e5933000 	ldr	r3, [r3]
  101568:	e5933030 	ldr	r3, [r3, #48]
  10156c:	e50b3010 	str	r3, [fp, #-16]
	reg = ( reg & ~(AT91C_SPI_SCBR) ) | ( (DWORD)speed << 8 );
  101570:	e51b3010 	ldr	r3, [fp, #-16]
  101574:	e3c32cff 	bic	r2, r3, #65280	; 0xff00
  101578:	e55b3014 	ldrb	r3, [fp, #-20]
  10157c:	e1a03403 	mov	r3, r3, lsl #8
  101580:	e1823003 	orr	r3, r2, r3
  101584:	e50b3010 	str	r3, [fp, #-16]
	pSPI->SPI_CSR[SPI_CSR_NUM] = reg;
  101588:	e59f3010 	ldr	r3, [pc, #16]	; 1015a0 <.text+0x15a0>
  10158c:	e5932000 	ldr	r2, [r3]
  101590:	e51b3010 	ldr	r3, [fp, #-16]
  101594:	e5823030 	str	r3, [r2, #48]
}
  101598:	e24bd00c 	sub	sp, fp, #12	; 0xc
  10159c:	e89da800 	ldmia	sp, {fp, sp, pc}
  1015a0:	00200180 	eoreq	r0, r0, r0, lsl #3

001015a4 <AT91_spi>:

BYTE AT91_spi(BYTE outgoing)
{
  1015a4:	e1a0c00d 	mov	ip, sp
  1015a8:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  1015ac:	e24cb004 	sub	fp, ip, #4	; 0x4
  1015b0:	e24dd008 	sub	sp, sp, #8	; 0x8
  1015b4:	e1a03000 	mov	r3, r0
  1015b8:	e54b3014 	strb	r3, [fp, #-20]
	BYTE incoming;

	while( !( pSPI->SPI_SR & AT91C_SPI_TDRE ) ); // transfer compl. wait
  1015bc:	e59f3058 	ldr	r3, [pc, #88]	; 10161c <.text+0x161c>
  1015c0:	e5933000 	ldr	r3, [r3]
  1015c4:	e5933010 	ldr	r3, [r3, #16]
  1015c8:	e2033002 	and	r3, r3, #2	; 0x2
  1015cc:	e3530000 	cmp	r3, #0	; 0x0
  1015d0:	0afffff9 	beq	1015bc <AT91_spi+0x18>
	pSPI->SPI_TDR = (WORD)( outgoing );
  1015d4:	e59f3040 	ldr	r3, [pc, #64]	; 10161c <.text+0x161c>
  1015d8:	e5932000 	ldr	r2, [r3]
  1015dc:	e55b3014 	ldrb	r3, [fp, #-20]
  1015e0:	e582300c 	str	r3, [r2, #12]
	while( !( pSPI->SPI_SR & AT91C_SPI_RDRF ) ); // wait for char
  1015e4:	e59f3030 	ldr	r3, [pc, #48]	; 10161c <.text+0x161c>
  1015e8:	e5933000 	ldr	r3, [r3]
  1015ec:	e5933010 	ldr	r3, [r3, #16]
  1015f0:	e2033001 	and	r3, r3, #1	; 0x1
  1015f4:	e3530000 	cmp	r3, #0	; 0x0
  1015f8:	0afffff9 	beq	1015e4 <AT91_spi+0x40>
	incoming = (BYTE)( pSPI->SPI_RDR );
  1015fc:	e59f3018 	ldr	r3, [pc, #24]	; 10161c <.text+0x161c>
  101600:	e5933000 	ldr	r3, [r3]
  101604:	e5933008 	ldr	r3, [r3, #8]
  101608:	e54b300d 	strb	r3, [fp, #-13]

	return incoming;
  10160c:	e55b300d 	ldrb	r3, [fp, #-13]
}
  101610:	e1a00003 	mov	r0, r3
  101614:	e24bd00c 	sub	sp, fp, #12	; 0xc
  101618:	e89da800 	ldmia	sp, {fp, sp, pc}
  10161c:	00200180 	eoreq	r0, r0, r0, lsl #3

00101620 <xmit_spi>:

/*--------------------------------*/
/* Transmit a byte to MMC via SPI */
/* (Platform dependent)           */

void xmit_spi(BYTE dat)
{
  101620:	e1a0c00d 	mov	ip, sp
  101624:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  101628:	e24cb004 	sub	fp, ip, #4	; 0x4
  10162c:	e24dd004 	sub	sp, sp, #4	; 0x4
  101630:	e1a03000 	mov	r3, r0
  101634:	e54b3010 	strb	r3, [fp, #-16]
	AT91_spi(dat);
  101638:	e55b3010 	ldrb	r3, [fp, #-16]
  10163c:	e1a00003 	mov	r0, r3
  101640:	ebffffd7 	bl	1015a4 <AT91_spi>
}
  101644:	e89da808 	ldmia	sp, {r3, fp, sp, pc}

00101648 <rcvr_spi>:

/*---------------------------------*/
/* Receive a byte from MMC via SPI */
/* (Platform dependent)            */

BYTE rcvr_spi(void)
{
  101648:	e1a0c00d 	mov	ip, sp
  10164c:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  101650:	e24cb004 	sub	fp, ip, #4	; 0x4
	return AT91_spi(0xff);
  101654:	e3a000ff 	mov	r0, #255	; 0xff
  101658:	ebffffd1 	bl	1015a4 <AT91_spi>
  10165c:	e1a03000 	mov	r3, r0
}
  101660:	e1a00003 	mov	r0, r3
  101664:	e89da800 	ldmia	sp, {fp, sp, pc}

00101668 <rcvr_spi_m>:

/* Alternative "macro" (not at AT91 so far) to receive data fast */
void rcvr_spi_m(BYTE *dst)
{
  101668:	e1a0c00d 	mov	ip, sp
  10166c:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  101670:	e24cb004 	sub	fp, ip, #4	; 0x4
  101674:	e24dd004 	sub	sp, sp, #4	; 0x4
  101678:	e50b0010 	str	r0, [fp, #-16]
	*dst = rcvr_spi();
  10167c:	ebfffff1 	bl	101648 <rcvr_spi>
  101680:	e1a03000 	mov	r3, r0
  101684:	e51b2010 	ldr	r2, [fp, #-16]
  101688:	e5c23000 	strb	r3, [r2]
}
  10168c:	e89da808 	ldmia	sp, {r3, fp, sp, pc}

00101690 <wait_ready>:


/*---------------------*/
/* Wait for card ready */
BYTE wait_ready ()
{
  101690:	e1a0c00d 	mov	ip, sp
  101694:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  101698:	e24cb004 	sub	fp, ip, #4	; 0x4
  10169c:	e24dd004 	sub	sp, sp, #4	; 0x4
	BYTE res;
	
	Timer = 50;			/* Wait for ready in timeout of 500ms */
  1016a0:	e59f3040 	ldr	r3, [pc, #64]	; 1016e8 <.text+0x16e8>
  1016a4:	e3a02032 	mov	r2, #50	; 0x32
  1016a8:	e5c32000 	strb	r2, [r3]
	rcvr_spi();
  1016ac:	ebffffe5 	bl	101648 <rcvr_spi>
	do
		res = rcvr_spi();
  1016b0:	ebffffe4 	bl	101648 <rcvr_spi>
  1016b4:	e1a03000 	mov	r3, r0
  1016b8:	e54b300d 	strb	r3, [fp, #-13]
	while ((res != 0xFF) && Timer);
  1016bc:	e55b300d 	ldrb	r3, [fp, #-13]
  1016c0:	e35300ff 	cmp	r3, #255	; 0xff
  1016c4:	0a000004 	beq	1016dc <wait_ready+0x4c>
  1016c8:	e59f3018 	ldr	r3, [pc, #24]	; 1016e8 <.text+0x16e8>
  1016cc:	e5d33000 	ldrb	r3, [r3]
  1016d0:	e20330ff 	and	r3, r3, #255	; 0xff
  1016d4:	e3530000 	cmp	r3, #0	; 0x0
  1016d8:	1afffff4 	bne	1016b0 <wait_ready+0x20>
	return res;
  1016dc:	e55b300d 	ldrb	r3, [fp, #-13]
}
  1016e0:	e1a00003 	mov	r0, r3
  1016e4:	e89da808 	ldmia	sp, {r3, fp, sp, pc}
  1016e8:	00200b68 	eoreq	r0, r0, r8, ror #22

001016ec <vFdvSpi_Init>:






/*-----------------------------------------------------------------------*/
/* Public Functions                                                      */


/*-----------------------*/
/* Initialize Disk Drive */
/* (Platform dependent)  */

void vFdvSpi_Init( void )
{
  1016ec:	e1a0c00d 	mov	ip, sp
  1016f0:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  1016f4:	e24cb004 	sub	fp, ip, #4	; 0x4
	// disable PIO from controlling MOSI, MISO, SCK (=hand over to SPI)
	// keep CS untouched - used as GPIO pin during init
	pPIOA->PIO_PDR = AT91C_PA12_MISO | AT91C_PA13_MOSI | AT91C_PA14_SPCK|AT91C_PA11_NPCS0; //  | NCPS_PDR_BIT;
  1016f8:	e59f3080 	ldr	r3, [pc, #128]	; 101780 <.text+0x1780>
  1016fc:	e5932000 	ldr	r2, [r3]
  101700:	e3a03b1e 	mov	r3, #30720	; 0x7800
  101704:	e5823004 	str	r3, [r2, #4]
	// set pin-functions in PIO Controller
	pPIOA->PIO_ASR = AT91C_PA12_MISO | AT91C_PA13_MOSI | AT91C_PA14_SPCK|AT91C_PA11_NPCS0; /// not here: | NCPS_ASR_BIT;
  101708:	e59f3070 	ldr	r3, [pc, #112]	; 101780 <.text+0x1780>
  10170c:	e5932000 	ldr	r2, [r3]
  101710:	e3a03b1e 	mov	r3, #30720	; 0x7800
  101714:	e5823070 	str	r3, [r2, #112]
	

	// enable peripheral clock for SPI ( PID Bit 5 )
	AT91F_PMC_EnablePeriphClock(AT91C_BASE_PMC,1 << AT91C_ID_SPI  );
  101718:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
  10171c:	e1a00ac0 	mov	r0, r0, asr #21
  101720:	e3a01020 	mov	r1, #32	; 0x20
  101724:	eb000017 	bl	101788 <AT91F_PMC_EnablePeriphClock>
	//pPMC->PMC_PCER = ( (DWORD) 1 << AT91C_ID_SPI ); // n.b. IDs are just bit-numbers
	
	// SPI enable and reset
	AT91F_SPI_Reset(AT91C_BASE_SPI);
  101728:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
  10172c:	e1a00740 	mov	r0, r0, asr #14
  101730:	eb00001f 	bl	1017b4 <AT91F_SPI_Reset>
	AT91F_SPI_Enable(AT91C_BASE_SPI);
  101734:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
  101738:	e1a00740 	mov	r0, r0, asr #14
  10173c:	eb000025 	bl	1017d8 <AT91F_SPI_Enable>
	//pSPI->SPI_CR = AT91C_SPI_SPIEN | AT91C_SPI_SWRST;
	
	// SPI mode: master, FDIV=0, fault detection disabled
	AT91F_SPI_CfgMode(AT91C_BASE_SPI,AT91C_SPI_MSTR | AT91C_SPI_MODFDIS);
  101740:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
  101744:	e1a00740 	mov	r0, r0, asr #14
  101748:	e3a01011 	mov	r1, #17	; 0x11
  10174c:	eb00002a 	bl	1017fc <AT91F_SPI_CfgMode>
	//pSPI->SPI_MR  = AT91C_SPI_MSTR | AT91C_SPI_MODFDIS;
	
	// set chip-select-register
	// 8 bits per transfer, CPOL=1, ClockPhase=0, DLYBCT = 0
	AT91F_SPI_CfgCs(AT91C_BASE_SPI ,SPI_CSR_NUM, AT91C_SPI_CPOL | AT91C_SPI_BITS_8);
  101750:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
  101754:	e1a00740 	mov	r0, r0, asr #14
  101758:	e3a01000 	mov	r1, #0	; 0x0
  10175c:	e3a02001 	mov	r2, #1	; 0x1
  101760:	eb000030 	bl	101828 <AT91F_SPI_CfgCs>
	//pSPI->SPI_CSR[SPI_CSR_NUM] = AT91C_SPI_CPOL | AT91C_SPI_BITS_8;
	
	// slow during init
	AT91_spiSetSpeed(0xFE); 
  101764:	e3a000fe 	mov	r0, #254	; 0xfe
  101768:	ebffff69 	bl	101514 <AT91_spiSetSpeed>
	
	// enable
	pSPI->SPI_CR = AT91C_SPI_SPIEN;
  10176c:	e59f3010 	ldr	r3, [pc, #16]	; 101784 <.text+0x1784>
  101770:	e5932000 	ldr	r2, [r3]
  101774:	e3a03001 	mov	r3, #1	; 0x1
  101778:	e5823000 	str	r3, [r2]

}
  10177c:	e89da800 	ldmia	sp, {fp, sp, pc}
  101780:	0020017c 	eoreq	r0, r0, ip, ror r1
  101784:	00200180 	eoreq	r0, r0, r0, lsl #3

00101788 <AT91F_PMC_EnablePeriphClock>:
//*----------------------------------------------------------------------------
static __inline void AT91F_PMC_EnablePeriphClock (
	AT91PS_PMC pPMC, // \arg pointer to PMC controller
	unsigned int periphIds)  // \arg IDs of peripherals to enable
{
  101788:	e1a0c00d 	mov	ip, sp
  10178c:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  101790:	e24cb004 	sub	fp, ip, #4	; 0x4
  101794:	e24dd008 	sub	sp, sp, #8	; 0x8
  101798:	e50b0010 	str	r0, [fp, #-16]
  10179c:	e50b1014 	str	r1, [fp, #-20]
	pPMC->PMC_PCER = periphIds;
  1017a0:	e51b2010 	ldr	r2, [fp, #-16]
  1017a4:	e51b3014 	ldr	r3, [fp, #-20]
  1017a8:	e5823010 	str	r3, [r2, #16]
}
  1017ac:	e24bd00c 	sub	sp, fp, #12	; 0xc
  1017b0:	e89da800 	ldmia	sp, {fp, sp, pc}

001017b4 <AT91F_SPI_Reset>:

//*----------------------------------------------------------------------------
//* \fn    AT91F_PMC_DisablePeriphClock
//* \brief Disable peripheral clock
//*----------------------------------------------------------------------------
static __inline void AT91F_PMC_DisablePeriphClock (
	AT91PS_PMC pPMC, // \arg pointer to PMC controller
	unsigned int periphIds)  // \arg IDs of peripherals to enable
{
	pPMC->PMC_PCDR = periphIds;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PMC_GetPeriphClock
//* \brief Get peripheral clock status
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_PMC_GetPeriphClock (
	AT91PS_PMC pPMC) // \arg pointer to PMC controller
{
	return pPMC->PMC_PCSR;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_CKGR_CfgMainOscillatorReg
//* \brief Cfg the main oscillator
//*----------------------------------------------------------------------------
static __inline void AT91F_CKGR_CfgMainOscillatorReg (
	AT91PS_CKGR pCKGR, // \arg pointer to CKGR controller
	unsigned int mode)
{
	pCKGR->CKGR_MOR = mode;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_CKGR_GetMainOscillatorReg
//* \brief Cfg the main oscillator
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_CKGR_GetMainOscillatorReg (
	AT91PS_CKGR pCKGR) // \arg pointer to CKGR controller
{
	return pCKGR->CKGR_MOR;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_CKGR_EnableMainOscillator
//* \brief Enable the main oscillator
//*----------------------------------------------------------------------------
static __inline void AT91F_CKGR_EnableMainOscillator(
	AT91PS_CKGR pCKGR) // \arg pointer to CKGR controller
{
	pCKGR->CKGR_MOR |= AT91C_CKGR_MOSCEN;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_CKGR_DisableMainOscillator
//* \brief Disable the main oscillator
//*----------------------------------------------------------------------------
static __inline void AT91F_CKGR_DisableMainOscillator (
	AT91PS_CKGR pCKGR) // \arg pointer to CKGR controller
{
	pCKGR->CKGR_MOR &= ~AT91C_CKGR_MOSCEN;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_CKGR_CfgMainOscStartUpTime
//* \brief Cfg MOR Register according to the main osc startup time
//*----------------------------------------------------------------------------
static __inline void AT91F_CKGR_CfgMainOscStartUpTime (
	AT91PS_CKGR pCKGR, // \arg pointer to CKGR controller
	unsigned int startup_time,  // \arg main osc startup time in microsecond (us)
	unsigned int slowClock)  // \arg slowClock in Hz
{
	pCKGR->CKGR_MOR &= ~AT91C_CKGR_OSCOUNT;
	pCKGR->CKGR_MOR |= ((slowClock * startup_time)/(8*1000000)) << 8;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_CKGR_GetMainClockFreqReg
//* \brief Cfg the main oscillator
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_CKGR_GetMainClockFreqReg (
	AT91PS_CKGR pCKGR) // \arg pointer to CKGR controller
{
	return pCKGR->CKGR_MCFR;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_CKGR_GetMainClock
//* \brief Return Main clock in Hz
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_CKGR_GetMainClock (
	AT91PS_CKGR pCKGR, // \arg pointer to CKGR controller
	unsigned int slowClock)  // \arg slowClock in Hz
{
	return ((pCKGR->CKGR_MCFR  & AT91C_CKGR_MAINF) * slowClock) >> 4;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PMC_CfgMCKReg
//* \brief Cfg Master Clock Register
//*----------------------------------------------------------------------------
static __inline void AT91F_PMC_CfgMCKReg (
	AT91PS_PMC pPMC, // \arg pointer to PMC controller
	unsigned int mode)
{
	pPMC->PMC_MCKR = mode;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PMC_GetMCKReg
//* \brief Return Master Clock Register
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_PMC_GetMCKReg(
	AT91PS_PMC pPMC) // \arg pointer to PMC controller
{
	return pPMC->PMC_MCKR;
}

//*------------------------------------------------------------------------------
//* \fn    AT91F_PMC_GetMasterClock
//* \brief Return master clock in Hz which correponds to processor clock for ARM7
//*------------------------------------------------------------------------------
static __inline unsigned int AT91F_PMC_GetMasterClock (
	AT91PS_PMC pPMC, // \arg pointer to PMC controller
	AT91PS_CKGR pCKGR, // \arg pointer to CKGR controller
	unsigned int slowClock)  // \arg slowClock in Hz
{
	unsigned int reg = pPMC->PMC_MCKR;
	unsigned int prescaler = (1 << ((reg & AT91C_PMC_PRES) >> 2));
	unsigned int pllDivider, pllMultiplier;

	switch (reg & AT91C_PMC_CSS) {
		case AT91C_PMC_CSS_SLOW_CLK: // Slow clock selected
			return slowClock / prescaler;
		case AT91C_PMC_CSS_MAIN_CLK: // Main clock is selected
			return AT91F_CKGR_GetMainClock(pCKGR, slowClock) / prescaler;
		case AT91C_PMC_CSS_PLL_CLK: // PLLB clock is selected
			reg = pCKGR->CKGR_PLLR;
			pllDivider    = (reg  & AT91C_CKGR_DIV);
			pllMultiplier = ((reg  & AT91C_CKGR_MUL) >> 16) + 1;
			return AT91F_CKGR_GetMainClock(pCKGR, slowClock) / pllDivider * pllMultiplier / prescaler;
	}
	return 0;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PMC_EnablePCK
//* \brief Enable peripheral clock
//*----------------------------------------------------------------------------
static __inline void AT91F_PMC_EnablePCK (
	AT91PS_PMC pPMC, // \arg pointer to PMC controller
	unsigned int pck,  // \arg Peripheral clock identifier 0 .. 7
	unsigned int mode)
{
	pPMC->PMC_PCKR[pck] = mode;
	pPMC->PMC_SCER = (1 << pck) << 8;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PMC_DisablePCK
//* \brief Enable peripheral clock
//*----------------------------------------------------------------------------
static __inline void AT91F_PMC_DisablePCK (
	AT91PS_PMC pPMC, // \arg pointer to PMC controller
	unsigned int pck)  // \arg Peripheral clock identifier 0 .. 7
{
	pPMC->PMC_SCDR = (1 << pck) << 8;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PMC_EnableIt
//* \brief Enable PMC interrupt
//*----------------------------------------------------------------------------
static __inline void AT91F_PMC_EnableIt (
	AT91PS_PMC pPMC,     // pointer to a PMC controller
	unsigned int flag)   // IT to be enabled
{
	//* Write to the IER register
	pPMC->PMC_IER = flag;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PMC_DisableIt
//* \brief Disable PMC interrupt
//*----------------------------------------------------------------------------
static __inline void AT91F_PMC_DisableIt (
	AT91PS_PMC pPMC, // pointer to a PMC controller
	unsigned int flag) // IT to be disabled
{
	//* Write to the IDR register
	pPMC->PMC_IDR = flag;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PMC_GetStatus
//* \brief Return PMC Interrupt Status
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_PMC_GetStatus( // \return PMC Interrupt Status
	AT91PS_PMC pPMC) // pointer to a PMC controller
{
	return pPMC->PMC_SR;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PMC_GetInterruptMaskStatus
//* \brief Return PMC Interrupt Mask Status
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_PMC_GetInterruptMaskStatus( // \return PMC Interrupt Mask Status
	AT91PS_PMC pPMC) // pointer to a PMC controller
{
	return pPMC->PMC_IMR;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PMC_IsInterruptMasked
//* \brief Test if PMC Interrupt is Masked
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_PMC_IsInterruptMasked(
        AT91PS_PMC pPMC,   // \arg  pointer to a PMC controller
        unsigned int flag) // \arg  flag to be tested
{
	return (AT91F_PMC_GetInterruptMaskStatus(pPMC) & flag);
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PMC_IsStatusSet
//* \brief Test if PMC Status is Set
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_PMC_IsStatusSet(
        AT91PS_PMC pPMC,   // \arg  pointer to a PMC controller
        unsigned int flag) // \arg  flag to be tested
{
	return (AT91F_PMC_GetStatus(pPMC) & flag);
}

// ----------------------------------------------------------------------------
//  \fn    AT91F_CKGR_CfgPLLReg
//  \brief Cfg the PLL Register
// ----------------------------------------------------------------------------
static __inline void AT91F_CKGR_CfgPLLReg (
	AT91PS_CKGR pCKGR, // \arg pointer to CKGR controller
	unsigned int mode)
{
	pCKGR->CKGR_PLLR = mode;
}

// ----------------------------------------------------------------------------
//  \fn    AT91F_CKGR_GetPLLReg
//  \brief Get the PLL Register
// ----------------------------------------------------------------------------
static __inline unsigned int AT91F_CKGR_GetPLLReg (
	AT91PS_CKGR pCKGR) // \arg pointer to CKGR controller
{
	return pCKGR->CKGR_PLLR;
}



/* *****************************************************************************
                SOFTWARE API FOR RSTC
   ***************************************************************************** */
//*----------------------------------------------------------------------------
//* \fn    AT91F_RSTSoftReset
//* \brief Start Software Reset
//*----------------------------------------------------------------------------
static __inline void AT91F_RSTSoftReset(
        AT91PS_RSTC pRSTC,
        unsigned int reset)
{
	pRSTC->RSTC_RCR = (0xA5000000 | reset);
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_RSTSetMode
//* \brief Set Reset Mode
//*----------------------------------------------------------------------------
static __inline void AT91F_RSTSetMode(
        AT91PS_RSTC pRSTC,
        unsigned int mode)
{
	pRSTC->RSTC_RMR = (0xA5000000 | mode);
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_RSTGetMode
//* \brief Get Reset Mode
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_RSTGetMode(
        AT91PS_RSTC pRSTC)
{
	return (pRSTC->RSTC_RMR);
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_RSTGetStatus
//* \brief Get Reset Status
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_RSTGetStatus(
        AT91PS_RSTC pRSTC)
{
	return (pRSTC->RSTC_RSR);
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_RSTIsSoftRstActive
//* \brief Return !=0 if software reset is still not completed
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_RSTIsSoftRstActive(
        AT91PS_RSTC pRSTC)
{
	return ((pRSTC->RSTC_RSR) & AT91C_RSTC_SRCMP);
}
/* *****************************************************************************
                SOFTWARE API FOR RTTC
   ***************************************************************************** */
//*--------------------------------------------------------------------------------------
//* \fn     AT91F_SetRTT_TimeBase()
//* \brief  Set the RTT prescaler according to the TimeBase in ms
//*--------------------------------------------------------------------------------------
static __inline unsigned int AT91F_RTTSetTimeBase(
        AT91PS_RTTC pRTTC, 
        unsigned int ms)
{
	if (ms > 2000)
		return 1;   // AT91C_TIME_OUT_OF_RANGE
	pRTTC->RTTC_RTMR &= ~0xFFFF;	
	pRTTC->RTTC_RTMR |= (((ms << 15) /1000) & 0xFFFF);	
	return 0;
}

//*--------------------------------------------------------------------------------------
//* \fn     AT91F_RTTSetPrescaler()
//* \brief  Set the new prescaler value
//*--------------------------------------------------------------------------------------
static __inline unsigned int AT91F_RTTSetPrescaler(
        AT91PS_RTTC pRTTC, 
        unsigned int rtpres)
{
	pRTTC->RTTC_RTMR &= ~0xFFFF;	
	pRTTC->RTTC_RTMR |= (rtpres & 0xFFFF);	
	return (pRTTC->RTTC_RTMR);
}

//*--------------------------------------------------------------------------------------
//* \fn     AT91F_RTTRestart()
//* \brief  Restart the RTT prescaler
//*--------------------------------------------------------------------------------------
static __inline void AT91F_RTTRestart(
        AT91PS_RTTC pRTTC)
{
	pRTTC->RTTC_RTMR |= AT91C_RTTC_RTTRST;	
}


//*--------------------------------------------------------------------------------------
//* \fn     AT91F_RTT_SetAlarmINT()
//* \brief  Enable RTT Alarm Interrupt
//*--------------------------------------------------------------------------------------
static __inline void AT91F_RTTSetAlarmINT(
        AT91PS_RTTC pRTTC)
{
	pRTTC->RTTC_RTMR |= AT91C_RTTC_ALMIEN;
}

//*--------------------------------------------------------------------------------------
//* \fn     AT91F_RTT_ClearAlarmINT()
//* \brief  Disable RTT Alarm Interrupt
//*--------------------------------------------------------------------------------------
static __inline void AT91F_RTTClearAlarmINT(
        AT91PS_RTTC pRTTC)
{
	pRTTC->RTTC_RTMR &= ~AT91C_RTTC_ALMIEN;
}

//*--------------------------------------------------------------------------------------
//* \fn     AT91F_RTT_SetRttIncINT()
//* \brief  Enable RTT INC Interrupt
//*--------------------------------------------------------------------------------------
static __inline void AT91F_RTTSetRttIncINT(
        AT91PS_RTTC pRTTC)
{
	pRTTC->RTTC_RTMR |= AT91C_RTTC_RTTINCIEN;
}

//*--------------------------------------------------------------------------------------
//* \fn     AT91F_RTT_ClearRttIncINT()
//* \brief  Disable RTT INC Interrupt
//*--------------------------------------------------------------------------------------
static __inline void AT91F_RTTClearRttIncINT(
        AT91PS_RTTC pRTTC)
{
	pRTTC->RTTC_RTMR &= ~AT91C_RTTC_RTTINCIEN;
}

//*--------------------------------------------------------------------------------------
//* \fn     AT91F_RTT_SetAlarmValue()
//* \brief  Set RTT Alarm Value
//*--------------------------------------------------------------------------------------
static __inline void AT91F_RTTSetAlarmValue(
        AT91PS_RTTC pRTTC, unsigned int alarm)
{
	pRTTC->RTTC_RTAR = alarm;
}

//*--------------------------------------------------------------------------------------
//* \fn     AT91F_RTT_GetAlarmValue()
//* \brief  Get RTT Alarm Value
//*--------------------------------------------------------------------------------------
static __inline unsigned int AT91F_RTTGetAlarmValue(
        AT91PS_RTTC pRTTC)
{
	return(pRTTC->RTTC_RTAR);
}

//*--------------------------------------------------------------------------------------
//* \fn     AT91F_RTTGetStatus()
//* \brief  Read the RTT status
//*--------------------------------------------------------------------------------------
static __inline unsigned int AT91F_RTTGetStatus(
        AT91PS_RTTC pRTTC)
{
	return(pRTTC->RTTC_RTSR);
}

//*--------------------------------------------------------------------------------------
//* \fn     AT91F_RTT_ReadValue()
//* \brief  Read the RTT value
//*--------------------------------------------------------------------------------------
static __inline unsigned int AT91F_RTTReadValue(
        AT91PS_RTTC pRTTC)
{
        register volatile unsigned int val1,val2;
	do
	{
		val1 = pRTTC->RTTC_RTVR;
		val2 = pRTTC->RTTC_RTVR;
	}	
	while(val1 != val2);
	return(val1);
}
/* *****************************************************************************
                SOFTWARE API FOR PITC
   ***************************************************************************** */
//*----------------------------------------------------------------------------
//* \fn    AT91F_PITInit
//* \brief System timer init : period in ï¿½second, system clock freq in MHz
//*----------------------------------------------------------------------------
static __inline void AT91F_PITInit(
        AT91PS_PITC pPITC,
        unsigned int period,
        unsigned int pit_frequency)
{
	pPITC->PITC_PIMR = period? (period * pit_frequency + 8) >> 4 : 0; // +8 to avoid %10 and /10
	pPITC->PITC_PIMR |= AT91C_PITC_PITEN;	 
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PITSetPIV
//* \brief Set the PIT Periodic Interval Value 
//*----------------------------------------------------------------------------
static __inline void AT91F_PITSetPIV(
        AT91PS_PITC pPITC,
        unsigned int piv)
{
	pPITC->PITC_PIMR = piv | (pPITC->PITC_PIMR & (AT91C_PITC_PITEN | AT91C_PITC_PITIEN));
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PITEnableInt
//* \brief Enable PIT periodic interrupt
//*----------------------------------------------------------------------------
static __inline void AT91F_PITEnableInt(
        AT91PS_PITC pPITC)
{
	pPITC->PITC_PIMR |= AT91C_PITC_PITIEN;	 
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PITDisableInt
//* \brief Disable PIT periodic interrupt
//*----------------------------------------------------------------------------
static __inline void AT91F_PITDisableInt(
        AT91PS_PITC pPITC)
{
	pPITC->PITC_PIMR &= ~AT91C_PITC_PITIEN;	 
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PITGetMode
//* \brief Read PIT mode register
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_PITGetMode(
        AT91PS_PITC pPITC)
{
	return(pPITC->PITC_PIMR);
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PITGetStatus
//* \brief Read PIT status register
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_PITGetStatus(
        AT91PS_PITC pPITC)
{
	return(pPITC->PITC_PISR);
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PITGetPIIR
//* \brief Read PIT CPIV and PICNT without ressetting the counters
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_PITGetPIIR(
        AT91PS_PITC pPITC)
{
	return(pPITC->PITC_PIIR);
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_PITGetPIVR
//* \brief Read System timer CPIV and PICNT without ressetting the counters
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_PITGetPIVR(
        AT91PS_PITC pPITC)
{
	return(pPITC->PITC_PIVR);
}
/* *****************************************************************************
                SOFTWARE API FOR WDTC
   ***************************************************************************** */
//*----------------------------------------------------------------------------
//* \fn    AT91F_WDTSetMode
//* \brief Set Watchdog Mode Register
//*----------------------------------------------------------------------------
static __inline void AT91F_WDTSetMode(
        AT91PS_WDTC pWDTC,
        unsigned int Mode)
{
	pWDTC->WDTC_WDMR = Mode;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_WDTRestart
//* \brief Restart Watchdog
//*----------------------------------------------------------------------------
static __inline void AT91F_WDTRestart(
        AT91PS_WDTC pWDTC)
{
	pWDTC->WDTC_WDCR = 0xA5000001;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_WDTSGettatus
//* \brief Get Watchdog Status
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_WDTSGettatus(
        AT91PS_WDTC pWDTC)
{
	return(pWDTC->WDTC_WDSR & 0x3);
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_WDTGetPeriod
//* \brief Translate ms into Watchdog Compatible value
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_WDTGetPeriod(unsigned int ms)
{
	if ((ms < 4) || (ms > 16000))
		return 0;
	return((ms << 8) / 1000);
}
/* *****************************************************************************
                SOFTWARE API FOR VREG
   ***************************************************************************** */
//*----------------------------------------------------------------------------
//* \fn    AT91F_VREG_Enable_LowPowerMode
//* \brief Enable VREG Low Power Mode
//*----------------------------------------------------------------------------
static __inline void AT91F_VREG_Enable_LowPowerMode(
        AT91PS_VREG pVREG)
{
	pVREG->VREG_MR |= AT91C_VREG_PSTDBY;	 
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_VREG_Disable_LowPowerMode
//* \brief Disable VREG Low Power Mode
//*----------------------------------------------------------------------------
static __inline void AT91F_VREG_Disable_LowPowerMode(
        AT91PS_VREG pVREG)
{
	pVREG->VREG_MR &= ~AT91C_VREG_PSTDBY;	 
}/* *****************************************************************************
                SOFTWARE API FOR MC
   ***************************************************************************** */

#define AT91C_MC_CORRECT_KEY  ((unsigned int) 0x5A << 24) // (MC) Correct Protect Key

//*----------------------------------------------------------------------------
//* \fn    AT91F_MC_Remap
//* \brief Make Remap
//*----------------------------------------------------------------------------
static __inline void AT91F_MC_Remap (void)     //  
{
    AT91PS_MC pMC = (AT91PS_MC) AT91C_BASE_MC;
    
    pMC->MC_RCR = AT91C_MC_RCB;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_MC_EFC_CfgModeReg
//* \brief Configure the EFC Mode Register of the MC controller
//*----------------------------------------------------------------------------
static __inline void AT91F_MC_EFC_CfgModeReg (
	AT91PS_MC pMC, // pointer to a MC controller
	unsigned int mode)        // mode register 
{
	// Write to the FMR register
	pMC->MC_FMR = mode;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_MC_EFC_GetModeReg
//* \brief Return MC EFC Mode Regsiter
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_MC_EFC_GetModeReg(
	AT91PS_MC pMC) // pointer to a MC controller
{
	return pMC->MC_FMR;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_MC_EFC_ComputeFMCN
//* \brief Return MC EFC Mode Regsiter
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_MC_EFC_ComputeFMCN(
	int master_clock) // master clock in Hz
{
	return (master_clock/1000000 +2);
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_MC_EFC_PerformCmd
//* \brief Perform EFC Command
//*----------------------------------------------------------------------------
static __inline void AT91F_MC_EFC_PerformCmd (
	AT91PS_MC pMC, // pointer to a MC controller
    unsigned int transfer_cmd)
{
	pMC->MC_FCR = transfer_cmd;	
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_MC_EFC_GetStatus
//* \brief Return MC EFC Status
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_MC_EFC_GetStatus(
	AT91PS_MC pMC) // pointer to a MC controller
{
	return pMC->MC_FSR;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_MC_EFC_IsInterruptMasked
//* \brief Test if EFC MC Interrupt is Masked 
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_MC_EFC_IsInterruptMasked(
        AT91PS_MC pMC,   // \arg  pointer to a MC controller
        unsigned int flag) // \arg  flag to be tested
{
	return (AT91F_MC_EFC_GetModeReg(pMC) & flag);
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_MC_EFC_IsInterruptSet
//* \brief Test if EFC MC Interrupt is Set
//*----------------------------------------------------------------------------
static __inline unsigned int AT91F_MC_EFC_IsInterruptSet(
        AT91PS_MC pMC,   // \arg  pointer to a MC controller
        unsigned int flag) // \arg  flag to be tested
{
	return (AT91F_MC_EFC_GetStatus(pMC) & flag);
}

/* *****************************************************************************
                SOFTWARE API FOR SPI
   ***************************************************************************** */
//*----------------------------------------------------------------------------
//* \fn    AT91F_SPI_CfgCs
//* \brief Configure SPI chip select register
//*----------------------------------------------------------------------------
static __inline void AT91F_SPI_CfgCs (
	AT91PS_SPI pSPI,     // pointer to a SPI controller
	int cs,     // SPI cs number (0 to 3)
 	int val)   //  chip select register
{
	//* Write to the CSR register
	*(pSPI->SPI_CSR + cs) = val;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_SPI_EnableIt
//* \brief Enable SPI interrupt
//*----------------------------------------------------------------------------
static __inline void AT91F_SPI_EnableIt (
	AT91PS_SPI pSPI,     // pointer to a SPI controller
	unsigned int flag)   // IT to be enabled
{
	//* Write to the IER register
	pSPI->SPI_IER = flag;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_SPI_DisableIt
//* \brief Disable SPI interrupt
//*----------------------------------------------------------------------------
static __inline void AT91F_SPI_DisableIt (
	AT91PS_SPI pSPI, // pointer to a SPI controller
	unsigned int flag) // IT to be disabled
{
	//* Write to the IDR register
	pSPI->SPI_IDR = flag;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_SPI_Reset
//* \brief Reset the SPI controller
//*----------------------------------------------------------------------------
static __inline void AT91F_SPI_Reset (
	AT91PS_SPI pSPI // pointer to a SPI controller
	)
{
  1017b4:	e1a0c00d 	mov	ip, sp
  1017b8:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  1017bc:	e24cb004 	sub	fp, ip, #4	; 0x4
  1017c0:	e24dd004 	sub	sp, sp, #4	; 0x4
  1017c4:	e50b0010 	str	r0, [fp, #-16]
	//* Write to the CR register
	pSPI->SPI_CR = AT91C_SPI_SWRST;
  1017c8:	e51b2010 	ldr	r2, [fp, #-16]
  1017cc:	e3a03080 	mov	r3, #128	; 0x80
  1017d0:	e5823000 	str	r3, [r2]
}
  1017d4:	e89da808 	ldmia	sp, {r3, fp, sp, pc}

001017d8 <AT91F_SPI_Enable>:

//*----------------------------------------------------------------------------
//* \fn    AT91F_SPI_Enable
//* \brief Enable the SPI controller
//*----------------------------------------------------------------------------
static __inline void AT91F_SPI_Enable (
	AT91PS_SPI pSPI // pointer to a SPI controller
	)
{
  1017d8:	e1a0c00d 	mov	ip, sp
  1017dc:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  1017e0:	e24cb004 	sub	fp, ip, #4	; 0x4
  1017e4:	e24dd004 	sub	sp, sp, #4	; 0x4
  1017e8:	e50b0010 	str	r0, [fp, #-16]
	//* Write to the CR register
	pSPI->SPI_CR = AT91C_SPI_SPIEN;
  1017ec:	e51b2010 	ldr	r2, [fp, #-16]
  1017f0:	e3a03001 	mov	r3, #1	; 0x1
  1017f4:	e5823000 	str	r3, [r2]
}
  1017f8:	e89da808 	ldmia	sp, {r3, fp, sp, pc}

001017fc <AT91F_SPI_CfgMode>:

//*----------------------------------------------------------------------------
//* \fn    AT91F_SPI_Disable
//* \brief Disable the SPI controller
//*----------------------------------------------------------------------------
static __inline void AT91F_SPI_Disable (
	AT91PS_SPI pSPI // pointer to a SPI controller
	)
{
	//* Write to the CR register
	pSPI->SPI_CR = AT91C_SPI_SPIDIS;
}

//*----------------------------------------------------------------------------
//* \fn    AT91F_SPI_CfgMode
//* \brief Enable the SPI controller
//*----------------------------------------------------------------------------
static __inline void AT91F_SPI_CfgMode (
	AT91PS_SPI pSPI, // pointer to a SPI controller
	int mode)        // mode register 
{
  1017fc:	e1a0c00d 	mov	ip, sp
  101800:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  101804:	e24cb004 	sub	fp, ip, #4	; 0x4
  101808:	e24dd008 	sub	sp, sp, #8	; 0x8
  10180c:	e50b0010 	str	r0, [fp, #-16]
  101810:	e50b1014 	str	r1, [fp, #-20]
	//* Write to the MR register
	pSPI->SPI_MR = mode;
  101814:	e51b2014 	ldr	r2, [fp, #-20]
  101818:	e51b3010 	ldr	r3, [fp, #-16]
  10181c:	e5832004 	str	r2, [r3, #4]
}
  101820:	e24bd00c 	sub	sp, fp, #12	; 0xc
  101824:	e89da800 	ldmia	sp, {fp, sp, pc}

00101828 <AT91F_SPI_CfgCs>:
  101828:	e1a0c00d 	mov	ip, sp
  10182c:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  101830:	e24cb004 	sub	fp, ip, #4	; 0x4
  101834:	e24dd00c 	sub	sp, sp, #12	; 0xc
  101838:	e50b0010 	str	r0, [fp, #-16]
  10183c:	e50b1014 	str	r1, [fp, #-20]
  101840:	e50b2018 	str	r2, [fp, #-24]
  101844:	e51b3010 	ldr	r3, [fp, #-16]
  101848:	e2832030 	add	r2, r3, #48	; 0x30
  10184c:	e51b3014 	ldr	r3, [fp, #-20]
  101850:	e1a03103 	mov	r3, r3, lsl #2
  101854:	e0822003 	add	r2, r2, r3
  101858:	e51b3018 	ldr	r3, [fp, #-24]
  10185c:	e5823000 	str	r3, [r2]
  101860:	e24bd00c 	sub	sp, fp, #12	; 0xc
  101864:	e89da800 	ldmia	sp, {fp, sp, pc}

00101868 <vFdvPWM_init>:
	
}*/

void vFdvPWM_init( void )
{
  101868:	e1a0c00d 	mov	ip, sp
  10186c:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  101870:	e24cb004 	sub	fp, ip, #4	; 0x4
	// disable PIO from PWM0
	//AT91F_PIO_CfgPeriph(AT91C_BASE_PIOA,AT91C_PA23_PWM0,0);
	//AT91F_PWMC_CH0_CfgPIO();
	
	AT91C_BASE_PIOA->PIO_PDR=AT91C_PA23_PWM0;
  101874:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
  101878:	e1a039c3 	mov	r3, r3, asr #19
  10187c:	e3a02502 	mov	r2, #8388608	; 0x800000
  101880:	e5832004 	str	r2, [r3, #4]
	AT91C_BASE_PIOA->PIO_BSR=AT91C_PA23_PWM0;
  101884:	e3a0320a 	mov	r3, #-1610612736	; 0xa0000000
  101888:	e1a039c3 	mov	r3, r3, asr #19
  10188c:	e3a02502 	mov	r2, #8388608	; 0x800000
  101890:	e5832074 	str	r2, [r3, #116]
	// enable peripheral clock for PWM( PID Bit 10 )
	AT91F_PWMC_CfgPMC();
  101894:	eb00001e 	bl	101914 <AT91F_PWMC_CfgPMC>
	// Initially they're stopped
	AT91C_BASE_PWMC->PWMC_DIS =  AT91C_PWMC_CHID0;
  101898:	e3a03326 	mov	r3, #-1744830464	; 0x98000000
  10189c:	e1a036c3 	mov	r3, r3, asr #13
  1018a0:	e3a02001 	mov	r2, #1	; 0x1
  1018a4:	e5832008 	str	r2, [r3, #8]
	// Set the Clock A divider
	AT91C_BASE_PWMC->PWMC_MR = (( 4 << 8 ) | 0x08 );  // MCK selection or'ed with Divider
  1018a8:	e3a02326 	mov	r2, #-1744830464	; 0x98000000
  1018ac:	e1a026c2 	mov	r2, r2, asr #13
  1018b0:	e3a03b01 	mov	r3, #1024	; 0x400
  1018b4:	e2833008 	add	r3, r3, #8	; 0x8
  1018b8:	e5823000 	str	r3, [r2]
	//AT91C_BASE_PWMC->PWMC_MR = 0; //don't use clock A & B
	  // Set the Clock
	AT91C_BASE_PWMC->PWMC_CH[ 0 ].PWMC_CMR =AT91C_PWMC_CPRE_MCKA |AT91C_PWMC_CPOL;     //Divider Clock A | Channel Polarity Invert
  1018bc:	e3a02326 	mov	r2, #-1744830464	; 0x98000000
  1018c0:	e1a026c2 	mov	r2, r2, asr #13
  1018c4:	e3a03f82 	mov	r3, #520	; 0x208
  1018c8:	e2833003 	add	r3, r3, #3	; 0x3
  1018cc:	e5823200 	str	r3, [r2, #512]
	//AT91C_BASE_PWMC->PWMC_CH[ 0 ].PWMC_CMR = 0xa;     //Use MCK/1024
	//AT91C_BASE_PWMC->PWMC_CH[ 0 ].PWMC_CMR =0x8|AT91C_PWMC_CPOL;     //Divider Clock A | Channel Polarity Invert
    // Set the Period register (sample size bit fied )
	AT91C_BASE_PWMC->PWMC_CH[ 0 ].PWMC_CPRDR = 1024; //
  1018d0:	e3a03326 	mov	r3, #-1744830464	; 0x98000000
  1018d4:	e1a036c3 	mov	r3, r3, asr #13
  1018d8:	e3a02b01 	mov	r2, #1024	; 0x400
  1018dc:	e5832208 	str	r2, [r3, #520]
	// Set the duty cycle register (output value)
	AT91C_BASE_PWMC->PWMC_CH[ 0 ].PWMC_CDTYR = 512; //50%
  1018e0:	e3a03326 	mov	r3, #-1744830464	; 0x98000000
  1018e4:	e1a036c3 	mov	r3, r3, asr #13
  1018e8:	e3a02c02 	mov	r2, #512	; 0x200
  1018ec:	e5832204 	str	r2, [r3, #516]
	// Initialise the Update register write only
	AT91C_BASE_PWMC->PWMC_CH[ 0 ].PWMC_CUPDR = 512 ;
  1018f0:	e3a03326 	mov	r3, #-1744830464	; 0x98000000
  1018f4:	e1a036c3 	mov	r3, r3, asr #13
  1018f8:	e3a02c02 	mov	r2, #512	; 0x200
  1018fc:	e5832210 	str	r2, [r3, #528]
	//Enable PWM0
	AT91C_BASE_PWMC->PWMC_ENA =  AT91C_PWMC_CHID0;
  101900:	e3a03326 	mov	r3, #-1744830464	; 0x98000000
  101904:	e1a036c3 	mov	r3, r3, asr #13
  101908:	e3a02001 	mov	r2, #1	; 0x1
  10190c:	e5832004 	str	r2, [r3, #4]

}
  101910:	e89da800 	ldmia	sp, {fp, sp, pc}

00101914 <AT91F_PWMC_CfgPMC>:
//* \fn    AT91F_PWMC_CfgPMC
//* \brief Enable Peripheral clock in PMC for  PWMC
//*----------------------------------------------------------------------------
static __inline void AT91F_PWMC_CfgPMC (void)
{
  101914:	e1a0c00d 	mov	ip, sp
  101918:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  10191c:	e24cb004 	sub	fp, ip, #4	; 0x4
	AT91F_PMC_EnablePeriphClock(
  101920:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
  101924:	e1a00ac0 	mov	r0, r0, asr #21
  101928:	e3a01b01 	mov	r1, #1024	; 0x400
  10192c:	eb000000 	bl	101934 <AT91F_PMC_EnablePeriphClock>
		AT91C_BASE_PMC, // PIO controller base address
		((unsigned int) 1 << AT91C_ID_PWMC));
}
  101930:	e89da800 	ldmia	sp, {fp, sp, pc}

00101934 <AT91F_PMC_EnablePeriphClock>:
  101934:	e1a0c00d 	mov	ip, sp
  101938:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  10193c:	e24cb004 	sub	fp, ip, #4	; 0x4
  101940:	e24dd008 	sub	sp, sp, #8	; 0x8
  101944:	e50b0010 	str	r0, [fp, #-16]
  101948:	e50b1014 	str	r1, [fp, #-20]
  10194c:	e51b2010 	ldr	r2, [fp, #-16]
  101950:	e51b3014 	ldr	r3, [fp, #-20]
  101954:	e5823010 	str	r3, [r2, #16]
  101958:	e24bd00c 	sub	sp, fp, #12	; 0xc
  10195c:	e89da800 	ldmia	sp, {fp, sp, pc}

00101960 <vFdvManager_Init>:
#include "dvManager.h"
void vFdvUart0_init (void);
void vFdvManager_Init( void )
{
  101960:	e1a0c00d 	mov	ip, sp
  101964:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  101968:	e24cb004 	sub	fp, ip, #4	; 0x4
	
	vFdvTimer_init ();                            /* Initialize Timer */
  10196c:	ebfffebd 	bl	101468 <vFdvTimer_init>
	vFdvExtInt_init();                            /* Initialize External Interrupt */
  101970:	eb000001 	bl	10197c <vFdvExtInt_init>
	vFdvUart_init();                             /* Initialize Serial Interface */
  101974:	ebfffbe2 	bl	100904 <vFdvUart_init>
	
}
  101978:	e89da800 	ldmia	sp, {fp, sp, pc}

0010197c <vFdvExtInt_init>:
  ISR_RESTORE();
}


void vFdvExtInt_init(void) {                   /* Setup IRQ 0 Interrupt */
  10197c:	e1a0c00d 	mov	ip, sp
  101980:	e92dd800 	stmdb	sp!, {fp, ip, lr, pc}
  101984:	e24cb004 	sub	fp, ip, #4	; 0x4
  101988:	e24dd004 	sub	sp, sp, #4	; 0x4
  volatile AT91S_AIC * pAIC = AT91C_BASE_AIC;
  10198c:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
  101990:	e1a039c3 	mov	r3, r3, asr #19
  101994:	e50b3010 	str	r3, [fp, #-16]

  /* Setup IRQ0 Interrupt Mode and Vector with Priority 0 and Enable it */
  // mt: pAIC->AIC_SMR[AT91C_ID_IRQ0] = AT91C_AIC_SRCTYPE_INT_EDGE_TRIGGERED | 0;
  pAIC->AIC_SMR[AT91C_ID_IRQ0] = AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE | 0;
  101998:	e51b2010 	ldr	r2, [fp, #-16]
  10199c:	e3a03020 	mov	r3, #32	; 0x20
  1019a0:	e5823078 	str	r3, [r2, #120]
 
  pAIC->AIC_SVR[AT91C_ID_IRQ0] = (unsigned long) irq0_int;
  1019a4:	e59f3018 	ldr	r3, [pc, #24]	; 1019c4 <.text+0x19c4>
  1019a8:	e1a02003 	mov	r2, r3
  1019ac:	e51b3010 	ldr	r3, [fp, #-16]
  1019b0:	e58320f8 	str	r2, [r3, #248]
  pAIC->AIC_IECR = (1 << AT91C_ID_IRQ0);
  1019b4:	e51b2010 	ldr	r2, [fp, #-16]
  1019b8:	e3a03101 	mov	r3, #1073741824	; 0x40000000
  1019bc:	e5823120 	str	r3, [r2, #288]
}
  1019c0:	e89da808 	ldmia	sp, {r3, fp, sp, pc}
  1019c4:	00200a20 	eoreq	r0, r0, r0, lsr #20

001019c8 <vFappTest_init>:

void vFappTest_init( void )
{

}
  1019c8:	e12fff1e 	bx	lr

001019cc <vFappTest>:

void vFappTest( void )
{

}
  1019cc:	e12fff1e 	bx	lr

001019d0 <vFPrintString>:
  1019d0:	e92d4010 	stmdb	sp!, {r4, lr}
  1019d4:	e1a04000 	mov	r4, r0
  1019d8:	eb000402 	bl	1029e8 <strlen>
  1019dc:	e1a01000 	mov	r1, r0
  1019e0:	e1a00004 	mov	r0, r4
  1019e4:	ebfffad3 	bl	100538 <cFlibUart_SendBuff>
  1019e8:	e8bd8010 	ldmia	sp!, {r4, pc}

001019ec <vFappManager_Main>:
	//vFappIpStack_Init();
}

void vFappManager_Main( void)
{
  1019ec:	e52de004 	str	lr, [sp, #-4]!
	vFappTest();
  1019f0:	ebfffff5 	bl	1019cc <vFappTest>
	//vFappIpStack();
}
  1019f4:	e49df004 	ldr	pc, [sp], #4

001019f8 <vFappManager_Init>:
  1019f8:	e52de004 	str	lr, [sp, #-4]!
  1019fc:	ebfffff1 	bl	1019c8 <vFappTest_init>
  101a00:	e49df004 	ldr	pc, [sp], #4

00101a04 <__aeabi_uidiv>:
  101a04:	e2512001 	subs	r2, r1, #1	; 0x1
  101a08:	012fff1e 	bxeq	lr
  101a0c:	3a000036 	bcc	101aec <__aeabi_uidiv+0xe8>
  101a10:	e1500001 	cmp	r0, r1
  101a14:	9a000022 	bls	101aa4 <__aeabi_uidiv+0xa0>
  101a18:	e1110002 	tst	r1, r2
  101a1c:	0a000023 	beq	101ab0 <__aeabi_uidiv+0xac>
  101a20:	e311020e 	tst	r1, #-536870912	; 0xe0000000
  101a24:	01a01181 	moveq	r1, r1, lsl #3
  101a28:	03a03008 	moveq	r3, #8	; 0x8
  101a2c:	13a03001 	movne	r3, #1	; 0x1
  101a30:	e3510201 	cmp	r1, #268435456	; 0x10000000
  101a34:	31510000 	cmpcc	r1, r0
  101a38:	31a01201 	movcc	r1, r1, lsl #4
  101a3c:	31a03203 	movcc	r3, r3, lsl #4
  101a40:	3afffffa 	bcc	101a30 <__aeabi_uidiv+0x2c>
  101a44:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
  101a48:	31510000 	cmpcc	r1, r0
  101a4c:	31a01081 	movcc	r1, r1, lsl #1
  101a50:	31a03083 	movcc	r3, r3, lsl #1
  101a54:	3afffffa 	bcc	101a44 <__aeabi_uidiv+0x40>
  101a58:	e3a02000 	mov	r2, #0	; 0x0
  101a5c:	e1500001 	cmp	r0, r1
  101a60:	20400001 	subcs	r0, r0, r1
  101a64:	21822003 	orrcs	r2, r2, r3
  101a68:	e15000a1 	cmp	r0, r1, lsr #1
  101a6c:	204000a1 	subcs	r0, r0, r1, lsr #1
  101a70:	218220a3 	orrcs	r2, r2, r3, lsr #1
  101a74:	e1500121 	cmp	r0, r1, lsr #2
  101a78:	20400121 	subcs	r0, r0, r1, lsr #2
  101a7c:	21822123 	orrcs	r2, r2, r3, lsr #2
  101a80:	e15001a1 	cmp	r0, r1, lsr #3
  101a84:	204001a1 	subcs	r0, r0, r1, lsr #3
  101a88:	218221a3 	orrcs	r2, r2, r3, lsr #3
  101a8c:	e3500000 	cmp	r0, #0	; 0x0
  101a90:	11b03223 	movnes	r3, r3, lsr #4
  101a94:	11a01221 	movne	r1, r1, lsr #4
  101a98:	1affffef 	bne	101a5c <__aeabi_uidiv+0x58>
  101a9c:	e1a00002 	mov	r0, r2
  101aa0:	e12fff1e 	bx	lr
  101aa4:	03a00001 	moveq	r0, #1	; 0x1
  101aa8:	13a00000 	movne	r0, #0	; 0x0
  101aac:	e12fff1e 	bx	lr
  101ab0:	e3510801 	cmp	r1, #65536	; 0x10000
  101ab4:	21a01821 	movcs	r1, r1, lsr #16
  101ab8:	23a02010 	movcs	r2, #16	; 0x10
  101abc:	33a02000 	movcc	r2, #0	; 0x0
  101ac0:	e3510c01 	cmp	r1, #256	; 0x100
  101ac4:	21a01421 	movcs	r1, r1, lsr #8
  101ac8:	22822008 	addcs	r2, r2, #8	; 0x8
  101acc:	e3510010 	cmp	r1, #16	; 0x10
  101ad0:	21a01221 	movcs	r1, r1, lsr #4
  101ad4:	22822004 	addcs	r2, r2, #4	; 0x4
  101ad8:	e3510004 	cmp	r1, #4	; 0x4
  101adc:	82822003 	addhi	r2, r2, #3	; 0x3
  101ae0:	908220a1 	addls	r2, r2, r1, lsr #1
  101ae4:	e1a00230 	mov	r0, r0, lsr r2
  101ae8:	e12fff1e 	bx	lr
  101aec:	e52de008 	str	lr, [sp, #-8]!
  101af0:	eb000007 	bl	101b14 <__aeabi_idiv0>
  101af4:	e3a00000 	mov	r0, #0	; 0x0
  101af8:	e49df008 	ldr	pc, [sp], #8

00101afc <__aeabi_uidivmod>:
  101afc:	e92d4003 	stmdb	sp!, {r0, r1, lr}
  101b00:	ebffffbf 	bl	101a04 <__aeabi_uidiv>
  101b04:	e8bd4006 	ldmia	sp!, {r1, r2, lr}
  101b08:	e0030092 	mul	r3, r2, r0
  101b0c:	e0411003 	sub	r1, r1, r3
  101b10:	e12fff1e 	bx	lr

00101b14 <__aeabi_idiv0>:
  101b14:	e12fff1e 	bx	lr

00101b18 <atexit>:
  101b18:	e1a01000 	mov	r1, r0
  101b1c:	e3a00000 	mov	r0, #0	; 0x0
  101b20:	e1a02000 	mov	r2, r0
  101b24:	e1a03000 	mov	r3, r0
  101b28:	ea000594 	b	103180 <__register_exitproc>

00101b2c <exit>:
  101b2c:	e3a01000 	mov	r1, #0	; 0x0
  101b30:	e1a04000 	mov	r4, r0
  101b34:	eb0005c9 	bl	103260 <__call_exitprocs>
  101b38:	e59f3018 	ldr	r3, [pc, #24]	; 101b58 <.text+0x1b58>
  101b3c:	e5930000 	ldr	r0, [r3]
  101b40:	e590203c 	ldr	r2, [r0, #60]
  101b44:	e3520000 	cmp	r2, #0	; 0x0
  101b48:	11a0e00f 	movne	lr, pc
  101b4c:	112fff12 	bxne	r2
  101b50:	e1a00004 	mov	r0, r4
  101b54:	eb000581 	bl	103160 <_exit>
  101b58:	00103f44 	andeqs	r3, r0, r4, asr #30

00101b5c <free>:
  101b5c:	e59f3008 	ldr	r3, [pc, #8]	; 101b6c <.text+0x1b6c>
  101b60:	e1a01000 	mov	r1, r0
  101b64:	e5930000 	ldr	r0, [r3]
  101b68:	ea0006eb 	b	10371c <_free_r>
  101b6c:	00200184 	eoreq	r0, r0, r4, lsl #3

00101b70 <malloc>:
  101b70:	e59f3008 	ldr	r3, [pc, #8]	; 101b80 <.text+0x1b80>
  101b74:	e1a01000 	mov	r1, r0
  101b78:	e5930000 	ldr	r0, [r3]
  101b7c:	ea000000 	b	101b84 <_malloc_r>
  101b80:	00200184 	eoreq	r0, r0, r4, lsl #3

00101b84 <_malloc_r>:
  101b84:	e281300b 	add	r3, r1, #11	; 0xb
  101b88:	e3530016 	cmp	r3, #22	; 0x16
  101b8c:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  101b90:	83c35007 	bichi	r5, r3, #7	; 0x7
  101b94:	93a05010 	movls	r5, #16	; 0x10
  101b98:	93a03000 	movls	r3, #0	; 0x0
  101b9c:	81a03fa5 	movhi	r3, r5, lsr #31
  101ba0:	e1550001 	cmp	r5, r1
  101ba4:	33833001 	orrcc	r3, r3, #1	; 0x1
  101ba8:	e3530000 	cmp	r3, #0	; 0x0
  101bac:	e1a07000 	mov	r7, r0
  101bb0:	13a0300c 	movne	r3, #12	; 0xc
  101bb4:	e24dd004 	sub	sp, sp, #4	; 0x4
  101bb8:	13a00000 	movne	r0, #0	; 0x0
  101bbc:	15873000 	strne	r3, [r7]
  101bc0:	1a000017 	bne	101c24 <_malloc_r+0xa0>
  101bc4:	e1a00007 	mov	r0, r7
  101bc8:	eb0001ef 	bl	10238c <__malloc_lock>
  101bcc:	e3550f7e 	cmp	r5, #504	; 0x1f8
  101bd0:	2a000015 	bcs	101c2c <_malloc_r+0xa8>
  101bd4:	e59f86fc 	ldr	r8, [pc, #1788]	; 1022d8 <.text+0x22d8>
  101bd8:	e1a021a5 	mov	r2, r5, lsr #3
  101bdc:	e0883182 	add	r3, r8, r2, lsl #3
  101be0:	e593400c 	ldr	r4, [r3, #12]
  101be4:	e1530004 	cmp	r3, r4
  101be8:	e1a0a008 	mov	sl, r8
  101bec:	0a0000cd 	beq	101f28 <_malloc_r+0x3a4>
  101bf0:	e5943004 	ldr	r3, [r4, #4]
  101bf4:	e3c33003 	bic	r3, r3, #3	; 0x3
  101bf8:	e0843003 	add	r3, r4, r3
  101bfc:	e5932004 	ldr	r2, [r3, #4]
  101c00:	e594000c 	ldr	r0, [r4, #12]
  101c04:	e5941008 	ldr	r1, [r4, #8]
  101c08:	e3822001 	orr	r2, r2, #1	; 0x1
  101c0c:	e5801008 	str	r1, [r0, #8]
  101c10:	e581000c 	str	r0, [r1, #12]
  101c14:	e5832004 	str	r2, [r3, #4]
  101c18:	e1a00007 	mov	r0, r7
  101c1c:	eb0001db 	bl	102390 <__malloc_unlock>
  101c20:	e2840008 	add	r0, r4, #8	; 0x8
  101c24:	e28dd004 	add	sp, sp, #4	; 0x4
  101c28:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  101c2c:	e1b024a5 	movs	r2, r5, lsr #9
  101c30:	01a001a5 	moveq	r0, r5, lsr #3
  101c34:	01a03180 	moveq	r3, r0, lsl #3
  101c38:	1a000027 	bne	101cdc <_malloc_r+0x158>
  101c3c:	e59f8694 	ldr	r8, [pc, #1684]	; 1022d8 <.text+0x22d8>
  101c40:	e0831008 	add	r1, r3, r8
  101c44:	e591400c 	ldr	r4, [r1, #12]
  101c48:	e1510004 	cmp	r1, r4
  101c4c:	e1a0a008 	mov	sl, r8
  101c50:	1a000005 	bne	101c6c <_malloc_r+0xe8>
  101c54:	ea00000a 	b	101c84 <_malloc_r+0x100>
  101c58:	e3520000 	cmp	r2, #0	; 0x0
  101c5c:	aa000047 	bge	101d80 <_malloc_r+0x1fc>
  101c60:	e594400c 	ldr	r4, [r4, #12]
  101c64:	e1510004 	cmp	r1, r4
  101c68:	0a000005 	beq	101c84 <_malloc_r+0x100>
  101c6c:	e5943004 	ldr	r3, [r4, #4]
  101c70:	e3c33003 	bic	r3, r3, #3	; 0x3
  101c74:	e0652003 	rsb	r2, r5, r3
  101c78:	e352000f 	cmp	r2, #15	; 0xf
  101c7c:	dafffff5 	ble	101c58 <_malloc_r+0xd4>
  101c80:	e2400001 	sub	r0, r0, #1	; 0x1
  101c84:	e280e001 	add	lr, r0, #1	; 0x1
  101c88:	e59f664c 	ldr	r6, [pc, #1612]	; 1022dc <.text+0x22dc>
  101c8c:	e5964008 	ldr	r4, [r6, #8]
  101c90:	e1560004 	cmp	r6, r4
  101c94:	0a000076 	beq	101e74 <_malloc_r+0x2f0>
  101c98:	e5943004 	ldr	r3, [r4, #4]
  101c9c:	e3c32003 	bic	r2, r3, #3	; 0x3
  101ca0:	e0650002 	rsb	r0, r5, r2
  101ca4:	e350000f 	cmp	r0, #15	; 0xf
  101ca8:	ca000027 	bgt	101d4c <_malloc_r+0x1c8>
  101cac:	e3500000 	cmp	r0, #0	; 0x0
  101cb0:	e586600c 	str	r6, [r6, #12]
  101cb4:	e5866008 	str	r6, [r6, #8]
  101cb8:	ba00003c 	blt	101db0 <_malloc_r+0x22c>
  101cbc:	e0842002 	add	r2, r4, r2
  101cc0:	e5923004 	ldr	r3, [r2, #4]
  101cc4:	e3833001 	orr	r3, r3, #1	; 0x1
  101cc8:	e1a00007 	mov	r0, r7
  101ccc:	e5823004 	str	r3, [r2, #4]
  101cd0:	eb0001ae 	bl	102390 <__malloc_unlock>
  101cd4:	e2840008 	add	r0, r4, #8	; 0x8
  101cd8:	eaffffd1 	b	101c24 <_malloc_r+0xa0>
  101cdc:	e3520004 	cmp	r2, #4	; 0x4
  101ce0:	91a03325 	movls	r3, r5, lsr #6
  101ce4:	92830038 	addls	r0, r3, #56	; 0x38
  101ce8:	91a03180 	movls	r3, r0, lsl #3
  101cec:	9affffd2 	bls	101c3c <_malloc_r+0xb8>
  101cf0:	e3520014 	cmp	r2, #20	; 0x14
  101cf4:	9282005b 	addls	r0, r2, #91	; 0x5b
  101cf8:	91a03180 	movls	r3, r0, lsl #3
  101cfc:	9affffce 	bls	101c3c <_malloc_r+0xb8>
  101d00:	e3520054 	cmp	r2, #84	; 0x54
  101d04:	91a03625 	movls	r3, r5, lsr #12
  101d08:	9283006e 	addls	r0, r3, #110	; 0x6e
  101d0c:	91a03180 	movls	r3, r0, lsl #3
  101d10:	9affffc9 	bls	101c3c <_malloc_r+0xb8>
  101d14:	e3520f55 	cmp	r2, #340	; 0x154
  101d18:	91a037a5 	movls	r3, r5, lsr #15
  101d1c:	92830077 	addls	r0, r3, #119	; 0x77
  101d20:	91a03180 	movls	r3, r0, lsl #3
  101d24:	9affffc4 	bls	101c3c <_malloc_r+0xb8>
  101d28:	e3a03e55 	mov	r3, #1360	; 0x550
  101d2c:	e2833004 	add	r3, r3, #4	; 0x4
  101d30:	e1520003 	cmp	r2, r3
  101d34:	91a03925 	movls	r3, r5, lsr #18
  101d38:	9283007c 	addls	r0, r3, #124	; 0x7c
  101d3c:	83a0007e 	movhi	r0, #126	; 0x7e
  101d40:	82433f59 	subhi	r3, r3, #356	; 0x164
  101d44:	91a03180 	movls	r3, r0, lsl #3
  101d48:	eaffffbb 	b	101c3c <_malloc_r+0xb8>
  101d4c:	e0842005 	add	r2, r4, r5
  101d50:	e3801001 	orr	r1, r0, #1	; 0x1
  101d54:	e3853001 	orr	r3, r5, #1	; 0x1
  101d58:	e7820000 	str	r0, [r2, r0]
  101d5c:	e5843004 	str	r3, [r4, #4]
  101d60:	e586200c 	str	r2, [r6, #12]
  101d64:	e5862008 	str	r2, [r6, #8]
  101d68:	e1a00007 	mov	r0, r7
  101d6c:	e9820042 	stmib	r2, {r1, r6}
  101d70:	e582600c 	str	r6, [r2, #12]
  101d74:	eb000185 	bl	102390 <__malloc_unlock>
  101d78:	e2840008 	add	r0, r4, #8	; 0x8
  101d7c:	eaffffa8 	b	101c24 <_malloc_r+0xa0>
  101d80:	e0840003 	add	r0, r4, r3
  101d84:	e5903004 	ldr	r3, [r0, #4]
  101d88:	e594100c 	ldr	r1, [r4, #12]
  101d8c:	e5942008 	ldr	r2, [r4, #8]
  101d90:	e3833001 	orr	r3, r3, #1	; 0x1
  101d94:	e5803004 	str	r3, [r0, #4]
  101d98:	e5812008 	str	r2, [r1, #8]
  101d9c:	e1a00007 	mov	r0, r7
  101da0:	e582100c 	str	r1, [r2, #12]
  101da4:	eb000179 	bl	102390 <__malloc_unlock>
  101da8:	e2840008 	add	r0, r4, #8	; 0x8
  101dac:	eaffff9c 	b	101c24 <_malloc_r+0xa0>
  101db0:	e3520c02 	cmp	r2, #512	; 0x200
  101db4:	3a0000a0 	bcc	10203c <_malloc_r+0x4b8>
  101db8:	e1b014a2 	movs	r1, r2, lsr #9
  101dbc:	01a011a2 	moveq	r1, r2, lsr #3
  101dc0:	01a03181 	moveq	r3, r1, lsl #3
  101dc4:	0a00001a 	beq	101e34 <_malloc_r+0x2b0>
  101dc8:	e3510004 	cmp	r1, #4	; 0x4
  101dcc:	91a03322 	movls	r3, r2, lsr #6
  101dd0:	92831038 	addls	r1, r3, #56	; 0x38
  101dd4:	91a03181 	movls	r3, r1, lsl #3
  101dd8:	9a000015 	bls	101e34 <_malloc_r+0x2b0>
  101ddc:	e3510014 	cmp	r1, #20	; 0x14
  101de0:	9281105b 	addls	r1, r1, #91	; 0x5b
  101de4:	91a03181 	movls	r3, r1, lsl #3
  101de8:	9a000011 	bls	101e34 <_malloc_r+0x2b0>
  101dec:	e3510054 	cmp	r1, #84	; 0x54
  101df0:	91a03622 	movls	r3, r2, lsr #12
  101df4:	9283106e 	addls	r1, r3, #110	; 0x6e
  101df8:	91a03181 	movls	r3, r1, lsl #3
  101dfc:	9a00000c 	bls	101e34 <_malloc_r+0x2b0>
  101e00:	e3510f55 	cmp	r1, #340	; 0x154
  101e04:	91a037a2 	movls	r3, r2, lsr #15
  101e08:	92831077 	addls	r1, r3, #119	; 0x77
  101e0c:	91a03181 	movls	r3, r1, lsl #3
  101e10:	9a000007 	bls	101e34 <_malloc_r+0x2b0>
  101e14:	e3a03e55 	mov	r3, #1360	; 0x550
  101e18:	e2833004 	add	r3, r3, #4	; 0x4
  101e1c:	e1510003 	cmp	r1, r3
  101e20:	91a03922 	movls	r3, r2, lsr #18
  101e24:	9283107c 	addls	r1, r3, #124	; 0x7c
  101e28:	83a0107e 	movhi	r1, #126	; 0x7e
  101e2c:	82433f59 	subhi	r3, r3, #356	; 0x164
  101e30:	91a03181 	movls	r3, r1, lsl #3
  101e34:	e088c003 	add	ip, r8, r3
  101e38:	e59c0008 	ldr	r0, [ip, #8]
  101e3c:	e15c0000 	cmp	ip, r0
  101e40:	0a0000eb 	beq	1021f4 <_malloc_r+0x670>
  101e44:	e5903004 	ldr	r3, [r0, #4]
  101e48:	e3c33003 	bic	r3, r3, #3	; 0x3
  101e4c:	e1520003 	cmp	r2, r3
  101e50:	2a000002 	bcs	101e60 <_malloc_r+0x2dc>
  101e54:	e5900008 	ldr	r0, [r0, #8]
  101e58:	e15c0000 	cmp	ip, r0
  101e5c:	1afffff8 	bne	101e44 <_malloc_r+0x2c0>
  101e60:	e590c00c 	ldr	ip, [r0, #12]
  101e64:	e584c00c 	str	ip, [r4, #12]
  101e68:	e5840008 	str	r0, [r4, #8]
  101e6c:	e580400c 	str	r4, [r0, #12]
  101e70:	e58c4008 	str	r4, [ip, #8]
  101e74:	e59a0004 	ldr	r0, [sl, #4]
  101e78:	e35e0000 	cmp	lr, #0	; 0x0
  101e7c:	e28e3003 	add	r3, lr, #3	; 0x3
  101e80:	a1a0300e 	movge	r3, lr
  101e84:	e1a03143 	mov	r3, r3, asr #2
  101e88:	e3a02001 	mov	r2, #1	; 0x1
  101e8c:	e1a02312 	mov	r2, r2, lsl r3
  101e90:	e1520000 	cmp	r2, r0
  101e94:	8a000029 	bhi	101f40 <_malloc_r+0x3bc>
  101e98:	e1120000 	tst	r2, r0
  101e9c:	0a000073 	beq	102070 <_malloc_r+0x4ec>
  101ea0:	e088918e 	add	r9, r8, lr, lsl #3
  101ea4:	e1a0a00e 	mov	sl, lr
  101ea8:	e1a01009 	mov	r1, r9
  101eac:	e591400c 	ldr	r4, [r1, #12]
  101eb0:	e1510004 	cmp	r1, r4
  101eb4:	1a000005 	bne	101ed0 <_malloc_r+0x34c>
  101eb8:	ea000076 	b	102098 <_malloc_r+0x514>
  101ebc:	e35c0000 	cmp	ip, #0	; 0x0
  101ec0:	aa000079 	bge	1020ac <_malloc_r+0x528>
  101ec4:	e594400c 	ldr	r4, [r4, #12]
  101ec8:	e1510004 	cmp	r1, r4
  101ecc:	0a000071 	beq	102098 <_malloc_r+0x514>
  101ed0:	e5943004 	ldr	r3, [r4, #4]
  101ed4:	e3c33003 	bic	r3, r3, #3	; 0x3
  101ed8:	e065c003 	rsb	ip, r5, r3
  101edc:	e35c000f 	cmp	ip, #15	; 0xf
  101ee0:	dafffff5 	ble	101ebc <_malloc_r+0x338>
  101ee4:	e3853001 	orr	r3, r5, #1	; 0x1
  101ee8:	e0842005 	add	r2, r4, r5
  101eec:	e594000c 	ldr	r0, [r4, #12]
  101ef0:	e5843004 	str	r3, [r4, #4]
  101ef4:	e5b41008 	ldr	r1, [r4, #8]!
  101ef8:	e38c3001 	orr	r3, ip, #1	; 0x1
  101efc:	e5801008 	str	r1, [r0, #8]
  101f00:	e581000c 	str	r0, [r1, #12]
  101f04:	e5862008 	str	r2, [r6, #8]
  101f08:	e586200c 	str	r2, [r6, #12]
  101f0c:	e1a00007 	mov	r0, r7
  101f10:	e782c00c 	str	ip, [r2, ip]
  101f14:	e9820048 	stmib	r2, {r3, r6}
  101f18:	e582600c 	str	r6, [r2, #12]
  101f1c:	eb00011b 	bl	102390 <__malloc_unlock>
  101f20:	e1a00004 	mov	r0, r4
  101f24:	eaffff3e 	b	101c24 <_malloc_r+0xa0>
  101f28:	e2843008 	add	r3, r4, #8	; 0x8
  101f2c:	e593400c 	ldr	r4, [r3, #12]
  101f30:	e1530004 	cmp	r3, r4
  101f34:	1affff2d 	bne	101bf0 <_malloc_r+0x6c>
  101f38:	e282e002 	add	lr, r2, #2	; 0x2
  101f3c:	eaffff51 	b	101c88 <_malloc_r+0x104>
  101f40:	e59f2390 	ldr	r2, [pc, #912]	; 1022d8 <.text+0x22d8>
  101f44:	e5924008 	ldr	r4, [r2, #8]
  101f48:	e5943004 	ldr	r3, [r4, #4]
  101f4c:	e3c38003 	bic	r8, r3, #3	; 0x3
  101f50:	e0650008 	rsb	r0, r5, r8
  101f54:	e350000f 	cmp	r0, #15	; 0xf
  101f58:	c3a03000 	movgt	r3, #0	; 0x0
  101f5c:	d3a03001 	movle	r3, #1	; 0x1
  101f60:	e1550008 	cmp	r5, r8
  101f64:	83833001 	orrhi	r3, r3, #1	; 0x1
  101f68:	e3530000 	cmp	r3, #0	; 0x0
  101f6c:	e1a09004 	mov	r9, r4
  101f70:	0a000026 	beq	102010 <_malloc_r+0x48c>
  101f74:	e59f3364 	ldr	r3, [pc, #868]	; 1022e0 <.text+0x22e0>
  101f78:	e59fb364 	ldr	fp, [pc, #868]	; 1022e4 <.text+0x22e4>
  101f7c:	e5932000 	ldr	r2, [r3]
  101f80:	e59b1000 	ldr	r1, [fp]
  101f84:	e2822010 	add	r2, r2, #16	; 0x10
  101f88:	e3710001 	cmn	r1, #1	; 0x1
  101f8c:	e0856002 	add	r6, r5, r2
  101f90:	12863eff 	addne	r3, r6, #4080	; 0xff0
  101f94:	1283300f 	addne	r3, r3, #15	; 0xf
  101f98:	13c36eff 	bicne	r6, r3, #4080	; 0xff0
  101f9c:	13c6600f 	bicne	r6, r6, #15	; 0xf
  101fa0:	e1a00007 	mov	r0, r7
  101fa4:	e1a01006 	mov	r1, r6
  101fa8:	ebfff914 	bl	100400 <_sbrk_r>
  101fac:	e3700001 	cmn	r0, #1	; 0x1
  101fb0:	0a00008c 	beq	1021e8 <_malloc_r+0x664>
  101fb4:	e0841008 	add	r1, r4, r8
  101fb8:	e1510000 	cmp	r1, r0
  101fbc:	e1a0a000 	mov	sl, r0
  101fc0:	9a000045 	bls	1020dc <_malloc_r+0x558>
  101fc4:	e59f330c 	ldr	r3, [pc, #780]	; 1022d8 <.text+0x22d8>
  101fc8:	e1540003 	cmp	r4, r3
  101fcc:	0a0000a5 	beq	102268 <_malloc_r+0x6e4>
  101fd0:	e59f3300 	ldr	r3, [pc, #768]	; 1022d8 <.text+0x22d8>
  101fd4:	e5934008 	ldr	r4, [r3, #8]
  101fd8:	e5942004 	ldr	r2, [r4, #4]
  101fdc:	e3c22003 	bic	r2, r2, #3	; 0x3
  101fe0:	e0650002 	rsb	r0, r5, r2
  101fe4:	e350000f 	cmp	r0, #15	; 0xf
  101fe8:	c3a03000 	movgt	r3, #0	; 0x0
  101fec:	d3a03001 	movle	r3, #1	; 0x1
  101ff0:	e1550002 	cmp	r5, r2
  101ff4:	83833001 	orrhi	r3, r3, #1	; 0x1
  101ff8:	e3530000 	cmp	r3, #0	; 0x0
  101ffc:	0a000003 	beq	102010 <_malloc_r+0x48c>
  102000:	e1a00007 	mov	r0, r7
  102004:	eb0000e1 	bl	102390 <__malloc_unlock>
  102008:	e3a00000 	mov	r0, #0	; 0x0
  10200c:	eaffff04 	b	101c24 <_malloc_r+0xa0>
  102010:	e0841005 	add	r1, r4, r5
  102014:	e3802001 	orr	r2, r0, #1	; 0x1
  102018:	e3853001 	orr	r3, r5, #1	; 0x1
  10201c:	e5843004 	str	r3, [r4, #4]
  102020:	e5812004 	str	r2, [r1, #4]
  102024:	e59f22ac 	ldr	r2, [pc, #684]	; 1022d8 <.text+0x22d8>
  102028:	e1a00007 	mov	r0, r7
  10202c:	e5821008 	str	r1, [r2, #8]
  102030:	eb0000d6 	bl	102390 <__malloc_unlock>
  102034:	e2840008 	add	r0, r4, #8	; 0x8
  102038:	eafffef9 	b	101c24 <_malloc_r+0xa0>
  10203c:	e1a021a2 	mov	r2, r2, lsr #3
  102040:	e59a0004 	ldr	r0, [sl, #4]
  102044:	e1a01122 	mov	r1, r2, lsr #2
  102048:	e3a03001 	mov	r3, #1	; 0x1
  10204c:	e1800113 	orr	r0, r0, r3, lsl r1
  102050:	e0882182 	add	r2, r8, r2, lsl #3
  102054:	e5923008 	ldr	r3, [r2, #8]
  102058:	e584200c 	str	r2, [r4, #12]
  10205c:	e5843008 	str	r3, [r4, #8]
  102060:	e58a0004 	str	r0, [sl, #4]
  102064:	e583400c 	str	r4, [r3, #12]
  102068:	e5824008 	str	r4, [r2, #8]
  10206c:	eaffff81 	b	101e78 <_malloc_r+0x2f4>
  102070:	e1a02082 	mov	r2, r2, lsl #1
  102074:	e3ce3003 	bic	r3, lr, #3	; 0x3
  102078:	e1100002 	tst	r0, r2
  10207c:	e283e004 	add	lr, r3, #4	; 0x4
  102080:	1affff86 	bne	101ea0 <_malloc_r+0x31c>
  102084:	e1a02082 	mov	r2, r2, lsl #1
  102088:	e1100002 	tst	r0, r2
  10208c:	e28ee004 	add	lr, lr, #4	; 0x4
  102090:	0afffffb 	beq	102084 <_malloc_r+0x500>
  102094:	eaffff81 	b	101ea0 <_malloc_r+0x31c>
  102098:	e28aa001 	add	sl, sl, #1	; 0x1
  10209c:	e31a0003 	tst	sl, #3	; 0x3
  1020a0:	0a000059 	beq	10220c <_malloc_r+0x688>
  1020a4:	e2811008 	add	r1, r1, #8	; 0x8
  1020a8:	eaffff7f 	b	101eac <_malloc_r+0x328>
  1020ac:	e0841003 	add	r1, r4, r3
  1020b0:	e5913004 	ldr	r3, [r1, #4]
  1020b4:	e594000c 	ldr	r0, [r4, #12]
  1020b8:	e5b42008 	ldr	r2, [r4, #8]!
  1020bc:	e3833001 	orr	r3, r3, #1	; 0x1
  1020c0:	e5802008 	str	r2, [r0, #8]
  1020c4:	e582000c 	str	r0, [r2, #12]
  1020c8:	e5813004 	str	r3, [r1, #4]
  1020cc:	e1a00007 	mov	r0, r7
  1020d0:	eb0000ae 	bl	102390 <__malloc_unlock>
  1020d4:	e1a00004 	mov	r0, r4
  1020d8:	eafffed1 	b	101c24 <_malloc_r+0xa0>
  1020dc:	e59fc204 	ldr	ip, [pc, #516]	; 1022e8 <.text+0x22e8>
  1020e0:	e59c3000 	ldr	r3, [ip]
  1020e4:	e0862003 	add	r2, r6, r3
  1020e8:	e58c2000 	str	r2, [ip]
  1020ec:	0a000062 	beq	10227c <_malloc_r+0x6f8>
  1020f0:	e59b3000 	ldr	r3, [fp]
  1020f4:	e3730001 	cmn	r3, #1	; 0x1
  1020f8:	10613000 	rsbne	r3, r1, r0
  1020fc:	059f31e0 	ldreq	r3, [pc, #480]	; 1022e4 <.text+0x22e4>
  102100:	10823003 	addne	r3, r2, r3
  102104:	05830000 	streq	r0, [r3]
  102108:	158c3000 	strne	r3, [ip]
  10210c:	e2103007 	ands	r3, r0, #7	; 0x7
  102110:	12631008 	rsbne	r1, r3, #8	; 0x8
  102114:	1080a001 	addne	sl, r0, r1
  102118:	01a01003 	moveq	r1, r3
  10211c:	e08a3006 	add	r3, sl, r6
  102120:	e1a03a03 	mov	r3, r3, lsl #20
  102124:	e1a03a23 	mov	r3, r3, lsr #20
  102128:	e2633a01 	rsb	r3, r3, #4096	; 0x1000
  10212c:	e0814003 	add	r4, r1, r3
  102130:	e1a01004 	mov	r1, r4
  102134:	e1a00007 	mov	r0, r7
  102138:	e58dc000 	str	ip, [sp]
  10213c:	ebfff8af 	bl	100400 <_sbrk_r>
  102140:	e3700001 	cmn	r0, #1	; 0x1
  102144:	106a3000 	rsbne	r3, sl, r0
  102148:	e59dc000 	ldr	ip, [sp]
  10214c:	10833004 	addne	r3, r3, r4
  102150:	13830001 	orrne	r0, r3, #1	; 0x1
  102154:	e59f217c 	ldr	r2, [pc, #380]	; 1022d8 <.text+0x22d8>
  102158:	e59c3000 	ldr	r3, [ip]
  10215c:	03a04000 	moveq	r4, #0	; 0x0
  102160:	02800002 	addeq	r0, r0, #2	; 0x2
  102164:	e0843003 	add	r3, r4, r3
  102168:	e1590002 	cmp	r9, r2
  10216c:	e1a0400a 	mov	r4, sl
  102170:	e58c3000 	str	r3, [ip]
  102174:	e58a0004 	str	r0, [sl, #4]
  102178:	e582a008 	str	sl, [r2, #8]
  10217c:	0a00000f 	beq	1021c0 <_malloc_r+0x63c>
  102180:	e358000f 	cmp	r8, #15	; 0xf
  102184:	93a03001 	movls	r3, #1	; 0x1
  102188:	958a3004 	strls	r3, [sl, #4]
  10218c:	9affff91 	bls	101fd8 <_malloc_r+0x454>
  102190:	e5993004 	ldr	r3, [r9, #4]
  102194:	e248200c 	sub	r2, r8, #12	; 0xc
  102198:	e3c22007 	bic	r2, r2, #7	; 0x7
  10219c:	e2033001 	and	r3, r3, #1	; 0x1
  1021a0:	e1823003 	orr	r3, r2, r3
  1021a4:	e3a01005 	mov	r1, #5	; 0x5
  1021a8:	e352000f 	cmp	r2, #15	; 0xf
  1021ac:	e0892002 	add	r2, r9, r2
  1021b0:	e5893004 	str	r3, [r9, #4]
  1021b4:	e5821008 	str	r1, [r2, #8]
  1021b8:	e5821004 	str	r1, [r2, #4]
  1021bc:	8a000038 	bhi	1022a4 <_malloc_r+0x720>
  1021c0:	e59f1124 	ldr	r1, [pc, #292]	; 1022ec <.text+0x22ec>
  1021c4:	e59c2000 	ldr	r2, [ip]
  1021c8:	e5913000 	ldr	r3, [r1]
  1021cc:	e1520003 	cmp	r2, r3
  1021d0:	85812000 	strhi	r2, [r1]
  1021d4:	e59f1114 	ldr	r1, [pc, #276]	; 1022f0 <.text+0x22f0>
  1021d8:	e5913000 	ldr	r3, [r1]
  1021dc:	e1520003 	cmp	r2, r3
  1021e0:	85812000 	strhi	r2, [r1]
  1021e4:	eaffff7b 	b	101fd8 <_malloc_r+0x454>
  1021e8:	e59f20e8 	ldr	r2, [pc, #232]	; 1022d8 <.text+0x22d8>
  1021ec:	e5924008 	ldr	r4, [r2, #8]
  1021f0:	eaffff78 	b	101fd8 <_malloc_r+0x454>
  1021f4:	e59a3004 	ldr	r3, [sl, #4]
  1021f8:	e1a01121 	mov	r1, r1, lsr #2
  1021fc:	e3a02001 	mov	r2, #1	; 0x1
  102200:	e1833112 	orr	r3, r3, r2, lsl r1
  102204:	e58a3004 	str	r3, [sl, #4]
  102208:	eaffff15 	b	101e64 <_malloc_r+0x2e0>
  10220c:	e1a0c00e 	mov	ip, lr
  102210:	e1a01009 	mov	r1, r9
  102214:	e31c0003 	tst	ip, #3	; 0x3
  102218:	e2411008 	sub	r1, r1, #8	; 0x8
  10221c:	e24cc001 	sub	ip, ip, #1	; 0x1
  102220:	0a000027 	beq	1022c4 <_malloc_r+0x740>
  102224:	e5913008 	ldr	r3, [r1, #8]
  102228:	e1530001 	cmp	r3, r1
  10222c:	0afffff8 	beq	102214 <_malloc_r+0x690>
  102230:	e1a02082 	mov	r2, r2, lsl #1
  102234:	e1520000 	cmp	r2, r0
  102238:	8affff40 	bhi	101f40 <_malloc_r+0x3bc>
  10223c:	e3520000 	cmp	r2, #0	; 0x0
  102240:	0affff3e 	beq	101f40 <_malloc_r+0x3bc>
  102244:	e1120000 	tst	r2, r0
  102248:	11a0e00a 	movne	lr, sl
  10224c:	1affff13 	bne	101ea0 <_malloc_r+0x31c>
  102250:	e1a02082 	mov	r2, r2, lsl #1
  102254:	e1100002 	tst	r0, r2
  102258:	e28aa004 	add	sl, sl, #4	; 0x4
  10225c:	0afffffb 	beq	102250 <_malloc_r+0x6cc>
  102260:	e1a0e00a 	mov	lr, sl
  102264:	eaffff0d 	b	101ea0 <_malloc_r+0x31c>
  102268:	e59fc078 	ldr	ip, [pc, #120]	; 1022e8 <.text+0x22e8>
  10226c:	e59c3000 	ldr	r3, [ip]
  102270:	e0862003 	add	r2, r6, r3
  102274:	e58c2000 	str	r2, [ip]
  102278:	eaffff9c 	b	1020f0 <_malloc_r+0x56c>
  10227c:	e1a03a00 	mov	r3, r0, lsl #20
  102280:	e1a03a23 	mov	r3, r3, lsr #20
  102284:	e3530000 	cmp	r3, #0	; 0x0
  102288:	1affff98 	bne	1020f0 <_malloc_r+0x56c>
  10228c:	e59f2044 	ldr	r2, [pc, #68]	; 1022d8 <.text+0x22d8>
  102290:	e0863008 	add	r3, r6, r8
  102294:	e5924008 	ldr	r4, [r2, #8]
  102298:	e3833001 	orr	r3, r3, #1	; 0x1
  10229c:	e5843004 	str	r3, [r4, #4]
  1022a0:	eaffffc6 	b	1021c0 <_malloc_r+0x63c>
  1022a4:	e2891008 	add	r1, r9, #8	; 0x8
  1022a8:	e1a00007 	mov	r0, r7
  1022ac:	e58dc000 	str	ip, [sp]
  1022b0:	eb000519 	bl	10371c <_free_r>
  1022b4:	e59f301c 	ldr	r3, [pc, #28]	; 1022d8 <.text+0x22d8>
  1022b8:	e59dc000 	ldr	ip, [sp]
  1022bc:	e5934008 	ldr	r4, [r3, #8]
  1022c0:	eaffffbe 	b	1021c0 <_malloc_r+0x63c>
  1022c4:	e1e03002 	mvn	r3, r2
  1022c8:	e0000003 	and	r0, r0, r3
  1022cc:	e59f3004 	ldr	r3, [pc, #4]	; 1022d8 <.text+0x22d8>
  1022d0:	e5830004 	str	r0, [r3, #4]
  1022d4:	eaffffd5 	b	102230 <_malloc_r+0x6ac>
  1022d8:	00200588 	eoreq	r0, r0, r8, lsl #11
  1022dc:	00200590 	mlaeq	r0, r0, r5, r0
  1022e0:	00200b6c 	eoreq	r0, r0, ip, ror #22
  1022e4:	00200994 	mlaeq	r0, r4, r9, r0
  1022e8:	00200b78 	eoreq	r0, r0, r8, ror fp
  1022ec:	00200b70 	eoreq	r0, r0, r0, ror fp
  1022f0:	00200b74 	eoreq	r0, r0, r4, ror fp

001022f4 <memset>:
  1022f4:	e3520003 	cmp	r2, #3	; 0x3
  1022f8:	e20110ff 	and	r1, r1, #255	; 0xff
  1022fc:	e1a0c000 	mov	ip, r0
  102300:	9a000001 	bls	10230c <memset+0x18>
  102304:	e3100003 	tst	r0, #3	; 0x3
  102308:	0a000008 	beq	102330 <memset+0x3c>
  10230c:	e3520000 	cmp	r2, #0	; 0x0
  102310:	012fff1e 	bxeq	lr
  102314:	e20110ff 	and	r1, r1, #255	; 0xff
  102318:	e3a03000 	mov	r3, #0	; 0x0
  10231c:	e7c3100c 	strb	r1, [r3, ip]
  102320:	e2833001 	add	r3, r3, #1	; 0x1
  102324:	e1530002 	cmp	r3, r2
  102328:	1afffffb 	bne	10231c <memset+0x28>
  10232c:	e12fff1e 	bx	lr
  102330:	e1813401 	orr	r3, r1, r1, lsl #8
  102334:	e352000f 	cmp	r2, #15	; 0xf
  102338:	e183c803 	orr	ip, r3, r3, lsl #16
  10233c:	e1a03000 	mov	r3, r0
  102340:	9a000009 	bls	10236c <memset+0x78>
  102344:	e2422010 	sub	r2, r2, #16	; 0x10
  102348:	e352000f 	cmp	r2, #15	; 0xf
  10234c:	e583c000 	str	ip, [r3]
  102350:	e583c004 	str	ip, [r3, #4]
  102354:	e583c008 	str	ip, [r3, #8]
  102358:	e583c00c 	str	ip, [r3, #12]
  10235c:	e2833010 	add	r3, r3, #16	; 0x10
  102360:	8afffff7 	bhi	102344 <memset+0x50>
  102364:	e3520003 	cmp	r2, #3	; 0x3
  102368:	9a000003 	bls	10237c <memset+0x88>
  10236c:	e2422004 	sub	r2, r2, #4	; 0x4
  102370:	e3520003 	cmp	r2, #3	; 0x3
  102374:	e483c004 	str	ip, [r3], #4
  102378:	8afffffb 	bhi	10236c <memset+0x78>
  10237c:	e3520000 	cmp	r2, #0	; 0x0
  102380:	e1a0c003 	mov	ip, r3
  102384:	1affffe2 	bne	102314 <memset+0x20>
  102388:	e12fff1e 	bx	lr

0010238c <__malloc_lock>:
  10238c:	e12fff1e 	bx	lr

00102390 <__malloc_unlock>:
  102390:	e12fff1e 	bx	lr

00102394 <realloc>:
  102394:	e1a02001 	mov	r2, r1
  102398:	e59f100c 	ldr	r1, [pc, #12]	; 1023ac <.text+0x23ac>
  10239c:	e1a03000 	mov	r3, r0
  1023a0:	e5910000 	ldr	r0, [r1]
  1023a4:	e1a01003 	mov	r1, r3
  1023a8:	ea000000 	b	1023b0 <_realloc_r>
  1023ac:	00200184 	eoreq	r0, r0, r4, lsl #3

001023b0 <_realloc_r>:
  1023b0:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  1023b4:	e251a000 	subs	sl, r1, #0	; 0x0
  1023b8:	e24dd00c 	sub	sp, sp, #12	; 0xc
  1023bc:	e1a06002 	mov	r6, r2
  1023c0:	e58d0000 	str	r0, [sp]
  1023c4:	0a00008d 	beq	102600 <_realloc_r+0x250>
  1023c8:	ebffffef 	bl	10238c <__malloc_lock>
  1023cc:	e286300b 	add	r3, r6, #11	; 0xb
  1023d0:	e3530016 	cmp	r3, #22	; 0x16
  1023d4:	83c3e007 	bichi	lr, r3, #7	; 0x7
  1023d8:	93a0e010 	movls	lr, #16	; 0x10
  1023dc:	958de004 	strls	lr, [sp, #4]
  1023e0:	858de004 	strhi	lr, [sp, #4]
  1023e4:	e59d0004 	ldr	r0, [sp, #4]
  1023e8:	93a03000 	movls	r3, #0	; 0x0
  1023ec:	81a03fae 	movhi	r3, lr, lsr #31
  1023f0:	e1500006 	cmp	r0, r6
  1023f4:	33833001 	orrcc	r3, r3, #1	; 0x1
  1023f8:	e24a5008 	sub	r5, sl, #8	; 0x8
  1023fc:	e3530000 	cmp	r3, #0	; 0x0
  102400:	e5959004 	ldr	r9, [r5, #4]
  102404:	1a0000d0 	bne	10274c <_realloc_r+0x39c>
  102408:	e3c94003 	bic	r4, r9, #3	; 0x3
  10240c:	e154000e 	cmp	r4, lr
  102410:	a1a08005 	movge	r8, r5
  102414:	a1a07004 	movge	r7, r4
  102418:	a1a0c008 	movge	ip, r8
  10241c:	a2884008 	addge	r4, r8, #8	; 0x8
  102420:	aa00004a 	bge	102550 <_realloc_r+0x1a0>
  102424:	e59f25b8 	ldr	r2, [pc, #1464]	; 1029e4 <.text+0x29e4>
  102428:	e592b008 	ldr	fp, [r2, #8]
  10242c:	e0850004 	add	r0, r5, r4
  102430:	e150000b 	cmp	r0, fp
  102434:	e1a08005 	mov	r8, r5
  102438:	0a0000c8 	beq	102760 <_realloc_r+0x3b0>
  10243c:	e5901004 	ldr	r1, [r0, #4]
  102440:	e3c13001 	bic	r3, r1, #1	; 0x1
  102444:	e0833000 	add	r3, r3, r0
  102448:	e5932004 	ldr	r2, [r3, #4]
  10244c:	e3120001 	tst	r2, #1	; 0x1
  102450:	0a00005f 	beq	1025d4 <_realloc_r+0x224>
  102454:	e3a0c000 	mov	ip, #0	; 0x0
  102458:	e1a0000c 	mov	r0, ip
  10245c:	e3190001 	tst	r9, #1	; 0x1
  102460:	1a00006a 	bne	102610 <_realloc_r+0x260>
  102464:	e5953000 	ldr	r3, [r5]
  102468:	e0633005 	rsb	r3, r3, r5
  10246c:	e5932004 	ldr	r2, [r3, #4]
  102470:	e3500000 	cmp	r0, #0	; 0x0
  102474:	e58d3008 	str	r3, [sp, #8]
  102478:	e3c22003 	bic	r2, r2, #3	; 0x3
  10247c:	0a000083 	beq	102690 <_realloc_r+0x2e0>
  102480:	e150000b 	cmp	r0, fp
  102484:	0a0000f9 	beq	102870 <_realloc_r+0x4c0>
  102488:	e0849002 	add	r9, r4, r2
  10248c:	e08c7009 	add	r7, ip, r9
  102490:	e157000e 	cmp	r7, lr
  102494:	ba00007e 	blt	102694 <_realloc_r+0x2e4>
  102498:	e2802008 	add	r2, r0, #8	; 0x8
  10249c:	e892000c 	ldmia	r2, {r2, r3}
  1024a0:	e5832008 	str	r2, [r3, #8]
  1024a4:	e582300c 	str	r3, [r2, #12]
  1024a8:	e59d3008 	ldr	r3, [sp, #8]
  1024ac:	e2444004 	sub	r4, r4, #4	; 0x4
  1024b0:	e593200c 	ldr	r2, [r3, #12]
  1024b4:	e59d8008 	ldr	r8, [sp, #8]
  1024b8:	e5933008 	ldr	r3, [r3, #8]
  1024bc:	e3540024 	cmp	r4, #36	; 0x24
  1024c0:	e5823008 	str	r3, [r2, #8]
  1024c4:	e583200c 	str	r2, [r3, #12]
  1024c8:	e2885008 	add	r5, r8, #8	; 0x8
  1024cc:	8a0000d4 	bhi	102824 <_realloc_r+0x474>
  1024d0:	e3540013 	cmp	r4, #19	; 0x13
  1024d4:	e1a0c00a 	mov	ip, sl
  1024d8:	e1a0e005 	mov	lr, r5
  1024dc:	9a000011 	bls	102528 <_realloc_r+0x178>
  1024e0:	e1a0000a 	mov	r0, sl
  1024e4:	e4903004 	ldr	r3, [r0], #4
  1024e8:	e5883008 	str	r3, [r8, #8]
  1024ec:	e59a2004 	ldr	r2, [sl, #4]
  1024f0:	e354001b 	cmp	r4, #27	; 0x1b
  1024f4:	e588200c 	str	r2, [r8, #12]
  1024f8:	e288e010 	add	lr, r8, #16	; 0x10
  1024fc:	e280c004 	add	ip, r0, #4	; 0x4
  102500:	9a000008 	bls	102528 <_realloc_r+0x178>
  102504:	e5903004 	ldr	r3, [r0, #4]
  102508:	e5883010 	str	r3, [r8, #16]
  10250c:	e59c2004 	ldr	r2, [ip, #4]
  102510:	e28c3004 	add	r3, ip, #4	; 0x4
  102514:	e3540024 	cmp	r4, #36	; 0x24
  102518:	e5882014 	str	r2, [r8, #20]
  10251c:	e288e018 	add	lr, r8, #24	; 0x18
  102520:	e283c004 	add	ip, r3, #4	; 0x4
  102524:	0a000119 	beq	102990 <_realloc_r+0x5e0>
  102528:	e1a0200c 	mov	r2, ip
  10252c:	e4920004 	ldr	r0, [r2], #4
  102530:	e1a0100e 	mov	r1, lr
  102534:	e4810004 	str	r0, [r1], #4
  102538:	e59c3004 	ldr	r3, [ip, #4]
  10253c:	e58e3004 	str	r3, [lr, #4]
  102540:	e5920004 	ldr	r0, [r2, #4]
  102544:	e59dc008 	ldr	ip, [sp, #8]
  102548:	e5810004 	str	r0, [r1, #4]
  10254c:	e1a04005 	mov	r4, r5
  102550:	e59d1004 	ldr	r1, [sp, #4]
  102554:	e0610007 	rsb	r0, r1, r7
  102558:	e350000f 	cmp	r0, #15	; 0xf
  10255c:	8a00000d 	bhi	102598 <_realloc_r+0x1e8>
  102560:	e59c3004 	ldr	r3, [ip, #4]
  102564:	e2033001 	and	r3, r3, #1	; 0x1
  102568:	e1873003 	orr	r3, r7, r3
  10256c:	e58c3004 	str	r3, [ip, #4]
  102570:	e0872008 	add	r2, r7, r8
  102574:	e5923004 	ldr	r3, [r2, #4]
  102578:	e3833001 	orr	r3, r3, #1	; 0x1
  10257c:	e5823004 	str	r3, [r2, #4]
  102580:	e59d0000 	ldr	r0, [sp]
  102584:	ebffff81 	bl	102390 <__malloc_unlock>
  102588:	e1a06004 	mov	r6, r4
  10258c:	e1a00006 	mov	r0, r6
  102590:	e28dd00c 	add	sp, sp, #12	; 0xc
  102594:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  102598:	e59c3004 	ldr	r3, [ip, #4]
  10259c:	e2033001 	and	r3, r3, #1	; 0x1
  1025a0:	e1813003 	orr	r3, r1, r3
  1025a4:	e3802001 	orr	r2, r0, #1	; 0x1
  1025a8:	e0811008 	add	r1, r1, r8
  1025ac:	e58c3004 	str	r3, [ip, #4]
  1025b0:	e5812004 	str	r2, [r1, #4]
  1025b4:	e0810000 	add	r0, r1, r0
  1025b8:	e5903004 	ldr	r3, [r0, #4]
  1025bc:	e3833001 	orr	r3, r3, #1	; 0x1
  1025c0:	e5803004 	str	r3, [r0, #4]
  1025c4:	e2811008 	add	r1, r1, #8	; 0x8
  1025c8:	e59d0000 	ldr	r0, [sp]
  1025cc:	eb000452 	bl	10371c <_free_r>
  1025d0:	eaffffea 	b	102580 <_realloc_r+0x1d0>
  1025d4:	e3c1c003 	bic	ip, r1, #3	; 0x3
  1025d8:	e084700c 	add	r7, r4, ip
  1025dc:	e15e0007 	cmp	lr, r7
  1025e0:	caffff9d 	bgt	10245c <_realloc_r+0xac>
  1025e4:	e2802008 	add	r2, r0, #8	; 0x8
  1025e8:	e892000c 	ldmia	r2, {r2, r3}
  1025ec:	e1a0c005 	mov	ip, r5
  1025f0:	e2854008 	add	r4, r5, #8	; 0x8
  1025f4:	e5832008 	str	r2, [r3, #8]
  1025f8:	e582300c 	str	r3, [r2, #12]
  1025fc:	eaffffd3 	b	102550 <_realloc_r+0x1a0>
  102600:	e1a01002 	mov	r1, r2
  102604:	e28dd00c 	add	sp, sp, #12	; 0xc
  102608:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  10260c:	eafffd5c 	b	101b84 <_malloc_r>
  102610:	e1a01006 	mov	r1, r6
  102614:	e59d0000 	ldr	r0, [sp]
  102618:	ebfffd59 	bl	101b84 <_malloc_r>
  10261c:	e2506000 	subs	r6, r0, #0	; 0x0
  102620:	0a000017 	beq	102684 <_realloc_r+0x2d4>
  102624:	e5953004 	ldr	r3, [r5, #4]
  102628:	e3c33001 	bic	r3, r3, #1	; 0x1
  10262c:	e0853003 	add	r3, r5, r3
  102630:	e2462008 	sub	r2, r6, #8	; 0x8
  102634:	e1520003 	cmp	r2, r3
  102638:	0a0000c9 	beq	102964 <_realloc_r+0x5b4>
  10263c:	e2441004 	sub	r1, r4, #4	; 0x4
  102640:	e3510024 	cmp	r1, #36	; 0x24
  102644:	8a000085 	bhi	102860 <_realloc_r+0x4b0>
  102648:	e3510013 	cmp	r1, #19	; 0x13
  10264c:	e1a0c00a 	mov	ip, sl
  102650:	e1a0e006 	mov	lr, r6
  102654:	8a000057 	bhi	1027b8 <_realloc_r+0x408>
  102658:	e1a0000c 	mov	r0, ip
  10265c:	e4902004 	ldr	r2, [r0], #4
  102660:	e1a0100e 	mov	r1, lr
  102664:	e4812004 	str	r2, [r1], #4
  102668:	e59c3004 	ldr	r3, [ip, #4]
  10266c:	e58e3004 	str	r3, [lr, #4]
  102670:	e5902004 	ldr	r2, [r0, #4]
  102674:	e5812004 	str	r2, [r1, #4]
  102678:	e1a0100a 	mov	r1, sl
  10267c:	e59d0000 	ldr	r0, [sp]
  102680:	eb000425 	bl	10371c <_free_r>
  102684:	e59d0000 	ldr	r0, [sp]
  102688:	ebffff40 	bl	102390 <__malloc_unlock>
  10268c:	eaffffbe 	b	10258c <_realloc_r+0x1dc>
  102690:	e0849002 	add	r9, r4, r2
  102694:	e159000e 	cmp	r9, lr
  102698:	baffffdc 	blt	102610 <_realloc_r+0x260>
  10269c:	e59d0008 	ldr	r0, [sp, #8]
  1026a0:	e2444004 	sub	r4, r4, #4	; 0x4
  1026a4:	e590200c 	ldr	r2, [r0, #12]
  1026a8:	e5903008 	ldr	r3, [r0, #8]
  1026ac:	e3540024 	cmp	r4, #36	; 0x24
  1026b0:	e1a08000 	mov	r8, r0
  1026b4:	e5823008 	str	r3, [r2, #8]
  1026b8:	e583200c 	str	r2, [r3, #12]
  1026bc:	e2805008 	add	r5, r0, #8	; 0x8
  1026c0:	8a00005e 	bhi	102840 <_realloc_r+0x490>
  1026c4:	e3540013 	cmp	r4, #19	; 0x13
  1026c8:	e1a0c00a 	mov	ip, sl
  1026cc:	e1a0e005 	mov	lr, r5
  1026d0:	9a000011 	bls	10271c <_realloc_r+0x36c>
  1026d4:	e1a0000a 	mov	r0, sl
  1026d8:	e4903004 	ldr	r3, [r0], #4
  1026dc:	e5883008 	str	r3, [r8, #8]
  1026e0:	e59a2004 	ldr	r2, [sl, #4]
  1026e4:	e354001b 	cmp	r4, #27	; 0x1b
  1026e8:	e588200c 	str	r2, [r8, #12]
  1026ec:	e288e010 	add	lr, r8, #16	; 0x10
  1026f0:	e280c004 	add	ip, r0, #4	; 0x4
  1026f4:	9a000008 	bls	10271c <_realloc_r+0x36c>
  1026f8:	e5903004 	ldr	r3, [r0, #4]
  1026fc:	e5883010 	str	r3, [r8, #16]
  102700:	e59c2004 	ldr	r2, [ip, #4]
  102704:	e28c3004 	add	r3, ip, #4	; 0x4
  102708:	e3540024 	cmp	r4, #36	; 0x24
  10270c:	e5882014 	str	r2, [r8, #20]
  102710:	e288e018 	add	lr, r8, #24	; 0x18
  102714:	e283c004 	add	ip, r3, #4	; 0x4
  102718:	0a0000a3 	beq	1029ac <_realloc_r+0x5fc>
  10271c:	e1a0200c 	mov	r2, ip
  102720:	e4921004 	ldr	r1, [r2], #4
  102724:	e1a0000e 	mov	r0, lr
  102728:	e4801004 	str	r1, [r0], #4
  10272c:	e59c3004 	ldr	r3, [ip, #4]
  102730:	e58e3004 	str	r3, [lr, #4]
  102734:	e59dc008 	ldr	ip, [sp, #8]
  102738:	e5921004 	ldr	r1, [r2, #4]
  10273c:	e1a07009 	mov	r7, r9
  102740:	e1a04005 	mov	r4, r5
  102744:	e5801004 	str	r1, [r0, #4]
  102748:	eaffff80 	b	102550 <_realloc_r+0x1a0>
  10274c:	e59d1000 	ldr	r1, [sp]
  102750:	e3a0300c 	mov	r3, #12	; 0xc
  102754:	e3a06000 	mov	r6, #0	; 0x0
  102758:	e5813000 	str	r3, [r1]
  10275c:	eaffff8a 	b	10258c <_realloc_r+0x1dc>
  102760:	e5903004 	ldr	r3, [r0, #4]
  102764:	e59d1004 	ldr	r1, [sp, #4]
  102768:	e3c3c003 	bic	ip, r3, #3	; 0x3
  10276c:	e084200c 	add	r2, r4, ip
  102770:	e2813010 	add	r3, r1, #16	; 0x10
  102774:	e1520003 	cmp	r2, r3
  102778:	baffff37 	blt	10245c <_realloc_r+0xac>
  10277c:	e0613002 	rsb	r3, r1, r2
  102780:	e3833001 	orr	r3, r3, #1	; 0x1
  102784:	e0851001 	add	r1, r5, r1
  102788:	e5813004 	str	r3, [r1, #4]
  10278c:	e5952004 	ldr	r2, [r5, #4]
  102790:	e59d3004 	ldr	r3, [sp, #4]
  102794:	e2022001 	and	r2, r2, #1	; 0x1
  102798:	e1832002 	orr	r2, r3, r2
  10279c:	e5852004 	str	r2, [r5, #4]
  1027a0:	e59f223c 	ldr	r2, [pc, #572]	; 1029e4 <.text+0x29e4>
  1027a4:	e59d0000 	ldr	r0, [sp]
  1027a8:	e5821008 	str	r1, [r2, #8]
  1027ac:	ebfffef7 	bl	102390 <__malloc_unlock>
  1027b0:	e2856008 	add	r6, r5, #8	; 0x8
  1027b4:	eaffff74 	b	10258c <_realloc_r+0x1dc>
  1027b8:	e1a0400a 	mov	r4, sl
  1027bc:	e4943004 	ldr	r3, [r4], #4
  1027c0:	e1a00006 	mov	r0, r6
  1027c4:	e4803004 	str	r3, [r0], #4
  1027c8:	e59a2004 	ldr	r2, [sl, #4]
  1027cc:	e351001b 	cmp	r1, #27	; 0x1b
  1027d0:	e5862004 	str	r2, [r6, #4]
  1027d4:	e280e004 	add	lr, r0, #4	; 0x4
  1027d8:	e284c004 	add	ip, r4, #4	; 0x4
  1027dc:	9affff9d 	bls	102658 <_realloc_r+0x2a8>
  1027e0:	e5943004 	ldr	r3, [r4, #4]
  1027e4:	e5803004 	str	r3, [r0, #4]
  1027e8:	e59c2004 	ldr	r2, [ip, #4]
  1027ec:	e3510024 	cmp	r1, #36	; 0x24
  1027f0:	e28c3004 	add	r3, ip, #4	; 0x4
  1027f4:	e28e1004 	add	r1, lr, #4	; 0x4
  1027f8:	e58e2004 	str	r2, [lr, #4]
  1027fc:	e283c004 	add	ip, r3, #4	; 0x4
  102800:	e281e004 	add	lr, r1, #4	; 0x4
  102804:	1affff93 	bne	102658 <_realloc_r+0x2a8>
  102808:	e5933004 	ldr	r3, [r3, #4]
  10280c:	e5813004 	str	r3, [r1, #4]
  102810:	e59c2004 	ldr	r2, [ip, #4]
  102814:	e28cc008 	add	ip, ip, #8	; 0x8
  102818:	e58e2004 	str	r2, [lr, #4]
  10281c:	e28ee008 	add	lr, lr, #8	; 0x8
  102820:	eaffff8c 	b	102658 <_realloc_r+0x2a8>
  102824:	e1a02004 	mov	r2, r4
  102828:	e1a0100a 	mov	r1, sl
  10282c:	e1a00005 	mov	r0, r5
  102830:	eb0004a4 	bl	103ac8 <memmove>
  102834:	e1a04005 	mov	r4, r5
  102838:	e1a0c008 	mov	ip, r8
  10283c:	eaffff43 	b	102550 <_realloc_r+0x1a0>
  102840:	e1a02004 	mov	r2, r4
  102844:	e1a0100a 	mov	r1, sl
  102848:	e1a00005 	mov	r0, r5
  10284c:	eb00049d 	bl	103ac8 <memmove>
  102850:	e1a07009 	mov	r7, r9
  102854:	e1a04005 	mov	r4, r5
  102858:	e1a0c008 	mov	ip, r8
  10285c:	eaffff3b 	b	102550 <_realloc_r+0x1a0>
  102860:	e1a02001 	mov	r2, r1
  102864:	e1a0100a 	mov	r1, sl
  102868:	eb000496 	bl	103ac8 <memmove>
  10286c:	eaffff81 	b	102678 <_realloc_r+0x2c8>
  102870:	e59d0004 	ldr	r0, [sp, #4]
  102874:	e0849002 	add	r9, r4, r2
  102878:	e08c7009 	add	r7, ip, r9
  10287c:	e2803010 	add	r3, r0, #16	; 0x10
  102880:	e1570003 	cmp	r7, r3
  102884:	baffff82 	blt	102694 <_realloc_r+0x2e4>
  102888:	e59d1008 	ldr	r1, [sp, #8]
  10288c:	e2444004 	sub	r4, r4, #4	; 0x4
  102890:	e591200c 	ldr	r2, [r1, #12]
  102894:	e5913008 	ldr	r3, [r1, #8]
  102898:	e3540024 	cmp	r4, #36	; 0x24
  10289c:	e5823008 	str	r3, [r2, #8]
  1028a0:	e583200c 	str	r2, [r3, #12]
  1028a4:	e2816008 	add	r6, r1, #8	; 0x8
  1028a8:	8a000033 	bhi	10297c <_realloc_r+0x5cc>
  1028ac:	e3540013 	cmp	r4, #19	; 0x13
  1028b0:	e1a0c00a 	mov	ip, sl
  1028b4:	e1a0e006 	mov	lr, r6
  1028b8:	9a000011 	bls	102904 <_realloc_r+0x554>
  1028bc:	e1a0000a 	mov	r0, sl
  1028c0:	e4903004 	ldr	r3, [r0], #4
  1028c4:	e5813008 	str	r3, [r1, #8]
  1028c8:	e59a2004 	ldr	r2, [sl, #4]
  1028cc:	e354001b 	cmp	r4, #27	; 0x1b
  1028d0:	e581200c 	str	r2, [r1, #12]
  1028d4:	e281e010 	add	lr, r1, #16	; 0x10
  1028d8:	e280c004 	add	ip, r0, #4	; 0x4
  1028dc:	9a000008 	bls	102904 <_realloc_r+0x554>
  1028e0:	e5903004 	ldr	r3, [r0, #4]
  1028e4:	e5813010 	str	r3, [r1, #16]
  1028e8:	e59c2004 	ldr	r2, [ip, #4]
  1028ec:	e28c3004 	add	r3, ip, #4	; 0x4
  1028f0:	e3540024 	cmp	r4, #36	; 0x24
  1028f4:	e5812014 	str	r2, [r1, #20]
  1028f8:	e281e018 	add	lr, r1, #24	; 0x18
  1028fc:	e283c004 	add	ip, r3, #4	; 0x4
  102900:	0a000030 	beq	1029c8 <_realloc_r+0x618>
  102904:	e1a0000c 	mov	r0, ip
  102908:	e4902004 	ldr	r2, [r0], #4
  10290c:	e1a0100e 	mov	r1, lr
  102910:	e4812004 	str	r2, [r1], #4
  102914:	e59c3004 	ldr	r3, [ip, #4]
  102918:	e58e3004 	str	r3, [lr, #4]
  10291c:	e5902004 	ldr	r2, [r0, #4]
  102920:	e5812004 	str	r2, [r1, #4]
  102924:	e59d2004 	ldr	r2, [sp, #4]
  102928:	e59d0008 	ldr	r0, [sp, #8]
  10292c:	e0623007 	rsb	r3, r2, r7
  102930:	e0801002 	add	r1, r0, r2
  102934:	e3833001 	orr	r3, r3, #1	; 0x1
  102938:	e5813004 	str	r3, [r1, #4]
  10293c:	e5902004 	ldr	r2, [r0, #4]
  102940:	e59d3004 	ldr	r3, [sp, #4]
  102944:	e2022001 	and	r2, r2, #1	; 0x1
  102948:	e1832002 	orr	r2, r3, r2
  10294c:	e5802004 	str	r2, [r0, #4]
  102950:	e59f208c 	ldr	r2, [pc, #140]	; 1029e4 <.text+0x29e4>
  102954:	e59d0000 	ldr	r0, [sp]
  102958:	e5821008 	str	r1, [r2, #8]
  10295c:	ebfffe8b 	bl	102390 <__malloc_unlock>
  102960:	eaffff09 	b	10258c <_realloc_r+0x1dc>
  102964:	e5923004 	ldr	r3, [r2, #4]
  102968:	e3c33003 	bic	r3, r3, #3	; 0x3
  10296c:	e0847003 	add	r7, r4, r3
  102970:	e1a0c005 	mov	ip, r5
  102974:	e2854008 	add	r4, r5, #8	; 0x8
  102978:	eafffef4 	b	102550 <_realloc_r+0x1a0>
  10297c:	e1a0100a 	mov	r1, sl
  102980:	e1a02004 	mov	r2, r4
  102984:	e1a00006 	mov	r0, r6
  102988:	eb00044e 	bl	103ac8 <memmove>
  10298c:	eaffffe4 	b	102924 <_realloc_r+0x574>
  102990:	e5933004 	ldr	r3, [r3, #4]
  102994:	e5883018 	str	r3, [r8, #24]
  102998:	e59c2004 	ldr	r2, [ip, #4]
  10299c:	e288e020 	add	lr, r8, #32	; 0x20
  1029a0:	e28cc008 	add	ip, ip, #8	; 0x8
  1029a4:	e588201c 	str	r2, [r8, #28]
  1029a8:	eafffede 	b	102528 <_realloc_r+0x178>
  1029ac:	e5933004 	ldr	r3, [r3, #4]
  1029b0:	e5883018 	str	r3, [r8, #24]
  1029b4:	e59c2004 	ldr	r2, [ip, #4]
  1029b8:	e288e020 	add	lr, r8, #32	; 0x20
  1029bc:	e28cc008 	add	ip, ip, #8	; 0x8
  1029c0:	e588201c 	str	r2, [r8, #28]
  1029c4:	eaffff54 	b	10271c <_realloc_r+0x36c>
  1029c8:	e5933004 	ldr	r3, [r3, #4]
  1029cc:	e5813018 	str	r3, [r1, #24]
  1029d0:	e59c2004 	ldr	r2, [ip, #4]
  1029d4:	e281e020 	add	lr, r1, #32	; 0x20
  1029d8:	e28cc008 	add	ip, ip, #8	; 0x8
  1029dc:	e581201c 	str	r2, [r1, #28]
  1029e0:	eaffffc7 	b	102904 <_realloc_r+0x554>
  1029e4:	00200588 	eoreq	r0, r0, r8, lsl #11

001029e8 <strlen>:
  1029e8:	e3100003 	tst	r0, #3	; 0x3
  1029ec:	e1a01000 	mov	r1, r0
  1029f0:	1a000018 	bne	102a58 <strlen+0x70>
  1029f4:	e5902000 	ldr	r2, [r0]
  1029f8:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
  1029fc:	e2433801 	sub	r3, r3, #65536	; 0x10000
  102a00:	e2433c01 	sub	r3, r3, #256	; 0x100
  102a04:	e2433001 	sub	r3, r3, #1	; 0x1
  102a08:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
  102a0c:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
  102a10:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
  102a14:	e3c3307f 	bic	r3, r3, #127	; 0x7f
  102a18:	e1d32002 	bics	r2, r3, r2
  102a1c:	e1a02000 	mov	r2, r0
  102a20:	1a00000b 	bne	102a54 <strlen+0x6c>
  102a24:	e5b02004 	ldr	r2, [r0, #4]!
  102a28:	e28234ff 	add	r3, r2, #-16777216	; 0xff000000
  102a2c:	e2433801 	sub	r3, r3, #65536	; 0x10000
  102a30:	e2433c01 	sub	r3, r3, #256	; 0x100
  102a34:	e2433001 	sub	r3, r3, #1	; 0x1
  102a38:	e3c3347f 	bic	r3, r3, #2130706432	; 0x7f000000
  102a3c:	e3c3387f 	bic	r3, r3, #8323072	; 0x7f0000
  102a40:	e3c33c7f 	bic	r3, r3, #32512	; 0x7f00
  102a44:	e3c3307f 	bic	r3, r3, #127	; 0x7f
  102a48:	e1d32002 	bics	r2, r3, r2
  102a4c:	0afffff4 	beq	102a24 <strlen+0x3c>
  102a50:	e1a02000 	mov	r2, r0
  102a54:	e1a00002 	mov	r0, r2
  102a58:	e5d03000 	ldrb	r3, [r0]
  102a5c:	e3530000 	cmp	r3, #0	; 0x0
  102a60:	0a000002 	beq	102a70 <strlen+0x88>
  102a64:	e5f03001 	ldrb	r3, [r0, #1]!
  102a68:	e3530000 	cmp	r3, #0	; 0x0
  102a6c:	1afffffc 	bne	102a64 <strlen+0x7c>
  102a70:	e0610000 	rsb	r0, r1, r0
  102a74:	e12fff1e 	bx	lr

00102a78 <findslot>:
  102a78:	e59f2024 	ldr	r2, [pc, #36]	; 102aa4 <.text+0x2aa4>
  102a7c:	e1a01000 	mov	r1, r0
  102a80:	e3a00000 	mov	r0, #0	; 0x0
  102a84:	e5923000 	ldr	r3, [r2]
  102a88:	e1530001 	cmp	r3, r1
  102a8c:	e2822008 	add	r2, r2, #8	; 0x8
  102a90:	012fff1e 	bxeq	lr
  102a94:	e2800001 	add	r0, r0, #1	; 0x1
  102a98:	e3500014 	cmp	r0, #20	; 0x14
  102a9c:	1afffff8 	bne	102a84 <findslot+0xc>
  102aa0:	e12fff1e 	bx	lr
  102aa4:	00200bb0 	streqh	r0, [r0], -r0

00102aa8 <_getpid>:
  102aa8:	e3a00001 	mov	r0, #1	; 0x1
  102aac:	e12fff1e 	bx	lr

00102ab0 <_link>:
  102ab0:	e3e00000 	mvn	r0, #0	; 0x0
  102ab4:	e12fff1e 	bx	lr

00102ab8 <_unlink>:
  102ab8:	e3e00000 	mvn	r0, #0	; 0x0
  102abc:	e12fff1e 	bx	lr

00102ac0 <_raise>:
  102ac0:	e12fff1e 	bx	lr

00102ac4 <isatty>:
  102ac4:	e3a00001 	mov	r0, #1	; 0x1
  102ac8:	e12fff1e 	bx	lr

00102acc <_rename>:
  102acc:	e52de004 	str	lr, [sp, #-4]!
  102ad0:	eb000233 	bl	1033a4 <__errno>
  102ad4:	e3a03058 	mov	r3, #88	; 0x58
  102ad8:	e5803000 	str	r3, [r0]
  102adc:	e3e00000 	mvn	r0, #0	; 0x0
  102ae0:	e49df004 	ldr	pc, [sp], #4

00102ae4 <_system>:
  102ae4:	e3500000 	cmp	r0, #0	; 0x0
  102ae8:	e52de004 	str	lr, [sp, #-4]!
  102aec:	049df004 	ldreq	pc, [sp], #4
  102af0:	eb00022b 	bl	1033a4 <__errno>
  102af4:	e3a03058 	mov	r3, #88	; 0x58
  102af8:	e5803000 	str	r3, [r0]
  102afc:	e3e00000 	mvn	r0, #0	; 0x0
  102b00:	e49df004 	ldr	pc, [sp], #4

00102b04 <_sbrk>:
  102b04:	e59f1044 	ldr	r1, [pc, #68]	; 102b50 <.text+0x2b50>
  102b08:	e5913000 	ldr	r3, [r1]
  102b0c:	e52de004 	str	lr, [sp, #-4]!
  102b10:	e3530000 	cmp	r3, #0	; 0x0
  102b14:	059f3038 	ldreq	r3, [pc, #56]	; 102b54 <.text+0x2b54>
  102b18:	e0830000 	add	r0, r3, r0
  102b1c:	05813000 	streq	r3, [r1]
  102b20:	e150000d 	cmp	r0, sp
  102b24:	e1a02003 	mov	r2, r3
  102b28:	95810000 	strls	r0, [r1]
  102b2c:	8a000001 	bhi	102b38 <_sbrk+0x34>
  102b30:	e1a00002 	mov	r0, r2
  102b34:	e49df004 	ldr	pc, [sp], #4
  102b38:	eb000219 	bl	1033a4 <__errno>
  102b3c:	e3e02000 	mvn	r2, #0	; 0x0
  102b40:	e3a0300c 	mov	r3, #12	; 0xc
  102b44:	e5803000 	str	r3, [r0]
  102b48:	e1a00002 	mov	r0, r2
  102b4c:	e49df004 	ldr	pc, [sp], #4
  102b50:	00200ba0 	eoreq	r0, r0, r0, lsr #23
  102b54:	00200e60 	eoreq	r0, r0, r0, ror #28

00102b58 <error>:
  102b58:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
  102b5c:	e1a07000 	mov	r7, r0
  102b60:	eb00020f 	bl	1033a4 <__errno>
  102b64:	e3a04013 	mov	r4, #19	; 0x13
  102b68:	e1a06000 	mov	r6, r0
  102b6c:	e3a05000 	mov	r5, #0	; 0x0
  102b70:	e1a00004 	mov	r0, r4
  102b74:	e1a01005 	mov	r1, r5
  102b78:	ef123456 	svc	0x00123456
  102b7c:	e1a04000 	mov	r4, r0
  102b80:	e1a00007 	mov	r0, r7
  102b84:	e5864000 	str	r4, [r6]
  102b88:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}

00102b8c <wrap>:
  102b8c:	e3700001 	cmn	r0, #1	; 0x1
  102b90:	112fff1e 	bxne	lr
  102b94:	eaffffef 	b	102b58 <error>

00102b98 <_fstat>:
  102b98:	e92d4010 	stmdb	sp!, {r4, lr}
  102b9c:	e1a00001 	mov	r0, r1
  102ba0:	e1a04001 	mov	r4, r1
  102ba4:	e3a0203c 	mov	r2, #60	; 0x3c
  102ba8:	e3a01000 	mov	r1, #0	; 0x0
  102bac:	ebfffdd0 	bl	1022f4 <memset>
  102bb0:	e3a03b01 	mov	r3, #1024	; 0x400
  102bb4:	e3a02a02 	mov	r2, #8192	; 0x2000
  102bb8:	e3a00000 	mov	r0, #0	; 0x0
  102bbc:	e584302c 	str	r3, [r4, #44]
  102bc0:	e5842004 	str	r2, [r4, #4]
  102bc4:	e8bd8010 	ldmia	sp!, {r4, pc}

00102bc8 <remap_handle>:
  102bc8:	e59f3064 	ldr	r3, [pc, #100]	; 102c34 <.text+0x2c34>
  102bcc:	e5932000 	ldr	r2, [r3]
  102bd0:	e3520000 	cmp	r2, #0	; 0x0
  102bd4:	e92d4010 	stmdb	sp!, {r4, lr}
  102bd8:	e1a04000 	mov	r4, r0
  102bdc:	0a000002 	beq	102bec <remap_handle+0x24>
  102be0:	e5923038 	ldr	r3, [r2, #56]
  102be4:	e3530000 	cmp	r3, #0	; 0x0
  102be8:	0a00000b 	beq	102c1c <remap_handle+0x54>
  102bec:	e3540000 	cmp	r4, #0	; 0x0
  102bf0:	1a000002 	bne	102c00 <remap_handle+0x38>
  102bf4:	e59f303c 	ldr	r3, [pc, #60]	; 102c38 <.text+0x2c38>
  102bf8:	e5930000 	ldr	r0, [r3]
  102bfc:	e8bd8010 	ldmia	sp!, {r4, pc}
  102c00:	e3540001 	cmp	r4, #1	; 0x1
  102c04:	0a000007 	beq	102c28 <remap_handle+0x60>
  102c08:	e3540002 	cmp	r4, #2	; 0x2
  102c0c:	059f3028 	ldreq	r3, [pc, #40]	; 102c3c <.text+0x2c3c>
  102c10:	05930000 	ldreq	r0, [r3]
  102c14:	12440020 	subne	r0, r4, #32	; 0x20
  102c18:	e8bd8010 	ldmia	sp!, {r4, pc}
  102c1c:	e1a00002 	mov	r0, r2
  102c20:	eb0001fe 	bl	103420 <__sinit>
  102c24:	eafffff0 	b	102bec <remap_handle+0x24>
  102c28:	e59f3010 	ldr	r3, [pc, #16]	; 102c40 <.text+0x2c40>
  102c2c:	e5930000 	ldr	r0, [r3]
  102c30:	e8bd8010 	ldmia	sp!, {r4, pc}
  102c34:	00200184 	eoreq	r0, r0, r4, lsl #3
  102c38:	00200ba4 	eoreq	r0, r0, r4, lsr #23
  102c3c:	00200bac 	eoreq	r0, r0, ip, lsr #23
  102c40:	00200ba8 	eoreq	r0, r0, r8, lsr #23

00102c44 <_swiclose>:
  102c44:	e92d4030 	stmdb	sp!, {r4, r5, lr}
  102c48:	e24dd004 	sub	sp, sp, #4	; 0x4
  102c4c:	ebffffdd 	bl	102bc8 <remap_handle>
  102c50:	e58d0000 	str	r0, [sp]
  102c54:	ebffff87 	bl	102a78 <findslot>
  102c58:	e3500014 	cmp	r0, #20	; 0x14
  102c5c:	159f3028 	ldrne	r3, [pc, #40]	; 102c8c <.text+0x2c8c>
  102c60:	13e02000 	mvnne	r2, #0	; 0x0
  102c64:	17832180 	strne	r2, [r3, r0, lsl #3]
  102c68:	e3a04002 	mov	r4, #2	; 0x2
  102c6c:	e1a0500d 	mov	r5, sp
  102c70:	e1a00004 	mov	r0, r4
  102c74:	e1a0100d 	mov	r1, sp
  102c78:	ef123456 	svc	0x00123456
  102c7c:	e1a04000 	mov	r4, r0
  102c80:	e1a00004 	mov	r0, r4
  102c84:	e28dd004 	add	sp, sp, #4	; 0x4
  102c88:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
  102c8c:	00200bb0 	streqh	r0, [r0], -r0

00102c90 <_close>:
  102c90:	e52de004 	str	lr, [sp, #-4]!
  102c94:	ebffffea 	bl	102c44 <_swiclose>
  102c98:	e49de004 	ldr	lr, [sp], #4
  102c9c:	eaffffba 	b	102b8c <wrap>

00102ca0 <_swiwrite>:
  102ca0:	e92d4030 	stmdb	sp!, {r4, r5, lr}
  102ca4:	e24dd00c 	sub	sp, sp, #12	; 0xc
  102ca8:	e1a04001 	mov	r4, r1
  102cac:	e1a05002 	mov	r5, r2
  102cb0:	ebffffc4 	bl	102bc8 <remap_handle>
  102cb4:	e88d0031 	stmia	sp, {r0, r4, r5}
  102cb8:	e3a04005 	mov	r4, #5	; 0x5
  102cbc:	e1a0500d 	mov	r5, sp
  102cc0:	e1a00004 	mov	r0, r4
  102cc4:	e1a0100d 	mov	r1, sp
  102cc8:	ef123456 	svc	0x00123456
  102ccc:	e1a04000 	mov	r4, r0
  102cd0:	e1a00004 	mov	r0, r4
  102cd4:	e28dd00c 	add	sp, sp, #12	; 0xc
  102cd8:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00102cdc <_write>:
  102cdc:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
  102ce0:	e1a06002 	mov	r6, r2
  102ce4:	e1a05001 	mov	r5, r1
  102ce8:	e1a04000 	mov	r4, r0
  102cec:	ebffffb5 	bl	102bc8 <remap_handle>
  102cf0:	ebffff60 	bl	102a78 <findslot>
  102cf4:	e1a02006 	mov	r2, r6
  102cf8:	e1a07000 	mov	r7, r0
  102cfc:	e1a01005 	mov	r1, r5
  102d00:	e1a00004 	mov	r0, r4
  102d04:	ebffffe5 	bl	102ca0 <_swiwrite>
  102d08:	e1a02000 	mov	r2, r0
  102d0c:	e3e00000 	mvn	r0, #0	; 0x0
  102d10:	e1520000 	cmp	r2, r0
  102d14:	11560002 	cmpne	r6, r2
  102d18:	0a000008 	beq	102d40 <_write+0x64>
  102d1c:	e59f3024 	ldr	r3, [pc, #36]	; 102d48 <.text+0x2d48>
  102d20:	e3570014 	cmp	r7, #20	; 0x14
  102d24:	e0831187 	add	r1, r3, r7, lsl #3
  102d28:	e0620006 	rsb	r0, r2, r6
  102d2c:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
  102d30:	e5913004 	ldr	r3, [r1, #4]
  102d34:	e0833000 	add	r3, r3, r0
  102d38:	e5813004 	str	r3, [r1, #4]
  102d3c:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
  102d40:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
  102d44:	eaffff83 	b	102b58 <error>
  102d48:	00200bb0 	streqh	r0, [r0], -r0

00102d4c <_swilseek>:
  102d4c:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  102d50:	e24dd008 	sub	sp, sp, #8	; 0x8
  102d54:	e1a04002 	mov	r4, r2
  102d58:	e1a05001 	mov	r5, r1
  102d5c:	e1a08000 	mov	r8, r0
  102d60:	ebffff98 	bl	102bc8 <remap_handle>
  102d64:	e1a07000 	mov	r7, r0
  102d68:	ebffff42 	bl	102a78 <findslot>
  102d6c:	e3540001 	cmp	r4, #1	; 0x1
  102d70:	e1a06000 	mov	r6, r0
  102d74:	0a00001a 	beq	102de4 <_swilseek+0x98>
  102d78:	e3540002 	cmp	r4, #2	; 0x2
  102d7c:	11a0700d 	movne	r7, sp
  102d80:	0a00001f 	beq	102e04 <_swilseek+0xb8>
  102d84:	e1a00008 	mov	r0, r8
  102d88:	ebffff8e 	bl	102bc8 <remap_handle>
  102d8c:	e3a0400a 	mov	r4, #10	; 0xa
  102d90:	e88d0021 	stmia	sp, {r0, r5}
  102d94:	e1a00004 	mov	r0, r4
  102d98:	e1a01007 	mov	r1, r7
  102d9c:	ef123456 	svc	0x00123456
  102da0:	e1a04000 	mov	r4, r0
  102da4:	e2744001 	rsbs	r4, r4, #1	; 0x1
  102da8:	33a04000 	movcc	r4, #0	; 0x0
  102dac:	e3560014 	cmp	r6, #20	; 0x14
  102db0:	03a03000 	moveq	r3, #0	; 0x0
  102db4:	12043001 	andne	r3, r4, #1	; 0x1
  102db8:	e3530000 	cmp	r3, #0	; 0x0
  102dbc:	159f3064 	ldrne	r3, [pc, #100]	; 102e28 <.text+0x2e28>
  102dc0:	10833186 	addne	r3, r3, r6, lsl #3
  102dc4:	15835004 	strne	r5, [r3, #4]
  102dc8:	e3540000 	cmp	r4, #0	; 0x0
  102dcc:	0a000002 	beq	102ddc <_swilseek+0x90>
  102dd0:	e1a00005 	mov	r0, r5
  102dd4:	e28dd008 	add	sp, sp, #8	; 0x8
  102dd8:	e8bd81f0 	ldmia	sp!, {r4, r5, r6, r7, r8, pc}
  102ddc:	e3e05000 	mvn	r5, #0	; 0x0
  102de0:	eafffffa 	b	102dd0 <_swilseek+0x84>
  102de4:	e3500014 	cmp	r0, #20	; 0x14
  102de8:	0afffffb 	beq	102ddc <_swilseek+0x90>
  102dec:	e59f3034 	ldr	r3, [pc, #52]	; 102e28 <.text+0x2e28>
  102df0:	e0833180 	add	r3, r3, r0, lsl #3
  102df4:	e5932004 	ldr	r2, [r3, #4]
  102df8:	e1a0700d 	mov	r7, sp
  102dfc:	e0855002 	add	r5, r5, r2
  102e00:	eaffffdf 	b	102d84 <_swilseek+0x38>
  102e04:	e58d7000 	str	r7, [sp]
  102e08:	e284400a 	add	r4, r4, #10	; 0xa
  102e0c:	e1a0700d 	mov	r7, sp
  102e10:	e1a00004 	mov	r0, r4
  102e14:	e1a0100d 	mov	r1, sp
  102e18:	ef123456 	svc	0x00123456
  102e1c:	e1a04000 	mov	r4, r0
  102e20:	e0855004 	add	r5, r5, r4
  102e24:	eaffffd6 	b	102d84 <_swilseek+0x38>
  102e28:	00200bb0 	streqh	r0, [r0], -r0

00102e2c <_lseek>:
  102e2c:	e52de004 	str	lr, [sp, #-4]!
  102e30:	ebffffc5 	bl	102d4c <_swilseek>
  102e34:	e49de004 	ldr	lr, [sp], #4
  102e38:	eaffff53 	b	102b8c <wrap>

00102e3c <_swiread>:
  102e3c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
  102e40:	e24dd00c 	sub	sp, sp, #12	; 0xc
  102e44:	e1a04001 	mov	r4, r1
  102e48:	e1a05002 	mov	r5, r2
  102e4c:	ebffff5d 	bl	102bc8 <remap_handle>
  102e50:	e88d0031 	stmia	sp, {r0, r4, r5}
  102e54:	e3a04006 	mov	r4, #6	; 0x6
  102e58:	e1a0500d 	mov	r5, sp
  102e5c:	e1a00004 	mov	r0, r4
  102e60:	e1a0100d 	mov	r1, sp
  102e64:	ef123456 	svc	0x00123456
  102e68:	e1a04000 	mov	r4, r0
  102e6c:	e1a00004 	mov	r0, r4
  102e70:	e28dd00c 	add	sp, sp, #12	; 0xc
  102e74:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00102e78 <_read>:
  102e78:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
  102e7c:	e1a06002 	mov	r6, r2
  102e80:	e1a05001 	mov	r5, r1
  102e84:	e1a04000 	mov	r4, r0
  102e88:	ebffff4e 	bl	102bc8 <remap_handle>
  102e8c:	ebfffef9 	bl	102a78 <findslot>
  102e90:	e1a01005 	mov	r1, r5
  102e94:	e1a07000 	mov	r7, r0
  102e98:	e1a02006 	mov	r2, r6
  102e9c:	e1a00004 	mov	r0, r4
  102ea0:	ebffffe5 	bl	102e3c <_swiread>
  102ea4:	e2501000 	subs	r1, r0, #0	; 0x0
  102ea8:	e3e00000 	mvn	r0, #0	; 0x0
  102eac:	ba000008 	blt	102ed4 <_read+0x5c>
  102eb0:	e59f3024 	ldr	r3, [pc, #36]	; 102edc <.text+0x2edc>
  102eb4:	e3570014 	cmp	r7, #20	; 0x14
  102eb8:	e0832187 	add	r2, r3, r7, lsl #3
  102ebc:	e0610006 	rsb	r0, r1, r6
  102ec0:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
  102ec4:	e5923004 	ldr	r3, [r2, #4]
  102ec8:	e0833000 	add	r3, r3, r0
  102ecc:	e5823004 	str	r3, [r2, #4]
  102ed0:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
  102ed4:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
  102ed8:	eaffff1e 	b	102b58 <error>
  102edc:	00200bb0 	streqh	r0, [r0], -r0

00102ee0 <_swiopen>:
  102ee0:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
  102ee4:	e1a07000 	mov	r7, r0
  102ee8:	e24dd00c 	sub	sp, sp, #12	; 0xc
  102eec:	e3e00000 	mvn	r0, #0	; 0x0
  102ef0:	e1a05001 	mov	r5, r1
  102ef4:	ebfffedf 	bl	102a78 <findslot>
  102ef8:	e3500014 	cmp	r0, #20	; 0x14
  102efc:	e1a06000 	mov	r6, r0
  102f00:	03e00000 	mvneq	r0, #0	; 0x0
  102f04:	0a000019 	beq	102f70 <_swiopen+0x90>
  102f08:	e2054002 	and	r4, r5, #2	; 0x2
  102f0c:	e3150c02 	tst	r5, #512	; 0x200
  102f10:	13844004 	orrne	r4, r4, #4	; 0x4
  102f14:	e3150b01 	tst	r5, #1024	; 0x400
  102f18:	13844004 	orrne	r4, r4, #4	; 0x4
  102f1c:	e3150008 	tst	r5, #8	; 0x8
  102f20:	13c43004 	bicne	r3, r4, #4	; 0x4
  102f24:	e1a00007 	mov	r0, r7
  102f28:	13834008 	orrne	r4, r3, #8	; 0x8
  102f2c:	e58d7000 	str	r7, [sp]
  102f30:	ebfffeac 	bl	1029e8 <strlen>
  102f34:	e3a05001 	mov	r5, #1	; 0x1
  102f38:	e58d4004 	str	r4, [sp, #4]
  102f3c:	e58d0008 	str	r0, [sp, #8]
  102f40:	e1a00005 	mov	r0, r5
  102f44:	e1a0100d 	mov	r1, sp
  102f48:	ef123456 	svc	0x00123456
  102f4c:	e1a04000 	mov	r4, r0
  102f50:	e3540000 	cmp	r4, #0	; 0x0
  102f54:	ba000007 	blt	102f78 <_swiopen+0x98>
  102f58:	e59f1024 	ldr	r1, [pc, #36]	; 102f84 <.text+0x2f84>
  102f5c:	e3a03000 	mov	r3, #0	; 0x0
  102f60:	e0812186 	add	r2, r1, r6, lsl #3
  102f64:	e5823004 	str	r3, [r2, #4]
  102f68:	e7814186 	str	r4, [r1, r6, lsl #3]
  102f6c:	e2840020 	add	r0, r4, #32	; 0x20
  102f70:	e28dd00c 	add	sp, sp, #12	; 0xc
  102f74:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
  102f78:	e1a00004 	mov	r0, r4
  102f7c:	ebfffef5 	bl	102b58 <error>
  102f80:	eafffffa 	b	102f70 <_swiopen+0x90>
  102f84:	00200bb0 	streqh	r0, [r0], -r0

00102f88 <_open>:
  102f88:	e92d000e 	stmdb	sp!, {r1, r2, r3}
  102f8c:	e52de004 	str	lr, [sp, #-4]!
  102f90:	e59d1004 	ldr	r1, [sp, #4]
  102f94:	ebffffd1 	bl	102ee0 <_swiopen>
  102f98:	ebfffefb 	bl	102b8c <wrap>
  102f9c:	e49de004 	ldr	lr, [sp], #4
  102fa0:	e28dd00c 	add	sp, sp, #12	; 0xc
  102fa4:	e12fff1e 	bx	lr

00102fa8 <_stat>:
  102fa8:	e92d4030 	stmdb	sp!, {r4, r5, lr}
  102fac:	e1a04001 	mov	r4, r1
  102fb0:	e3a01000 	mov	r1, #0	; 0x0
  102fb4:	ebfffff3 	bl	102f88 <_open>
  102fb8:	e2505000 	subs	r5, r0, #0	; 0x0
  102fbc:	e3a01000 	mov	r1, #0	; 0x0
  102fc0:	e3a0203c 	mov	r2, #60	; 0x3c
  102fc4:	e1a00004 	mov	r0, r4
  102fc8:	e3e03000 	mvn	r3, #0	; 0x0
  102fcc:	ba000007 	blt	102ff0 <_stat+0x48>
  102fd0:	ebfffcc7 	bl	1022f4 <memset>
  102fd4:	e3a03b01 	mov	r3, #1024	; 0x400
  102fd8:	e3a02c81 	mov	r2, #33024	; 0x8100
  102fdc:	e584302c 	str	r3, [r4, #44]
  102fe0:	e5842004 	str	r2, [r4, #4]
  102fe4:	e1a00005 	mov	r0, r5
  102fe8:	ebffff15 	bl	102c44 <_swiclose>
  102fec:	e3a03000 	mov	r3, #0	; 0x0
  102ff0:	e1a00003 	mov	r0, r3
  102ff4:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00102ff8 <initialise_monitor_handles>:
  102ff8:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
  102ffc:	e59f709c 	ldr	r7, [pc, #156]	; 1030a0 <.text+0x30a0>
  103000:	e24dd00c 	sub	sp, sp, #12	; 0xc
  103004:	e3a08003 	mov	r8, #3	; 0x3
  103008:	e3a03000 	mov	r3, #0	; 0x0
  10300c:	e58d7000 	str	r7, [sp]
  103010:	e3a06001 	mov	r6, #1	; 0x1
  103014:	e58d8008 	str	r8, [sp, #8]
  103018:	e1a0500d 	mov	r5, sp
  10301c:	e58d3004 	str	r3, [sp, #4]
  103020:	e1a00006 	mov	r0, r6
  103024:	e1a0100d 	mov	r1, sp
  103028:	ef123456 	svc	0x00123456
  10302c:	e1a04000 	mov	r4, r0
  103030:	e59fa06c 	ldr	sl, [pc, #108]	; 1030a4 <.text+0x30a4>
  103034:	e58a4000 	str	r4, [sl]
  103038:	e3a04004 	mov	r4, #4	; 0x4
  10303c:	e58d7000 	str	r7, [sp]
  103040:	e58d8008 	str	r8, [sp, #8]
  103044:	e58d4004 	str	r4, [sp, #4]
  103048:	e1a00006 	mov	r0, r6
  10304c:	e1a0100d 	mov	r1, sp
  103050:	ef123456 	svc	0x00123456
  103054:	e1a04000 	mov	r4, r0
  103058:	e59f3048 	ldr	r3, [pc, #72]	; 1030a8 <.text+0x30a8>
  10305c:	e59f2048 	ldr	r2, [pc, #72]	; 1030ac <.text+0x30ac>
  103060:	e59f0048 	ldr	r0, [pc, #72]	; 1030b0 <.text+0x30b0>
  103064:	e5834000 	str	r4, [r3]
  103068:	e5824000 	str	r4, [r2]
  10306c:	e3e03000 	mvn	r3, #0	; 0x0
  103070:	e28020a0 	add	r2, r0, #160	; 0xa0
  103074:	e4803008 	str	r3, [r0], #8
  103078:	e1500002 	cmp	r0, r2
  10307c:	1afffffc 	bne	103074 <initialise_monitor_handles+0x7c>
  103080:	e59a3000 	ldr	r3, [sl]
  103084:	e24020a0 	sub	r2, r0, #160	; 0xa0
  103088:	e3a01000 	mov	r1, #0	; 0x0
  10308c:	e50030a0 	str	r3, [r0, #-160]
  103090:	e582100c 	str	r1, [r2, #12]
  103094:	e9820012 	stmib	r2, {r1, r4}
  103098:	e28dd00c 	add	sp, sp, #12	; 0xc
  10309c:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}
  1030a0:	00103f4c 	andeqs	r3, r0, ip, asr #30
  1030a4:	00200ba4 	eoreq	r0, r0, r4, lsr #23
  1030a8:	00200bac 	eoreq	r0, r0, ip, lsr #23
  1030ac:	00200ba8 	eoreq	r0, r0, r8, lsr #23
  1030b0:	00200bb0 	streqh	r0, [r0], -r0

001030b4 <_times>:
  1030b4:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
  1030b8:	e1a05000 	mov	r5, r0
  1030bc:	e3a04010 	mov	r4, #16	; 0x10
  1030c0:	e3a06000 	mov	r6, #0	; 0x0
  1030c4:	e1a00004 	mov	r0, r4
  1030c8:	e1a01006 	mov	r1, r6
  1030cc:	ef123456 	svc	0x00123456
  1030d0:	e1a04000 	mov	r4, r0
  1030d4:	e1550006 	cmp	r5, r6
  1030d8:	e1a00004 	mov	r0, r4
  1030dc:	1585600c 	strne	r6, [r5, #12]
  1030e0:	15854000 	strne	r4, [r5]
  1030e4:	15856004 	strne	r6, [r5, #4]
  1030e8:	15856008 	strne	r6, [r5, #8]
  1030ec:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}

001030f0 <_gettimeofday>:
  1030f0:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
  1030f4:	e2507000 	subs	r7, r0, #0	; 0x0
  1030f8:	e1a06001 	mov	r6, r1
  1030fc:	0a000007 	beq	103120 <_gettimeofday+0x30>
  103100:	e3a05011 	mov	r5, #17	; 0x11
  103104:	e3a04000 	mov	r4, #0	; 0x0
  103108:	e1a00005 	mov	r0, r5
  10310c:	e1a01004 	mov	r1, r4
  103110:	ef123456 	svc	0x00123456
  103114:	e1a05000 	mov	r5, r0
  103118:	e5874004 	str	r4, [r7, #4]
  10311c:	e5875000 	str	r5, [r7]
  103120:	e3a03000 	mov	r3, #0	; 0x0
  103124:	e1560003 	cmp	r6, r3
  103128:	e3a00000 	mov	r0, #0	; 0x0
  10312c:	15863004 	strne	r3, [r6, #4]
  103130:	15863000 	strne	r3, [r6]
  103134:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}

00103138 <_kill>:
  103138:	e92d4030 	stmdb	sp!, {r4, r5, lr}
  10313c:	e3a05802 	mov	r5, #131072	; 0x20000
  103140:	e2855026 	add	r5, r5, #38	; 0x26
  103144:	e3a04018 	mov	r4, #24	; 0x18
  103148:	e1a00004 	mov	r0, r4
  10314c:	e1a01005 	mov	r1, r5
  103150:	ef123456 	svc	0x00123456
  103154:	e1a04000 	mov	r4, r0
  103158:	e1a00004 	mov	r0, r4
  10315c:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00103160 <_exit>:
  103160:	e3a05802 	mov	r5, #131072	; 0x20000
  103164:	e2855026 	add	r5, r5, #38	; 0x26
  103168:	e3a04018 	mov	r4, #24	; 0x18
  10316c:	e1a00004 	mov	r0, r4
  103170:	e1a01005 	mov	r1, r5
  103174:	ef123456 	svc	0x00123456
  103178:	e1a04000 	mov	r4, r0
  10317c:	e12fff1e 	bx	lr

00103180 <__register_exitproc>:
  103180:	e59fc0d4 	ldr	ip, [pc, #212]	; 10325c <.text+0x325c>
  103184:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  103188:	e59c4000 	ldr	r4, [ip]
  10318c:	e594c148 	ldr	ip, [r4, #328]
  103190:	e35c0000 	cmp	ip, #0	; 0x0
  103194:	0284cf53 	addeq	ip, r4, #332	; 0x14c
  103198:	e1a07001 	mov	r7, r1
  10319c:	e59c1004 	ldr	r1, [ip, #4]
  1031a0:	0584c148 	streq	ip, [r4, #328]
  1031a4:	e351001f 	cmp	r1, #31	; 0x1f
  1031a8:	e1a05000 	mov	r5, r0
  1031ac:	e1a08002 	mov	r8, r2
  1031b0:	e1a06003 	mov	r6, r3
  1031b4:	ca00001a 	bgt	103224 <__register_exitproc+0xa4>
  1031b8:	e3550000 	cmp	r5, #0	; 0x0
  1031bc:	1a000005 	bne	1031d8 <__register_exitproc+0x58>
  1031c0:	e2812001 	add	r2, r1, #1	; 0x1
  1031c4:	e08c3101 	add	r3, ip, r1, lsl #2
  1031c8:	e3a00000 	mov	r0, #0	; 0x0
  1031cc:	e5837008 	str	r7, [r3, #8]
  1031d0:	e58c2004 	str	r2, [ip, #4]
  1031d4:	e8bd81f0 	ldmia	sp!, {r4, r5, r6, r7, r8, pc}
  1031d8:	e3a03001 	mov	r3, #1	; 0x1
  1031dc:	e1a0e113 	mov	lr, r3, lsl r1
  1031e0:	e28c0088 	add	r0, ip, #136	; 0x88
  1031e4:	e0803101 	add	r3, r0, r1, lsl #2
  1031e8:	e3550002 	cmp	r5, #2	; 0x2
  1031ec:	e5902100 	ldr	r2, [r0, #256]
  1031f0:	e5836080 	str	r6, [r3, #128]
  1031f4:	05903104 	ldreq	r3, [r0, #260]
  1031f8:	e182200e 	orr	r2, r2, lr
  1031fc:	0183300e 	orreq	r3, r3, lr
  103200:	e5802100 	str	r2, [r0, #256]
  103204:	05803104 	streq	r3, [r0, #260]
  103208:	e7808101 	str	r8, [r0, r1, lsl #2]
  10320c:	e2812001 	add	r2, r1, #1	; 0x1
  103210:	e08c3101 	add	r3, ip, r1, lsl #2
  103214:	e3a00000 	mov	r0, #0	; 0x0
  103218:	e5837008 	str	r7, [r3, #8]
  10321c:	e58c2004 	str	r2, [ip, #4]
  103220:	e8bd81f0 	ldmia	sp!, {r4, r5, r6, r7, r8, pc}
  103224:	e3a00e19 	mov	r0, #400	; 0x190
  103228:	ebfffa50 	bl	101b70 <malloc>
  10322c:	e3500000 	cmp	r0, #0	; 0x0
  103230:	03e00000 	mvneq	r0, #0	; 0x0
  103234:	08bd81f0 	ldmeqia	sp!, {r4, r5, r6, r7, r8, pc}
  103238:	e3a03000 	mov	r3, #0	; 0x0
  10323c:	e5942148 	ldr	r2, [r4, #328]
  103240:	e1a0c000 	mov	ip, r0
  103244:	e1a01003 	mov	r1, r3
  103248:	e880000c 	stmia	r0, {r2, r3}
  10324c:	e5840148 	str	r0, [r4, #328]
  103250:	e5803188 	str	r3, [r0, #392]
  103254:	e580318c 	str	r3, [r0, #396]
  103258:	eaffffd6 	b	1031b8 <__register_exitproc+0x38>
  10325c:	00103f44 	andeqs	r3, r0, r4, asr #30

00103260 <__call_exitprocs>:
  103260:	e59f3138 	ldr	r3, [pc, #312]	; 1033a0 <.text+0x33a0>
  103264:	e5933000 	ldr	r3, [r3]
  103268:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  10326c:	e5937148 	ldr	r7, [r3, #328]
  103270:	e3570000 	cmp	r7, #0	; 0x0
  103274:	e1a0b000 	mov	fp, r0
  103278:	e1a0a001 	mov	sl, r1
  10327c:	08bd8ff0 	ldmeqia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  103280:	e2839f52 	add	r9, r3, #328	; 0x148
  103284:	e5971004 	ldr	r1, [r7, #4]
  103288:	e2514001 	subs	r4, r1, #1	; 0x1
  10328c:	e2878088 	add	r8, r7, #136	; 0x88
  103290:	4a000029 	bmi	10333c <__call_exitprocs+0xdc>
  103294:	e1a02101 	mov	r2, r1, lsl #2
  103298:	e2823008 	add	r3, r2, #8	; 0x8
  10329c:	e0876003 	add	r6, r7, r3
  1032a0:	e0885002 	add	r5, r8, r2
  1032a4:	ea000007 	b	1032c8 <__call_exitprocs+0x68>
  1032a8:	e595307c 	ldr	r3, [r5, #124]
  1032ac:	e15a0003 	cmp	sl, r3
  1032b0:	0a000006 	beq	1032d0 <__call_exitprocs+0x70>
  1032b4:	e2444001 	sub	r4, r4, #1	; 0x1
  1032b8:	e3740001 	cmn	r4, #1	; 0x1
  1032bc:	e2455004 	sub	r5, r5, #4	; 0x4
  1032c0:	e2466004 	sub	r6, r6, #4	; 0x4
  1032c4:	0a00001c 	beq	10333c <__call_exitprocs+0xdc>
  1032c8:	e35a0000 	cmp	sl, #0	; 0x0
  1032cc:	1afffff5 	bne	1032a8 <__call_exitprocs+0x48>
  1032d0:	e2413001 	sub	r3, r1, #1	; 0x1
  1032d4:	e1530004 	cmp	r3, r4
  1032d8:	e516c004 	ldr	ip, [r6, #-4]
  1032dc:	05874004 	streq	r4, [r7, #4]
  1032e0:	13a03000 	movne	r3, #0	; 0x0
  1032e4:	15063004 	strne	r3, [r6, #-4]
  1032e8:	e35c0000 	cmp	ip, #0	; 0x0
  1032ec:	05971004 	ldreq	r1, [r7, #4]
  1032f0:	0affffef 	beq	1032b4 <__call_exitprocs+0x54>
  1032f4:	e3a03001 	mov	r3, #1	; 0x1
  1032f8:	e1a01413 	mov	r1, r3, lsl r4
  1032fc:	e5982100 	ldr	r2, [r8, #256]
  103300:	e1110002 	tst	r1, r2
  103304:	0a00001e 	beq	103384 <__call_exitprocs+0x124>
  103308:	e5983104 	ldr	r3, [r8, #260]
  10330c:	e1110003 	tst	r1, r3
  103310:	1a000016 	bne	103370 <__call_exitprocs+0x110>
  103314:	e5151004 	ldr	r1, [r5, #-4]
  103318:	e1a0000b 	mov	r0, fp
  10331c:	e2444001 	sub	r4, r4, #1	; 0x1
  103320:	e1a0e00f 	mov	lr, pc
  103324:	e12fff1c 	bx	ip
  103328:	e3740001 	cmn	r4, #1	; 0x1
  10332c:	e5971004 	ldr	r1, [r7, #4]
  103330:	e2455004 	sub	r5, r5, #4	; 0x4
  103334:	e2466004 	sub	r6, r6, #4	; 0x4
  103338:	1affffe2 	bne	1032c8 <__call_exitprocs+0x68>
  10333c:	e3510000 	cmp	r1, #0	; 0x0
  103340:	15973000 	ldrne	r3, [r7]
  103344:	1a000012 	bne	103394 <__call_exitprocs+0x134>
  103348:	e5973000 	ldr	r3, [r7]
  10334c:	e3530000 	cmp	r3, #0	; 0x0
  103350:	0a00000f 	beq	103394 <__call_exitprocs+0x134>
  103354:	e1a00007 	mov	r0, r7
  103358:	e5893000 	str	r3, [r9]
  10335c:	ebfff9fe 	bl	101b5c <free>
  103360:	e5997000 	ldr	r7, [r9]
  103364:	e3570000 	cmp	r7, #0	; 0x0
  103368:	1affffc5 	bne	103284 <__call_exitprocs+0x24>
  10336c:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  103370:	e5150004 	ldr	r0, [r5, #-4]
  103374:	e1a0e00f 	mov	lr, pc
  103378:	e12fff1c 	bx	ip
  10337c:	e5971004 	ldr	r1, [r7, #4]
  103380:	eaffffcb 	b	1032b4 <__call_exitprocs+0x54>
  103384:	e1a0e00f 	mov	lr, pc
  103388:	e12fff1c 	bx	ip
  10338c:	e5971004 	ldr	r1, [r7, #4]
  103390:	eaffffc7 	b	1032b4 <__call_exitprocs+0x54>
  103394:	e1a09007 	mov	r9, r7
  103398:	e1a07003 	mov	r7, r3
  10339c:	eafffff0 	b	103364 <__call_exitprocs+0x104>
  1033a0:	00103f44 	andeqs	r3, r0, r4, asr #30

001033a4 <__errno>:
  1033a4:	e59f3004 	ldr	r3, [pc, #4]	; 1033b0 <.text+0x33b0>
  1033a8:	e5930000 	ldr	r0, [r3]
  1033ac:	e12fff1e 	bx	lr
  1033b0:	00200184 	eoreq	r0, r0, r4, lsl #3

001033b4 <std>:
  1033b4:	e59f3044 	ldr	r3, [pc, #68]	; 103400 <.text+0x3400>
  1033b8:	e580302c 	str	r3, [r0, #44]
  1033bc:	e59f3040 	ldr	r3, [pc, #64]	; 103404 <.text+0x3404>
  1033c0:	e1c020be 	strh	r2, [r0, #14]
  1033c4:	e5803020 	str	r3, [r0, #32]
  1033c8:	e59f2038 	ldr	r2, [pc, #56]	; 103408 <.text+0x3408>
  1033cc:	e59f3038 	ldr	r3, [pc, #56]	; 10340c <.text+0x340c>
  1033d0:	e3a0c000 	mov	ip, #0	; 0x0
  1033d4:	e1c010bc 	strh	r1, [r0, #12]
  1033d8:	e580c018 	str	ip, [r0, #24]
  1033dc:	e5802024 	str	r2, [r0, #36]
  1033e0:	e5803028 	str	r3, [r0, #40]
  1033e4:	e580c000 	str	ip, [r0]
  1033e8:	e580c004 	str	ip, [r0, #4]
  1033ec:	e580c008 	str	ip, [r0, #8]
  1033f0:	e580c010 	str	ip, [r0, #16]
  1033f4:	e580c014 	str	ip, [r0, #20]
  1033f8:	e580001c 	str	r0, [r0, #28]
  1033fc:	e12fff1e 	bx	lr
  103400:	00103bc0 	andeqs	r3, r0, r0, asr #23
  103404:	00103c7c 	andeqs	r3, r0, ip, ror ip
  103408:	00103c1c 	andeqs	r3, r0, ip, lsl ip
  10340c:	00103bd4 	ldreqsb	r3, [r0], -r4

00103410 <__sfp_lock_acquire>:
  103410:	e12fff1e 	bx	lr

00103414 <__sfp_lock_release>:
  103414:	e12fff1e 	bx	lr

00103418 <__sinit_lock_acquire>:
  103418:	e12fff1e 	bx	lr

0010341c <__sinit_lock_release>:
  10341c:	e12fff1e 	bx	lr

00103420 <__sinit>:
  103420:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
  103424:	e590e038 	ldr	lr, [r0, #56]
  103428:	e25e2000 	subs	r2, lr, #0	; 0x0
  10342c:	e3a06001 	mov	r6, #1	; 0x1
  103430:	e3a01004 	mov	r1, #4	; 0x4
  103434:	e1a04000 	mov	r4, r0
  103438:	e2805fbb 	add	r5, r0, #748	; 0x2ec
  10343c:	e1a03000 	mov	r3, r0
  103440:	18bd8070 	ldmneia	sp!, {r4, r5, r6, pc}
  103444:	e59f0048 	ldr	r0, [pc, #72]	; 103494 <.text+0x3494>
  103448:	e3a0c003 	mov	ip, #3	; 0x3
  10344c:	e584003c 	str	r0, [r4, #60]
  103450:	e584c2e4 	str	ip, [r4, #740]
  103454:	e584e2e0 	str	lr, [r4, #736]
  103458:	e5940004 	ldr	r0, [r4, #4]
  10345c:	e58452e8 	str	r5, [r4, #744]
  103460:	e5846038 	str	r6, [r4, #56]
  103464:	ebffffd2 	bl	1033b4 <std>
  103468:	e1a02006 	mov	r2, r6
  10346c:	e5940008 	ldr	r0, [r4, #8]
  103470:	e1a03004 	mov	r3, r4
  103474:	e3a01009 	mov	r1, #9	; 0x9
  103478:	ebffffcd 	bl	1033b4 <std>
  10347c:	e594000c 	ldr	r0, [r4, #12]
  103480:	e1a03004 	mov	r3, r4
  103484:	e3a0100a 	mov	r1, #10	; 0xa
  103488:	e3a02002 	mov	r2, #2	; 0x2
  10348c:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
  103490:	eaffffc7 	b	1033b4 <std>
  103494:	001034d8 	ldreqsb	r3, [r0], -r8

00103498 <__fp_lock>:
  103498:	e3a00000 	mov	r0, #0	; 0x0
  10349c:	e12fff1e 	bx	lr

001034a0 <__fp_unlock>:
  1034a0:	e3a00000 	mov	r0, #0	; 0x0
  1034a4:	e12fff1e 	bx	lr

001034a8 <__fp_unlock_all>:
  1034a8:	e59f3008 	ldr	r3, [pc, #8]	; 1034b8 <.text+0x34b8>
  1034ac:	e59f1008 	ldr	r1, [pc, #8]	; 1034bc <.text+0x34bc>
  1034b0:	e5930000 	ldr	r0, [r3]
  1034b4:	ea000162 	b	103a44 <_fwalk>
  1034b8:	00200184 	eoreq	r0, r0, r4, lsl #3
  1034bc:	001034a0 	andeqs	r3, r0, r0, lsr #9

001034c0 <__fp_lock_all>:
  1034c0:	e59f3008 	ldr	r3, [pc, #8]	; 1034d0 <.text+0x34d0>
  1034c4:	e59f1008 	ldr	r1, [pc, #8]	; 1034d4 <.text+0x34d4>
  1034c8:	e5930000 	ldr	r0, [r3]
  1034cc:	ea00015c 	b	103a44 <_fwalk>
  1034d0:	00200184 	eoreq	r0, r0, r4, lsl #3
  1034d4:	00103498 	muleqs	r0, r8, r4

001034d8 <_cleanup_r>:
  1034d8:	e59f1000 	ldr	r1, [pc, #0]	; 1034e0 <.text+0x34e0>
  1034dc:	ea000158 	b	103a44 <_fwalk>
  1034e0:	00103dd4 	ldreqsb	r3, [r0], -r4

001034e4 <_cleanup>:
  1034e4:	e59f3004 	ldr	r3, [pc, #4]	; 1034f0 <.text+0x34f0>
  1034e8:	e5930000 	ldr	r0, [r3]
  1034ec:	eafffff9 	b	1034d8 <_cleanup_r>
  1034f0:	00103f44 	andeqs	r3, r0, r4, asr #30

001034f4 <__sfmoreglue>:
  1034f4:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
  1034f8:	e0814081 	add	r4, r1, r1, lsl #1
  1034fc:	e0614184 	rsb	r4, r1, r4, lsl #3
  103500:	e1a04104 	mov	r4, r4, lsl #2
  103504:	e1a06001 	mov	r6, r1
  103508:	e284100c 	add	r1, r4, #12	; 0xc
  10350c:	ebfff99c 	bl	101b84 <_malloc_r>
  103510:	e250c000 	subs	ip, r0, #0	; 0x0
  103514:	e3a0e000 	mov	lr, #0	; 0x0
  103518:	e28c300c 	add	r3, ip, #12	; 0xc
  10351c:	e1a0500c 	mov	r5, ip
  103520:	e1a00003 	mov	r0, r3
  103524:	e1a0100e 	mov	r1, lr
  103528:	e1a02004 	mov	r2, r4
  10352c:	158c6004 	strne	r6, [ip, #4]
  103530:	158ce000 	strne	lr, [ip]
  103534:	158c3008 	strne	r3, [ip, #8]
  103538:	1bfffb6d 	blne	1022f4 <memset>
  10353c:	e1a00005 	mov	r0, r5
  103540:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}

00103544 <__sfp>:
  103544:	e59f30d0 	ldr	r3, [pc, #208]	; 10361c <.text+0x361c>
  103548:	e92d4030 	stmdb	sp!, {r4, r5, lr}
  10354c:	e5934000 	ldr	r4, [r3]
  103550:	e5942038 	ldr	r2, [r4, #56]
  103554:	e3520000 	cmp	r2, #0	; 0x0
  103558:	e1a05000 	mov	r5, r0
  10355c:	0a000021 	beq	1035e8 <__sfp+0xa4>
  103560:	e2844e2e 	add	r4, r4, #736	; 0x2e0
  103564:	e5942004 	ldr	r2, [r4, #4]
  103568:	e3520001 	cmp	r2, #1	; 0x1
  10356c:	e5940008 	ldr	r0, [r4, #8]
  103570:	5a000004 	bpl	103588 <__sfp+0x44>
  103574:	ea000016 	b	1035d4 <__sfp+0x90>
  103578:	e3520001 	cmp	r2, #1	; 0x1
  10357c:	e280005c 	add	r0, r0, #92	; 0x5c
  103580:	e2422001 	sub	r2, r2, #1	; 0x1
  103584:	0a000012 	beq	1035d4 <__sfp+0x90>
  103588:	e1d030fc 	ldrsh	r3, [r0, #12]
  10358c:	e3530000 	cmp	r3, #0	; 0x0
  103590:	1afffff8 	bne	103578 <__sfp+0x34>
  103594:	e3a03000 	mov	r3, #0	; 0x0
  103598:	e5803048 	str	r3, [r0, #72]
  10359c:	e5803000 	str	r3, [r0]
  1035a0:	e5803008 	str	r3, [r0, #8]
  1035a4:	e5803004 	str	r3, [r0, #4]
  1035a8:	e5803010 	str	r3, [r0, #16]
  1035ac:	e5803014 	str	r3, [r0, #20]
  1035b0:	e5803018 	str	r3, [r0, #24]
  1035b4:	e5803030 	str	r3, [r0, #48]
  1035b8:	e5803034 	str	r3, [r0, #52]
  1035bc:	e5803044 	str	r3, [r0, #68]
  1035c0:	e3e03000 	mvn	r3, #0	; 0x0
  1035c4:	e1c030be 	strh	r3, [r0, #14]
  1035c8:	e3a03001 	mov	r3, #1	; 0x1
  1035cc:	e1c030bc 	strh	r3, [r0, #12]
  1035d0:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
  1035d4:	e5940000 	ldr	r0, [r4]
  1035d8:	e3500000 	cmp	r0, #0	; 0x0
  1035dc:	0a000004 	beq	1035f4 <__sfp+0xb0>
  1035e0:	e1a04000 	mov	r4, r0
  1035e4:	eaffffde 	b	103564 <__sfp+0x20>
  1035e8:	e1a00004 	mov	r0, r4
  1035ec:	ebffff8b 	bl	103420 <__sinit>
  1035f0:	eaffffda 	b	103560 <__sfp+0x1c>
  1035f4:	e1a00005 	mov	r0, r5
  1035f8:	e3a01004 	mov	r1, #4	; 0x4
  1035fc:	ebffffbc 	bl	1034f4 <__sfmoreglue>
  103600:	e3500000 	cmp	r0, #0	; 0x0
  103604:	e5840000 	str	r0, [r4]
  103608:	1afffff4 	bne	1035e0 <__sfp+0x9c>
  10360c:	e3a0300c 	mov	r3, #12	; 0xc
  103610:	e3a00000 	mov	r0, #0	; 0x0
  103614:	e5853000 	str	r3, [r5]
  103618:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
  10361c:	00103f44 	andeqs	r3, r0, r4, asr #30

00103620 <_malloc_trim_r>:
  103620:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
  103624:	e59f70e4 	ldr	r7, [pc, #228]	; 103710 <.text+0x3710>
  103628:	e1a04001 	mov	r4, r1
  10362c:	e1a05000 	mov	r5, r0
  103630:	ebfffb55 	bl	10238c <__malloc_lock>
  103634:	e5973008 	ldr	r3, [r7, #8]
  103638:	e5932004 	ldr	r2, [r3, #4]
  10363c:	e3c26003 	bic	r6, r2, #3	; 0x3
  103640:	e0644006 	rsb	r4, r4, r6
  103644:	e2844efe 	add	r4, r4, #4064	; 0xfe0
  103648:	e284400f 	add	r4, r4, #15	; 0xf
  10364c:	e1a04624 	mov	r4, r4, lsr #12
  103650:	e2444001 	sub	r4, r4, #1	; 0x1
  103654:	e1a04604 	mov	r4, r4, lsl #12
  103658:	e3540a01 	cmp	r4, #4096	; 0x1000
  10365c:	e3a01000 	mov	r1, #0	; 0x0
  103660:	e1a00005 	mov	r0, r5
  103664:	ba000006 	blt	103684 <_malloc_trim_r+0x64>
  103668:	ebfff364 	bl	100400 <_sbrk_r>
  10366c:	e5973008 	ldr	r3, [r7, #8]
  103670:	e0863003 	add	r3, r6, r3
  103674:	e1500003 	cmp	r0, r3
  103678:	e2641000 	rsb	r1, r4, #0	; 0x0
  10367c:	e1a00005 	mov	r0, r5
  103680:	0a000002 	beq	103690 <_malloc_trim_r+0x70>
  103684:	ebfffb41 	bl	102390 <__malloc_unlock>
  103688:	e3a00000 	mov	r0, #0	; 0x0
  10368c:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
  103690:	ebfff35a 	bl	100400 <_sbrk_r>
  103694:	e0643006 	rsb	r3, r4, r6
  103698:	e3700001 	cmn	r0, #1	; 0x1
  10369c:	e3a01000 	mov	r1, #0	; 0x0
  1036a0:	e59fe06c 	ldr	lr, [pc, #108]	; 103714 <.text+0x3714>
  1036a4:	e383c001 	orr	ip, r3, #1	; 0x1
  1036a8:	e1a00005 	mov	r0, r5
  1036ac:	0a000008 	beq	1036d4 <_malloc_trim_r+0xb4>
  1036b0:	e59e3000 	ldr	r3, [lr]
  1036b4:	e5972008 	ldr	r2, [r7, #8]
  1036b8:	e0643003 	rsb	r3, r4, r3
  1036bc:	e1a00005 	mov	r0, r5
  1036c0:	e582c004 	str	ip, [r2, #4]
  1036c4:	e58e3000 	str	r3, [lr]
  1036c8:	ebfffb30 	bl	102390 <__malloc_unlock>
  1036cc:	e3a00001 	mov	r0, #1	; 0x1
  1036d0:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
  1036d4:	ebfff349 	bl	100400 <_sbrk_r>
  1036d8:	e5971008 	ldr	r1, [r7, #8]
  1036dc:	e1a0e000 	mov	lr, r0
  1036e0:	e061300e 	rsb	r3, r1, lr
  1036e4:	e353000f 	cmp	r3, #15	; 0xf
  1036e8:	e1a00005 	mov	r0, r5
  1036ec:	e383c001 	orr	ip, r3, #1	; 0x1
  1036f0:	daffffe3 	ble	103684 <_malloc_trim_r+0x64>
  1036f4:	e59f301c 	ldr	r3, [pc, #28]	; 103718 <.text+0x3718>
  1036f8:	e5932000 	ldr	r2, [r3]
  1036fc:	e59f3010 	ldr	r3, [pc, #16]	; 103714 <.text+0x3714>
  103700:	e062200e 	rsb	r2, r2, lr
  103704:	e5832000 	str	r2, [r3]
  103708:	e581c004 	str	ip, [r1, #4]
  10370c:	eaffffdc 	b	103684 <_malloc_trim_r+0x64>
  103710:	00200588 	eoreq	r0, r0, r8, lsl #11
  103714:	00200b78 	eoreq	r0, r0, r8, ror fp
  103718:	00200994 	mlaeq	r0, r4, r9, r0

0010371c <_free_r>:
  10371c:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
  103720:	e2514000 	subs	r4, r1, #0	; 0x0
  103724:	e1a08000 	mov	r8, r0
  103728:	08bd85f0 	ldmeqia	sp!, {r4, r5, r6, r7, r8, sl, pc}
  10372c:	ebfffb16 	bl	10238c <__malloc_lock>
  103730:	e244e008 	sub	lr, r4, #8	; 0x8
  103734:	e59e0004 	ldr	r0, [lr, #4]
  103738:	e59f726c 	ldr	r7, [pc, #620]	; 1039ac <.text+0x39ac>
  10373c:	e3c01001 	bic	r1, r0, #1	; 0x1
  103740:	e08ec001 	add	ip, lr, r1
  103744:	e5973008 	ldr	r3, [r7, #8]
  103748:	e59c2004 	ldr	r2, [ip, #4]
  10374c:	e15c0003 	cmp	ip, r3
  103750:	e3c25003 	bic	r5, r2, #3	; 0x3
  103754:	e1a0a007 	mov	sl, r7
  103758:	0a000077 	beq	10393c <_free_r+0x220>
  10375c:	e2106001 	ands	r6, r0, #1	; 0x1
  103760:	e58c5004 	str	r5, [ip, #4]
  103764:	13a00000 	movne	r0, #0	; 0x0
  103768:	0a000018 	beq	1037d0 <_free_r+0xb4>
  10376c:	e08c3005 	add	r3, ip, r5
  103770:	e5932004 	ldr	r2, [r3, #4]
  103774:	e3120001 	tst	r2, #1	; 0x1
  103778:	0a000007 	beq	10379c <_free_r+0x80>
  10377c:	e3813001 	orr	r3, r1, #1	; 0x1
  103780:	e3500000 	cmp	r0, #0	; 0x0
  103784:	e58e3004 	str	r3, [lr, #4]
  103788:	e781100e 	str	r1, [r1, lr]
  10378c:	0a00001f 	beq	103810 <_free_r+0xf4>
  103790:	e1a00008 	mov	r0, r8
  103794:	e8bd45f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, lr}
  103798:	eafffafc 	b	102390 <__malloc_unlock>
  10379c:	e3500000 	cmp	r0, #0	; 0x0
  1037a0:	e0811005 	add	r1, r1, r5
  1037a4:	159c2008 	ldrne	r2, [ip, #8]
  1037a8:	0a00004a 	beq	1038d8 <_free_r+0x1bc>
  1037ac:	e59c300c 	ldr	r3, [ip, #12]
  1037b0:	e3500000 	cmp	r0, #0	; 0x0
  1037b4:	e5832008 	str	r2, [r3, #8]
  1037b8:	e582300c 	str	r3, [r2, #12]
  1037bc:	e3813001 	orr	r3, r1, #1	; 0x1
  1037c0:	e58e3004 	str	r3, [lr, #4]
  1037c4:	e781100e 	str	r1, [r1, lr]
  1037c8:	1afffff0 	bne	103790 <_free_r+0x74>
  1037cc:	ea00000f 	b	103810 <_free_r+0xf4>
  1037d0:	e5142008 	ldr	r2, [r4, #-8]
  1037d4:	e062e00e 	rsb	lr, r2, lr
  1037d8:	e59e0008 	ldr	r0, [lr, #8]
  1037dc:	e2873008 	add	r3, r7, #8	; 0x8
  1037e0:	e1500003 	cmp	r0, r3
  1037e4:	159e300c 	ldrne	r3, [lr, #12]
  1037e8:	15830008 	strne	r0, [r3, #8]
  1037ec:	1580300c 	strne	r3, [r0, #12]
  1037f0:	e08c3005 	add	r3, ip, r5
  1037f4:	e0811002 	add	r1, r1, r2
  1037f8:	e5932004 	ldr	r2, [r3, #4]
  1037fc:	03a00001 	moveq	r0, #1	; 0x1
  103800:	11a00006 	movne	r0, r6
  103804:	e3120001 	tst	r2, #1	; 0x1
  103808:	1affffdb 	bne	10377c <_free_r+0x60>
  10380c:	eaffffe2 	b	10379c <_free_r+0x80>
  103810:	e3510c02 	cmp	r1, #512	; 0x200
  103814:	3a00003b 	bcc	103908 <_free_r+0x1ec>
  103818:	e1b024a1 	movs	r2, r1, lsr #9
  10381c:	01a021a1 	moveq	r2, r1, lsr #3
  103820:	01a03182 	moveq	r3, r2, lsl #3
  103824:	0a00001a 	beq	103894 <_free_r+0x178>
  103828:	e3520004 	cmp	r2, #4	; 0x4
  10382c:	91a03321 	movls	r3, r1, lsr #6
  103830:	92832038 	addls	r2, r3, #56	; 0x38
  103834:	91a03182 	movls	r3, r2, lsl #3
  103838:	9a000015 	bls	103894 <_free_r+0x178>
  10383c:	e3520014 	cmp	r2, #20	; 0x14
  103840:	9282205b 	addls	r2, r2, #91	; 0x5b
  103844:	91a03182 	movls	r3, r2, lsl #3
  103848:	9a000011 	bls	103894 <_free_r+0x178>
  10384c:	e3520054 	cmp	r2, #84	; 0x54
  103850:	91a03621 	movls	r3, r1, lsr #12
  103854:	9283206e 	addls	r2, r3, #110	; 0x6e
  103858:	91a03182 	movls	r3, r2, lsl #3
  10385c:	9a00000c 	bls	103894 <_free_r+0x178>
  103860:	e3520f55 	cmp	r2, #340	; 0x154
  103864:	91a037a1 	movls	r3, r1, lsr #15
  103868:	92832077 	addls	r2, r3, #119	; 0x77
  10386c:	91a03182 	movls	r3, r2, lsl #3
  103870:	9a000007 	bls	103894 <_free_r+0x178>
  103874:	e3a03e55 	mov	r3, #1360	; 0x550
  103878:	e2833004 	add	r3, r3, #4	; 0x4
  10387c:	e1520003 	cmp	r2, r3
  103880:	91a03921 	movls	r3, r1, lsr #18
  103884:	9283207c 	addls	r2, r3, #124	; 0x7c
  103888:	83a0207e 	movhi	r2, #126	; 0x7e
  10388c:	82433f59 	subhi	r3, r3, #356	; 0x164
  103890:	91a03182 	movls	r3, r2, lsl #3
  103894:	e083c00a 	add	ip, r3, sl
  103898:	e59c0008 	ldr	r0, [ip, #8]
  10389c:	e15c0000 	cmp	ip, r0
  1038a0:	0a00003b 	beq	103994 <_free_r+0x278>
  1038a4:	e5903004 	ldr	r3, [r0, #4]
  1038a8:	e3c33003 	bic	r3, r3, #3	; 0x3
  1038ac:	e1510003 	cmp	r1, r3
  1038b0:	2a000002 	bcs	1038c0 <_free_r+0x1a4>
  1038b4:	e5900008 	ldr	r0, [r0, #8]
  1038b8:	e15c0000 	cmp	ip, r0
  1038bc:	1afffff8 	bne	1038a4 <_free_r+0x188>
  1038c0:	e590c00c 	ldr	ip, [r0, #12]
  1038c4:	e58ec00c 	str	ip, [lr, #12]
  1038c8:	e58e0008 	str	r0, [lr, #8]
  1038cc:	e580e00c 	str	lr, [r0, #12]
  1038d0:	e58ce008 	str	lr, [ip, #8]
  1038d4:	eaffffad 	b	103790 <_free_r+0x74>
  1038d8:	e59c2008 	ldr	r2, [ip, #8]
  1038dc:	e59f30cc 	ldr	r3, [pc, #204]	; 1039b0 <.text+0x39b0>
  1038e0:	e1520003 	cmp	r2, r3
  1038e4:	1affffb0 	bne	1037ac <_free_r+0x90>
  1038e8:	e3813001 	orr	r3, r1, #1	; 0x1
  1038ec:	e582e00c 	str	lr, [r2, #12]
  1038f0:	e582e008 	str	lr, [r2, #8]
  1038f4:	e781100e 	str	r1, [r1, lr]
  1038f8:	e58e3004 	str	r3, [lr, #4]
  1038fc:	e58e2008 	str	r2, [lr, #8]
  103900:	e58e200c 	str	r2, [lr, #12]
  103904:	eaffffa1 	b	103790 <_free_r+0x74>
  103908:	e1a011a1 	mov	r1, r1, lsr #3
  10390c:	e5972004 	ldr	r2, [r7, #4]
  103910:	e1a00121 	mov	r0, r1, lsr #2
  103914:	e3a03001 	mov	r3, #1	; 0x1
  103918:	e1822013 	orr	r2, r2, r3, lsl r0
  10391c:	e08a1181 	add	r1, sl, r1, lsl #3
  103920:	e5913008 	ldr	r3, [r1, #8]
  103924:	e58e100c 	str	r1, [lr, #12]
  103928:	e58e3008 	str	r3, [lr, #8]
  10392c:	e5872004 	str	r2, [r7, #4]
  103930:	e583e00c 	str	lr, [r3, #12]
  103934:	e581e008 	str	lr, [r1, #8]
  103938:	eaffff94 	b	103790 <_free_r+0x74>
  10393c:	e3100001 	tst	r0, #1	; 0x1
  103940:	e0810005 	add	r0, r1, r5
  103944:	1a000006 	bne	103964 <_free_r+0x248>
  103948:	e5141008 	ldr	r1, [r4, #-8]
  10394c:	e061e00e 	rsb	lr, r1, lr
  103950:	e59e200c 	ldr	r2, [lr, #12]
  103954:	e59e3008 	ldr	r3, [lr, #8]
  103958:	e5823008 	str	r3, [r2, #8]
  10395c:	e583200c 	str	r2, [r3, #12]
  103960:	e0800001 	add	r0, r0, r1
  103964:	e59f3048 	ldr	r3, [pc, #72]	; 1039b4 <.text+0x39b4>
  103968:	e5932000 	ldr	r2, [r3]
  10396c:	e3803001 	orr	r3, r0, #1	; 0x1
  103970:	e1500002 	cmp	r0, r2
  103974:	e587e008 	str	lr, [r7, #8]
  103978:	e58e3004 	str	r3, [lr, #4]
  10397c:	3affff83 	bcc	103790 <_free_r+0x74>
  103980:	e59f3030 	ldr	r3, [pc, #48]	; 1039b8 <.text+0x39b8>
  103984:	e1a00008 	mov	r0, r8
  103988:	e5931000 	ldr	r1, [r3]
  10398c:	ebffff23 	bl	103620 <_malloc_trim_r>
  103990:	eaffff7e 	b	103790 <_free_r+0x74>
  103994:	e5973004 	ldr	r3, [r7, #4]
  103998:	e1a01122 	mov	r1, r2, lsr #2
  10399c:	e3a02001 	mov	r2, #1	; 0x1
  1039a0:	e1833112 	orr	r3, r3, r2, lsl r1
  1039a4:	e5873004 	str	r3, [r7, #4]
  1039a8:	eaffffc5 	b	1038c4 <_free_r+0x1a8>
  1039ac:	00200588 	eoreq	r0, r0, r8, lsl #11
  1039b0:	00200590 	mlaeq	r0, r0, r5, r0
  1039b4:	00200990 	mlaeq	r0, r0, r9, r0
  1039b8:	00200b6c 	eoreq	r0, r0, ip, ror #22

001039bc <_fwalk_reent>:
  1039bc:	e92d47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  1039c0:	e1a08000 	mov	r8, r0
  1039c4:	e1a0a001 	mov	sl, r1
  1039c8:	ebfffe90 	bl	103410 <__sfp_lock_acquire>
  1039cc:	e2987e2e 	adds	r7, r8, #736	; 0x2e0
  1039d0:	01a09007 	moveq	r9, r7
  1039d4:	0a000017 	beq	103a38 <_fwalk_reent+0x7c>
  1039d8:	e3a09000 	mov	r9, #0	; 0x0
  1039dc:	e5976004 	ldr	r6, [r7, #4]
  1039e0:	e3560001 	cmp	r6, #1	; 0x1
  1039e4:	e5974008 	ldr	r4, [r7, #8]
  1039e8:	4a00000f 	bmi	103a2c <_fwalk_reent+0x70>
  1039ec:	e3a05000 	mov	r5, #0	; 0x0
  1039f0:	e1d430fc 	ldrsh	r3, [r4, #12]
  1039f4:	e3530000 	cmp	r3, #0	; 0x0
  1039f8:	e2855001 	add	r5, r5, #1	; 0x1
  1039fc:	0a000007 	beq	103a20 <_fwalk_reent+0x64>
  103a00:	e1d430fe 	ldrsh	r3, [r4, #14]
  103a04:	e3730001 	cmn	r3, #1	; 0x1
  103a08:	e1a01004 	mov	r1, r4
  103a0c:	e1a00008 	mov	r0, r8
  103a10:	0a000002 	beq	103a20 <_fwalk_reent+0x64>
  103a14:	e1a0e00f 	mov	lr, pc
  103a18:	e12fff1a 	bx	sl
  103a1c:	e1899000 	orr	r9, r9, r0
  103a20:	e1560005 	cmp	r6, r5
  103a24:	e284405c 	add	r4, r4, #92	; 0x5c
  103a28:	1afffff0 	bne	1039f0 <_fwalk_reent+0x34>
  103a2c:	e5977000 	ldr	r7, [r7]
  103a30:	e3570000 	cmp	r7, #0	; 0x0
  103a34:	1affffe8 	bne	1039dc <_fwalk_reent+0x20>
  103a38:	ebfffe75 	bl	103414 <__sfp_lock_release>
  103a3c:	e1a00009 	mov	r0, r9
  103a40:	e8bd87f0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00103a44 <_fwalk>:
  103a44:	e92d45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
  103a48:	e1a04000 	mov	r4, r0
  103a4c:	e1a08001 	mov	r8, r1
  103a50:	ebfffe6e 	bl	103410 <__sfp_lock_acquire>
  103a54:	e2947e2e 	adds	r7, r4, #736	; 0x2e0
  103a58:	01a0a007 	moveq	sl, r7
  103a5c:	0a000016 	beq	103abc <_fwalk+0x78>
  103a60:	e3a0a000 	mov	sl, #0	; 0x0
  103a64:	e5976004 	ldr	r6, [r7, #4]
  103a68:	e3560001 	cmp	r6, #1	; 0x1
  103a6c:	e5974008 	ldr	r4, [r7, #8]
  103a70:	4a00000e 	bmi	103ab0 <_fwalk+0x6c>
  103a74:	e3a05000 	mov	r5, #0	; 0x0
  103a78:	e1d430fc 	ldrsh	r3, [r4, #12]
  103a7c:	e3530000 	cmp	r3, #0	; 0x0
  103a80:	e2855001 	add	r5, r5, #1	; 0x1
  103a84:	0a000006 	beq	103aa4 <_fwalk+0x60>
  103a88:	e1d430fe 	ldrsh	r3, [r4, #14]
  103a8c:	e3730001 	cmn	r3, #1	; 0x1
  103a90:	e1a00004 	mov	r0, r4
  103a94:	0a000002 	beq	103aa4 <_fwalk+0x60>
  103a98:	e1a0e00f 	mov	lr, pc
  103a9c:	e12fff18 	bx	r8
  103aa0:	e18aa000 	orr	sl, sl, r0
  103aa4:	e1560005 	cmp	r6, r5
  103aa8:	e284405c 	add	r4, r4, #92	; 0x5c
  103aac:	1afffff1 	bne	103a78 <_fwalk+0x34>
  103ab0:	e5977000 	ldr	r7, [r7]
  103ab4:	e3570000 	cmp	r7, #0	; 0x0
  103ab8:	1affffe9 	bne	103a64 <_fwalk+0x20>
  103abc:	ebfffe54 	bl	103414 <__sfp_lock_release>
  103ac0:	e1a0000a 	mov	r0, sl
  103ac4:	e8bd85f0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, pc}

00103ac8 <memmove>:
  103ac8:	e1500001 	cmp	r0, r1
  103acc:	e92d4010 	stmdb	sp!, {r4, lr}
  103ad0:	e1a0c000 	mov	ip, r0
  103ad4:	e1a04001 	mov	r4, r1
  103ad8:	e1a0e002 	mov	lr, r2
  103adc:	9a000010 	bls	103b24 <memmove+0x5c>
  103ae0:	e0813002 	add	r3, r1, r2
  103ae4:	e1500003 	cmp	r0, r3
  103ae8:	2a00000d 	bcs	103b24 <memmove+0x5c>
  103aec:	e3520000 	cmp	r2, #0	; 0x0
  103af0:	08bd8010 	ldmeqia	sp!, {r4, pc}
  103af4:	e0801002 	add	r1, r0, r2
  103af8:	e1a0c003 	mov	ip, r3
  103afc:	e0622001 	rsb	r2, r2, r1
  103b00:	e57c3001 	ldrb	r3, [ip, #-1]!
  103b04:	e5613001 	strb	r3, [r1, #-1]!
  103b08:	e1520001 	cmp	r2, r1
  103b0c:	08bd8010 	ldmeqia	sp!, {r4, pc}
  103b10:	e57c3001 	ldrb	r3, [ip, #-1]!
  103b14:	e5613001 	strb	r3, [r1, #-1]!
  103b18:	e1520001 	cmp	r2, r1
  103b1c:	1afffff7 	bne	103b00 <memmove+0x38>
  103b20:	e8bd8010 	ldmia	sp!, {r4, pc}
  103b24:	e35e000f 	cmp	lr, #15	; 0xf
  103b28:	8a000008 	bhi	103b50 <memmove+0x88>
  103b2c:	e35e0000 	cmp	lr, #0	; 0x0
  103b30:	08bd8010 	ldmeqia	sp!, {r4, pc}
  103b34:	e3a02000 	mov	r2, #0	; 0x0
  103b38:	e4d13001 	ldrb	r3, [r1], #1
  103b3c:	e7c2300c 	strb	r3, [r2, ip]
  103b40:	e2822001 	add	r2, r2, #1	; 0x1
  103b44:	e152000e 	cmp	r2, lr
  103b48:	1afffffa 	bne	103b38 <memmove+0x70>
  103b4c:	e8bd8010 	ldmia	sp!, {r4, pc}
  103b50:	e1843000 	orr	r3, r4, r0
  103b54:	e3130003 	tst	r3, #3	; 0x3
  103b58:	1afffff3 	bne	103b2c <memmove+0x64>
  103b5c:	e1a01004 	mov	r1, r4
  103b60:	e1a0c000 	mov	ip, r0
  103b64:	e5913000 	ldr	r3, [r1]
  103b68:	e58c3000 	str	r3, [ip]
  103b6c:	e5912004 	ldr	r2, [r1, #4]
  103b70:	e58c2004 	str	r2, [ip, #4]
  103b74:	e5913008 	ldr	r3, [r1, #8]
  103b78:	e58c3008 	str	r3, [ip, #8]
  103b7c:	e24ee010 	sub	lr, lr, #16	; 0x10
  103b80:	e591300c 	ldr	r3, [r1, #12]
  103b84:	e35e000f 	cmp	lr, #15	; 0xf
  103b88:	e58c300c 	str	r3, [ip, #12]
  103b8c:	e2811010 	add	r1, r1, #16	; 0x10
  103b90:	e28cc010 	add	ip, ip, #16	; 0x10
  103b94:	8afffff2 	bhi	103b64 <memmove+0x9c>
  103b98:	e35e0003 	cmp	lr, #3	; 0x3
  103b9c:	9affffe2 	bls	103b2c <memmove+0x64>
  103ba0:	e24ee004 	sub	lr, lr, #4	; 0x4
  103ba4:	e4913004 	ldr	r3, [r1], #4
  103ba8:	e35e0003 	cmp	lr, #3	; 0x3
  103bac:	e48c3004 	str	r3, [ip], #4
  103bb0:	8afffffa 	bhi	103ba0 <memmove+0xd8>
  103bb4:	e35e0000 	cmp	lr, #0	; 0x0
  103bb8:	1affffdd 	bne	103b34 <memmove+0x6c>
  103bbc:	e8bd8010 	ldmia	sp!, {r4, pc}

00103bc0 <__sclose>:
  103bc0:	e59f3008 	ldr	r3, [pc, #8]	; 103bd0 <.text+0x3bd0>
  103bc4:	e1d010fe 	ldrsh	r1, [r0, #14]
  103bc8:	e5930000 	ldr	r0, [r3]
  103bcc:	eafff203 	b	1003e0 <_close_r>
  103bd0:	00200184 	eoreq	r0, r0, r4, lsl #3

00103bd4 <__sseek>:
  103bd4:	e1a03002 	mov	r3, r2
  103bd8:	e59f2038 	ldr	r2, [pc, #56]	; 103c18 <.text+0x3c18>
  103bdc:	e92d4010 	stmdb	sp!, {r4, lr}
  103be0:	e1a04000 	mov	r4, r0
  103be4:	e5920000 	ldr	r0, [r2]
  103be8:	e1a02001 	mov	r2, r1
  103bec:	e1d410fe 	ldrsh	r1, [r4, #14]
  103bf0:	ebfff1fc 	bl	1003e8 <_lseek_r>
  103bf4:	e3700001 	cmn	r0, #1	; 0x1
  103bf8:	01d430bc 	ldreqh	r3, [r4, #12]
  103bfc:	11d430bc 	ldrneh	r3, [r4, #12]
  103c00:	03c33a01 	biceq	r3, r3, #4096	; 0x1000
  103c04:	13833a01 	orrne	r3, r3, #4096	; 0x1000
  103c08:	01c430bc 	streqh	r3, [r4, #12]
  103c0c:	11c430bc 	strneh	r3, [r4, #12]
  103c10:	15840050 	strne	r0, [r4, #80]
  103c14:	e8bd8010 	ldmia	sp!, {r4, pc}
  103c18:	00200184 	eoreq	r0, r0, r4, lsl #3

00103c1c <__swrite>:
  103c1c:	e1d0c0bc 	ldrh	ip, [r0, #12]
  103c20:	e31c0c01 	tst	ip, #256	; 0x100
  103c24:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
  103c28:	e3a03002 	mov	r3, #2	; 0x2
  103c2c:	e59f7044 	ldr	r7, [pc, #68]	; 103c78 <.text+0x3c78>
  103c30:	e1a06002 	mov	r6, r2
  103c34:	e1a04000 	mov	r4, r0
  103c38:	e1a05001 	mov	r5, r1
  103c3c:	e3a02000 	mov	r2, #0	; 0x0
  103c40:	059f7030 	ldreq	r7, [pc, #48]	; 103c78 <.text+0x3c78>
  103c44:	0a000003 	beq	103c58 <__swrite+0x3c>
  103c48:	e5970000 	ldr	r0, [r7]
  103c4c:	e1d410fe 	ldrsh	r1, [r4, #14]
  103c50:	ebfff1e4 	bl	1003e8 <_lseek_r>
  103c54:	e1d4c0bc 	ldrh	ip, [r4, #12]
  103c58:	e5970000 	ldr	r0, [r7]
  103c5c:	e1d410fe 	ldrsh	r1, [r4, #14]
  103c60:	e3ccca01 	bic	ip, ip, #4096	; 0x1000
  103c64:	e1a02005 	mov	r2, r5
  103c68:	e1a03006 	mov	r3, r6
  103c6c:	e1c4c0bc 	strh	ip, [r4, #12]
  103c70:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
  103c74:	eafff1ed 	b	100430 <_write_r>
  103c78:	00200184 	eoreq	r0, r0, r4, lsl #3

00103c7c <__sread>:
  103c7c:	e1a03002 	mov	r3, r2
  103c80:	e59f2034 	ldr	r2, [pc, #52]	; 103cbc <.text+0x3cbc>
  103c84:	e92d4010 	stmdb	sp!, {r4, lr}
  103c88:	e1a04000 	mov	r4, r0
  103c8c:	e5920000 	ldr	r0, [r2]
  103c90:	e1a02001 	mov	r2, r1
  103c94:	e1d410fe 	ldrsh	r1, [r4, #14]
  103c98:	ebfff1f5 	bl	100474 <_read_r>
  103c9c:	e3500000 	cmp	r0, #0	; 0x0
  103ca0:	a5943050 	ldrge	r3, [r4, #80]
  103ca4:	b1d430bc 	ldrlth	r3, [r4, #12]
  103ca8:	a0833000 	addge	r3, r3, r0
  103cac:	b3c33a01 	biclt	r3, r3, #4096	; 0x1000
  103cb0:	a5843050 	strge	r3, [r4, #80]
  103cb4:	b1c430bc 	strlth	r3, [r4, #12]
  103cb8:	e8bd8010 	ldmia	sp!, {r4, pc}
  103cbc:	00200184 	eoreq	r0, r0, r4, lsl #3

00103cc0 <_fclose_r>:
  103cc0:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
  103cc4:	e2515000 	subs	r5, r1, #0	; 0x0
  103cc8:	e1a06000 	mov	r6, r0
  103ccc:	01a04005 	moveq	r4, r5
  103cd0:	0a00002b 	beq	103d84 <_fclose_r+0xc4>
  103cd4:	ebfffdcd 	bl	103410 <__sfp_lock_acquire>
  103cd8:	e3560000 	cmp	r6, #0	; 0x0
  103cdc:	0a000002 	beq	103cec <_fclose_r+0x2c>
  103ce0:	e5963038 	ldr	r3, [r6, #56]
  103ce4:	e3530000 	cmp	r3, #0	; 0x0
  103ce8:	0a000027 	beq	103d8c <_fclose_r+0xcc>
  103cec:	e1d540bc 	ldrh	r4, [r5, #12]
  103cf0:	e3540000 	cmp	r4, #0	; 0x0
  103cf4:	0a000021 	beq	103d80 <_fclose_r+0xc0>
  103cf8:	e2140008 	ands	r0, r4, #8	; 0x8
  103cfc:	1a000025 	bne	103d98 <_fclose_r+0xd8>
  103d00:	e595302c 	ldr	r3, [r5, #44]
  103d04:	e3530000 	cmp	r3, #0	; 0x0
  103d08:	e1a04000 	mov	r4, r0
  103d0c:	0a000004 	beq	103d24 <_fclose_r+0x64>
  103d10:	e595001c 	ldr	r0, [r5, #28]
  103d14:	e1a0e00f 	mov	lr, pc
  103d18:	e12fff13 	bx	r3
  103d1c:	e3500000 	cmp	r0, #0	; 0x0
  103d20:	b3e04000 	mvnlt	r4, #0	; 0x0
  103d24:	e1d530bc 	ldrh	r3, [r5, #12]
  103d28:	e3130080 	tst	r3, #128	; 0x80
  103d2c:	1a000020 	bne	103db4 <_fclose_r+0xf4>
  103d30:	e5951030 	ldr	r1, [r5, #48]
  103d34:	e3510000 	cmp	r1, #0	; 0x0
  103d38:	0a000006 	beq	103d58 <_fclose_r+0x98>
  103d3c:	e2853040 	add	r3, r5, #64	; 0x40
  103d40:	e1510003 	cmp	r1, r3
  103d44:	159f3084 	ldrne	r3, [pc, #132]	; 103dd0 <.text+0x3dd0>
  103d48:	15930000 	ldrne	r0, [r3]
  103d4c:	1bfffe72 	blne	10371c <_free_r>
  103d50:	e3a03000 	mov	r3, #0	; 0x0
  103d54:	e5853030 	str	r3, [r5, #48]
  103d58:	e5951044 	ldr	r1, [r5, #68]
  103d5c:	e3510000 	cmp	r1, #0	; 0x0
  103d60:	0a000004 	beq	103d78 <_fclose_r+0xb8>
  103d64:	e59f3064 	ldr	r3, [pc, #100]	; 103dd0 <.text+0x3dd0>
  103d68:	e5930000 	ldr	r0, [r3]
  103d6c:	ebfffe6a 	bl	10371c <_free_r>
  103d70:	e3a03000 	mov	r3, #0	; 0x0
  103d74:	e5853044 	str	r3, [r5, #68]
  103d78:	e3a03000 	mov	r3, #0	; 0x0
  103d7c:	e1c530bc 	strh	r3, [r5, #12]
  103d80:	ebfffda3 	bl	103414 <__sfp_lock_release>
  103d84:	e1a00004 	mov	r0, r4
  103d88:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
  103d8c:	e1a00006 	mov	r0, r6
  103d90:	ebfffda2 	bl	103420 <__sinit>
  103d94:	eaffffd4 	b	103cec <_fclose_r+0x2c>
  103d98:	e1a00005 	mov	r0, r5
  103d9c:	eb000011 	bl	103de8 <fflush>
  103da0:	e595302c 	ldr	r3, [r5, #44]
  103da4:	e3530000 	cmp	r3, #0	; 0x0
  103da8:	e1a04000 	mov	r4, r0
  103dac:	1affffd7 	bne	103d10 <_fclose_r+0x50>
  103db0:	eaffffdb 	b	103d24 <_fclose_r+0x64>
  103db4:	e5951010 	ldr	r1, [r5, #16]
  103db8:	e1a00006 	mov	r0, r6
  103dbc:	ebfffe56 	bl	10371c <_free_r>
  103dc0:	e5951030 	ldr	r1, [r5, #48]
  103dc4:	e3510000 	cmp	r1, #0	; 0x0
  103dc8:	1affffdb 	bne	103d3c <_fclose_r+0x7c>
  103dcc:	eaffffe1 	b	103d58 <_fclose_r+0x98>
  103dd0:	00200184 	eoreq	r0, r0, r4, lsl #3

00103dd4 <fclose>:
  103dd4:	e59f3008 	ldr	r3, [pc, #8]	; 103de4 <.text+0x3de4>
  103dd8:	e1a01000 	mov	r1, r0
  103ddc:	e5930000 	ldr	r0, [r3]
  103de0:	eaffffb6 	b	103cc0 <_fclose_r>
  103de4:	00200184 	eoreq	r0, r0, r4, lsl #3

00103de8 <fflush>:
  103de8:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
  103dec:	e2506000 	subs	r6, r0, #0	; 0x0
  103df0:	0a00002c 	beq	103ea8 <fflush+0xc0>
  103df4:	e59f30c0 	ldr	r3, [pc, #192]	; 103ebc <.text+0x3ebc>
  103df8:	e5930000 	ldr	r0, [r3]
  103dfc:	e3500000 	cmp	r0, #0	; 0x0
  103e00:	0a000002 	beq	103e10 <fflush+0x28>
  103e04:	e5903038 	ldr	r3, [r0, #56]
  103e08:	e3530000 	cmp	r3, #0	; 0x0
  103e0c:	0a000023 	beq	103ea0 <fflush+0xb8>
  103e10:	e1d610fc 	ldrsh	r1, [r6, #12]
  103e14:	e3110008 	tst	r1, #8	; 0x8
  103e18:	0a00001c 	beq	103e90 <fflush+0xa8>
  103e1c:	e5965010 	ldr	r5, [r6, #16]
  103e20:	e3550000 	cmp	r5, #0	; 0x0
  103e24:	0a000019 	beq	103e90 <fflush+0xa8>
  103e28:	e5963000 	ldr	r3, [r6]
  103e2c:	e3110003 	tst	r1, #3	; 0x3
  103e30:	e0654003 	rsb	r4, r5, r3
  103e34:	e5865000 	str	r5, [r6]
  103e38:	13a03000 	movne	r3, #0	; 0x0
  103e3c:	0a000015 	beq	103e98 <fflush+0xb0>
  103e40:	e3540000 	cmp	r4, #0	; 0x0
  103e44:	e5863008 	str	r3, [r6, #8]
  103e48:	ca000002 	bgt	103e58 <fflush+0x70>
  103e4c:	ea00000f 	b	103e90 <fflush+0xa8>
  103e50:	e3540000 	cmp	r4, #0	; 0x0
  103e54:	da00000d 	ble	103e90 <fflush+0xa8>
  103e58:	e1a01005 	mov	r1, r5
  103e5c:	e1a02004 	mov	r2, r4
  103e60:	e596001c 	ldr	r0, [r6, #28]
  103e64:	e1a0e00f 	mov	lr, pc
  103e68:	e596f024 	ldr	pc, [r6, #36]
  103e6c:	e3500000 	cmp	r0, #0	; 0x0
  103e70:	e0855000 	add	r5, r5, r0
  103e74:	e0604004 	rsb	r4, r0, r4
  103e78:	cafffff4 	bgt	103e50 <fflush+0x68>
  103e7c:	e1d630bc 	ldrh	r3, [r6, #12]
  103e80:	e3e00000 	mvn	r0, #0	; 0x0
  103e84:	e3833040 	orr	r3, r3, #64	; 0x40
  103e88:	e1c630bc 	strh	r3, [r6, #12]
  103e8c:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
  103e90:	e3a00000 	mov	r0, #0	; 0x0
  103e94:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
  103e98:	e5963014 	ldr	r3, [r6, #20]
  103e9c:	eaffffe7 	b	103e40 <fflush+0x58>
  103ea0:	ebfffd5e 	bl	103420 <__sinit>
  103ea4:	eaffffd9 	b	103e10 <fflush+0x28>
  103ea8:	e59f3010 	ldr	r3, [pc, #16]	; 103ec0 <.text+0x3ec0>
  103eac:	e59f1010 	ldr	r1, [pc, #16]	; 103ec4 <.text+0x3ec4>
  103eb0:	e5930000 	ldr	r0, [r3]
  103eb4:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
  103eb8:	eafffee1 	b	103a44 <_fwalk>
  103ebc:	00200184 	eoreq	r0, r0, r4, lsl #3
  103ec0:	00103f44 	andeqs	r3, r0, r4, asr #30
  103ec4:	00103de8 	andeqs	r3, r0, r8, ror #27

00103ec8 <__do_global_ctors_aux>:
  103ec8:	e59f2028 	ldr	r2, [pc, #40]	; 103ef8 <.text+0x3ef8>
  103ecc:	e5123004 	ldr	r3, [r2, #-4]
  103ed0:	e3730001 	cmn	r3, #1	; 0x1
  103ed4:	e92d4010 	stmdb	sp!, {r4, lr}
  103ed8:	08bd8010 	ldmeqia	sp!, {r4, pc}
  103edc:	e2424004 	sub	r4, r2, #4	; 0x4
  103ee0:	e1a0e00f 	mov	lr, pc
  103ee4:	e12fff13 	bx	r3
  103ee8:	e5343004 	ldr	r3, [r4, #-4]!
  103eec:	e3730001 	cmn	r3, #1	; 0x1
  103ef0:	1afffffa 	bne	103ee0 <__do_global_ctors_aux+0x18>
  103ef4:	e8bd8010 	ldmia	sp!, {r4, pc}
  103ef8:	00103f24 	andeqs	r3, r0, r4, lsr #30

00103efc <call___do_global_ctors_aux>:
  103efc:	e52de004 	str	lr, [sp, #-4]!
  103f00:	e49df004 	ldr	pc, [sp], #4

00103f04 <_fini>:
  103f04:	e1a0c00d 	mov	ip, sp
  103f08:	e92ddff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
  103f0c:	e24cb004 	sub	fp, ip, #4	; 0x4
  103f10:	ebfff0a8 	bl	1001b8 <__do_global_dtors_aux>
  103f14:	e24bd028 	sub	sp, fp, #40	; 0x28
  103f18:	e89d6ff0 	ldmia	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
  103f1c:	e1a0f00e 	mov	pc, lr
Déassemblage de la section .data:

00200000 <_data>:
  200000:	e59ff018 	ldr	pc, [pc, #24]	; 200020 <Reset_AddrR>
  200004:	e59ff018 	ldr	pc, [pc, #24]	; 200024 <Undef_AddrR>
  200008:	e59ff018 	ldr	pc, [pc, #24]	; 200028 <SWI_AddrR>
  20000c:	e59ff018 	ldr	pc, [pc, #24]	; 20002c <PAbt_AddrR>
  200010:	e59ff018 	ldr	pc, [pc, #24]	; 200030 <DAbt_AddrR>
  200014:	e1a00000 	nop			(mov r0,r0)
  200018:	e51fff20 	ldr	pc, [pc, #-3872]	; 1ff100 <PMC_PLLR_Val+0x6d4fb>
  20001c:	e51fff20 	ldr	pc, [pc, #-3872]	; 1ff104 <PMC_PLLR_Val+0x6d4ff>

00200020 <Reset_AddrR>:
  200020:	0010006c 	andeqs	r0, r0, ip, rrx

00200024 <Undef_AddrR>:
  200024:	00200040 	eoreq	r0, r0, r0, asr #32

00200028 <SWI_AddrR>:
  200028:	00200044 	eoreq	r0, r0, r4, asr #32

0020002c <PAbt_AddrR>:
  20002c:	00200048 	eoreq	r0, r0, r8, asr #32

00200030 <DAbt_AddrR>:
  200030:	0020004c 	eoreq	r0, r0, ip, asr #32
  200034:	00000000 	andeq	r0, r0, r0

00200038 <IRQ_AddrR>:
  200038:	00200050 	eoreq	r0, r0, r0, asr r0

0020003c <FIQ_AddrR>:
  20003c:	00200054 	eoreq	r0, r0, r4, asr r0

00200040 <Undef_HandlerR>:
  200040:	eafffffe 	b	200040 <Undef_HandlerR>

00200044 <SWI_HandlerR>:
  200044:	eafffffe 	b	200044 <SWI_HandlerR>

00200048 <PAbt_HandlerR>:
  200048:	eafffffe 	b	200048 <PAbt_HandlerR>

0020004c <DAbt_HandlerR>:
  20004c:	eafffffe 	b	20004c <DAbt_HandlerR>

00200050 <IRQ_HandlerR>:
  200050:	eafffffe 	b	200050 <IRQ_HandlerR>

00200054 <FIQ_HandlerR>:
  200054:	eafffffe 	b	200054 <FIQ_HandlerR>

00200058 <force_to_data>:
  200058:	00000000                                ....

0020005c <__dso_handle>:
  20005c:	00000000                                ....

00200060 <p.3962>:
  200060:	00103f2c                                ,?..

00200064 <HeapBase>:
  200064:	00000000 	andeq	r0, r0, r0

00200068 <HeapLimit>:
  200068:	00000000 	andeq	r0, r0, r0

0020006c <__stack_base__>:
  20006c:	00000000 	andeq	r0, r0, r0

00200070 <StackLimit>:
  200070:	00000000 	andeq	r0, r0, r0

00200074 <CommandLine>:
	...

00200174 <pPIO>:
  200174:	fffff400                                ....

00200178 <pUSART>:
  200178:	fffc0000                                ....

0020017c <pPIOA>:
  20017c:	fffff400                                ....

00200180 <pSPI>:
  200180:	fffe0000                                ....

00200184 <_impure_ptr>:
  200184:	00200188                                .. .

00200188 <impure_data>:
  200188:	00000000 00200474 002004d0 0020052c     ....t. ... .,. .
	...
  2001bc:	00103f48 00000000 00000000 00000000     H?..............
	...
  20022c:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
  20023c:	0005deec 0000000b 00000000 00000000     ................
	...

00200588 <__malloc_av_>:
	...
  200590:	00200588 00200588 00200590 00200590     .. ... ... ... .
  2005a0:	00200598 00200598 002005a0 002005a0     .. ... ... ... .
  2005b0:	002005a8 002005a8 002005b0 002005b0     .. ... ... ... .
  2005c0:	002005b8 002005b8 002005c0 002005c0     .. ... ... ... .
  2005d0:	002005c8 002005c8 002005d0 002005d0     .. ... ... ... .
  2005e0:	002005d8 002005d8 002005e0 002005e0     .. ... ... ... .
  2005f0:	002005e8 002005e8 002005f0 002005f0     .. ... ... ... .
  200600:	002005f8 002005f8 00200600 00200600     .. ... ... ... .
  200610:	00200608 00200608 00200610 00200610     .. ... ... ... .
  200620:	00200618 00200618 00200620 00200620     .. ... . . . . .
  200630:	00200628 00200628 00200630 00200630     (. .(. .0. .0. .
  200640:	00200638 00200638 00200640 00200640     8. .8. .@. .@. .
  200650:	00200648 00200648 00200650 00200650     H. .H. .P. .P. .
  200660:	00200658 00200658 00200660 00200660     X. .X. .`. .`. .
  200670:	00200668 00200668 00200670 00200670     h. .h. .p. .p. .
  200680:	00200678 00200678 00200680 00200680     x. .x. ... ... .
  200690:	00200688 00200688 00200690 00200690     .. ... ... ... .
  2006a0:	00200698 00200698 002006a0 002006a0     .. ... ... ... .
  2006b0:	002006a8 002006a8 002006b0 002006b0     .. ... ... ... .
  2006c0:	002006b8 002006b8 002006c0 002006c0     .. ... ... ... .
  2006d0:	002006c8 002006c8 002006d0 002006d0     .. ... ... ... .
  2006e0:	002006d8 002006d8 002006e0 002006e0     .. ... ... ... .
  2006f0:	002006e8 002006e8 002006f0 002006f0     .. ... ... ... .
  200700:	002006f8 002006f8 00200700 00200700     .. ... ... ... .
  200710:	00200708 00200708 00200710 00200710     .. ... ... ... .
  200720:	00200718 00200718 00200720 00200720     .. ... . . . . .
  200730:	00200728 00200728 00200730 00200730     (. .(. .0. .0. .
  200740:	00200738 00200738 00200740 00200740     8. .8. .@. .@. .
  200750:	00200748 00200748 00200750 00200750     H. .H. .P. .P. .
  200760:	00200758 00200758 00200760 00200760     X. .X. .`. .`. .
  200770:	00200768 00200768 00200770 00200770     h. .h. .p. .p. .
  200780:	00200778 00200778 00200780 00200780     x. .x. ... ... .
  200790:	00200788 00200788 00200790 00200790     .. ... ... ... .
  2007a0:	00200798 00200798 002007a0 002007a0     .. ... ... ... .
  2007b0:	002007a8 002007a8 002007b0 002007b0     .. ... ... ... .
  2007c0:	002007b8 002007b8 002007c0 002007c0     .. ... ... ... .
  2007d0:	002007c8 002007c8 002007d0 002007d0     .. ... ... ... .
  2007e0:	002007d8 002007d8 002007e0 002007e0     .. ... ... ... .
  2007f0:	002007e8 002007e8 002007f0 002007f0     .. ... ... ... .
  200800:	002007f8 002007f8 00200800 00200800     .. ... ... ... .
  200810:	00200808 00200808 00200810 00200810     .. ... ... ... .
  200820:	00200818 00200818 00200820 00200820     .. ... . . . . .
  200830:	00200828 00200828 00200830 00200830     (. .(. .0. .0. .
  200840:	00200838 00200838 00200840 00200840     8. .8. .@. .@. .
  200850:	00200848 00200848 00200850 00200850     H. .H. .P. .P. .
  200860:	00200858 00200858 00200860 00200860     X. .X. .`. .`. .
  200870:	00200868 00200868 00200870 00200870     h. .h. .p. .p. .
  200880:	00200878 00200878 00200880 00200880     x. .x. ... ... .
  200890:	00200888 00200888 00200890 00200890     .. ... ... ... .
  2008a0:	00200898 00200898 002008a0 002008a0     .. ... ... ... .
  2008b0:	002008a8 002008a8 002008b0 002008b0     .. ... ... ... .
  2008c0:	002008b8 002008b8 002008c0 002008c0     .. ... ... ... .
  2008d0:	002008c8 002008c8 002008d0 002008d0     .. ... ... ... .
  2008e0:	002008d8 002008d8 002008e0 002008e0     .. ... ... ... .
  2008f0:	002008e8 002008e8 002008f0 002008f0     .. ... ... ... .
  200900:	002008f8 002008f8 00200900 00200900     .. ... ... ... .
  200910:	00200908 00200908 00200910 00200910     .. ... ... ... .
  200920:	00200918 00200918 00200920 00200920     .. ... . . . . .
  200930:	00200928 00200928 00200930 00200930     (. .(. .0. .0. .
  200940:	00200938 00200938 00200940 00200940     8. .8. .@. .@. .
  200950:	00200948 00200948 00200950 00200950     H. .H. .P. .P. .
  200960:	00200958 00200958 00200960 00200960     X. .X. .`. .`. .
  200970:	00200968 00200968 00200970 00200970     h. .h. .p. .p. .
  200980:	00200978 00200978 00200980 00200980     x. .x. ... ... .

00200990 <__malloc_trim_threshold>:
  200990:	00020000                                ....

00200994 <__malloc_sbrk_base>:
  200994:	ffffffff                                ....

00200998 <force_to_data>:
  200998:	00000000                                ....

0020099c <system_int>:
  20099c:	e3a034a6 	mov	r3, #-1509949440	; 0xa6000000
  2009a0:	e1a03ac3 	mov	r3, r3, asr #21
  2009a4:	e58b3000 	str	r3, [fp]
  2009a8:	e24ee004 	sub	lr, lr, #4	; 0x4
  2009ac:	e92d5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
  2009b0:	e14f1000 	mrs	r1, SPSR
  2009b4:	e92d0002 	stmdb	sp!, {r1}
  2009b8:	e59b3000 	ldr	r3, [fp]
  2009bc:	e5933004 	ldr	r3, [r3, #4]
  2009c0:	e2033001 	and	r3, r3, #1	; 0x1
  2009c4:	e20330ff 	and	r3, r3, #255	; 0xff
  2009c8:	e3530000 	cmp	r3, #0	; 0x0
  2009cc:	0a00000b 	beq	200a00 <system_int+0x64>
  2009d0:	ebfbff23 	bl	100664 <vFlibTimer_Tick>
  2009d4:	e59f3040 	ldr	r3, [pc, #64]	; 200a1c <.data+0xa1c>
  2009d8:	e5933000 	ldr	r3, [r3]
  2009dc:	e2832001 	add	r2, r3, #1	; 0x1
  2009e0:	e59f3034 	ldr	r3, [pc, #52]	; 200a1c <.data+0xa1c>
  2009e4:	e5832000 	str	r2, [r3]
  2009e8:	e3a03000 	mov	r3, #0	; 0x0
  2009ec:	e2433eed 	sub	r3, r3, #3792	; 0xed0
  2009f0:	e59b2000 	ldr	r2, [fp]
  2009f4:	e5922008 	ldr	r2, [r2, #8]
  2009f8:	e5832000 	str	r2, [r3]
  2009fc:	ea000003 	b	200a10 <system_int+0x74>
  200a00:	e3a03000 	mov	r3, #0	; 0x0
  200a04:	e2433eed 	sub	r3, r3, #3792	; 0xed0
  200a08:	e3a02000 	mov	r2, #0	; 0x0
  200a0c:	e5832000 	str	r2, [r3]
  200a10:	e8bd0002 	ldmia	sp!, {r1}
  200a14:	e161f001 	msr	SPSR_c, r1
  200a18:	e8fd9fff 	ldmia	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
  200a1c:	00200c5c 	eoreq	r0, r0, ip, asr ip

00200a20 <irq0_int>:
  200a20:	e92d5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
  200a24:	e14fe000 	mrs	lr, SPSR
  200a28:	e92d4000 	stmdb	sp!, {lr}
  200a2c:	e321f01f 	msr	CPSR_c, #31	; 0x1f
  200a30:	e92d4000 	stmdb	sp!, {lr}
  200a34:	e59f3070 	ldr	r3, [pc, #112]	; 200aac <.data+0xaac>
  200a38:	e5933000 	ldr	r3, [r3]
  200a3c:	e593303c 	ldr	r3, [r3, #60]
  200a40:	e2033601 	and	r3, r3, #1048576	; 0x100000
  200a44:	e3530000 	cmp	r3, #0	; 0x0
  200a48:	1a00000d 	bne	200a84 <irq0_int+0x64>
  200a4c:	e59f3058 	ldr	r3, [pc, #88]	; 200aac <.data+0xaac>
  200a50:	e5932000 	ldr	r2, [r3]
  200a54:	e3a03701 	mov	r3, #262144	; 0x40000
  200a58:	e5823034 	str	r3, [r2, #52]
  200a5c:	e59f3048 	ldr	r3, [pc, #72]	; 200aac <.data+0xaac>
  200a60:	e5933000 	ldr	r3, [r3]
  200a64:	e593303c 	ldr	r3, [r3, #60]
  200a68:	e2033601 	and	r3, r3, #1048576	; 0x100000
  200a6c:	e3530000 	cmp	r3, #0	; 0x0
  200a70:	0afffff9 	beq	200a5c <irq0_int+0x3c>
  200a74:	e59f3030 	ldr	r3, [pc, #48]	; 200aac <.data+0xaac>
  200a78:	e5932000 	ldr	r2, [r3]
  200a7c:	e3a03701 	mov	r3, #262144	; 0x40000
  200a80:	e5823030 	str	r3, [r2, #48]
  200a84:	e8bd4000 	ldmia	sp!, {lr}
  200a88:	e321f092 	msr	CPSR_c, #146	; 0x92
  200a8c:	e8bd4000 	ldmia	sp!, {lr}
  200a90:	e16ff00e 	msr	SPSR_fsxc, lr
  200a94:	e3a03000 	mov	r3, #0	; 0x0
  200a98:	e2433eed 	sub	r3, r3, #3792	; 0xed0
  200a9c:	e3a02000 	mov	r2, #0	; 0x0
  200aa0:	e5832000 	str	r2, [r3]
  200aa4:	e8bd5fff 	ldmia	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
  200aa8:	e25ef004 	subs	pc, lr, #4	; 0x4
  200aac:	00200174 	eoreq	r0, r0, r4, ror r1
