   1              	# 1 "../sys/startup_SAM7S.S"
   2              	# 1 "<interne>"
   1              	/***********************************************************************/
   0              	
   0              	
   2              	/*                                                                     */
   3              	/*  startup_SAM7S.S:  Startup file for Atmel AT91SAM7S device series   */
   4              	/*                                                                     */
   5              	/***********************************************************************/
   6              	/*  ported to arm-elf-gcc / WinARM by Martin Thomas, KL, .de           */
   7              	/*  <eversmith@heizung-thomas.de>                                      */
   8              	/*  modifications Copyright Martin Thomas 2005                         */
   9              	/*                                                                     */
  10              	/*  Based on file that has been a part of the uVision/ARM development  */
  11              	/*  tools, Copyright KEIL ELEKTRONIK GmbH 2002-2004                    */
  12              	/***********************************************************************/
  13              	
  14              	/* 
  15              	  Modifications by Martin Thomas:
  16              	  - added handling of execption vectors in RAM ("ramfunc")
  17              	  - added options to remap the interrupt vectors to RAM
  18              	    (see makefile for switch-option)
  19              	  - replaced all ";" and "#" for comments with // of / *  * /
  20              	  - added C++ ctor handling
  21              	*/ 
  22              	
  23              	
  24              	// mt: this file should not be used with the Configuration Wizard
  25              	// since a lot of changes have been done for the WinARM/gcc example
  26              	/* 
  27              	//*** <<< Use Configuration Wizard in Context Menu >>> ***
  28              	*/
  29              	
  30              	
  31              	
  32              	// *** Startup Code (executed after Reset) ***
  33              	
  34              	
  35              	// Standard definitions of Mode bits and Interrupt (I & F) flags in PSRs
  36              	
  37              	        .equ    Mode_USR,       0x10
  38              	        .equ    Mode_FIQ,       0x11
  39              	        .equ    Mode_IRQ,       0x12
  40              	        .equ    Mode_SVC,       0x13
  41              	        .equ    Mode_ABT,       0x17
  42              	        .equ    Mode_UND,       0x1B
  43              	        .equ    Mode_SYS,       0x1F
  44              	
  45              	        .equ    I_Bit,          0x80    /* when I bit is set, IRQ is disabled */
  46              	        .equ    F_Bit,          0x40    /* when F bit is set, FIQ is disabled */
  47              	
  48              	
  49              	// Internal Memory Base Addresses
  50              	        .equ    FLASH_BASE,     0x00100000   
  51              	        .equ    RAM_BASE,       0x00200000
  52              	
  53              	
  54              	/*
  55              	// <h> Stack Configuration
  56              	//   <o>  Top of Stack Address  <0x0-0xFFFFFFFF:4>
  57              	//   <h>  Stack Sizes (in Bytes)
  58              	//     <o1> Undefined Mode      <0x0-0xFFFFFFFF:4>
  59              	//     <o2> Supervisor Mode     <0x0-0xFFFFFFFF:4>
  60              	//     <o3> Abort Mode          <0x0-0xFFFFFFFF:4>
  61              	//     <o4> Fast Interrupt Mode <0x0-0xFFFFFFFF:4>
  62              	//     <o5> Interrupt Mode      <0x0-0xFFFFFFFF:4>
  63              	//     <o6> User/System Mode    <0x0-0xFFFFFFFF:4>
  64              	//   </h>
  65              	// </h>
  66              	*/
  67              	        .equ    Top_Stack,      0x00204000
  68              	        .equ    UND_Stack_Size, 0x00000004
  69              	        .equ    SVC_Stack_Size, 0x00000100
  70              	        .equ    ABT_Stack_Size, 0x00000004
  71              	        .equ    FIQ_Stack_Size, 0x00000004
  72              	        .equ    IRQ_Stack_Size, 0x00000100
  73              	        .equ    USR_Stack_Size, 0x00000400
  74              	
  75              	
  76              	// Embedded Flash Controller (EFC) definitions
  77              	        .equ    EFC_BASE,       0xFFFFFF00  /* EFC Base Address */
  78              	        .equ    EFC_FMR,        0x60        /* EFC_FMR Offset */
  79              	
  80              	/*
  81              	// <e> Embedded Flash Controller (EFC)
  82              	//   <o1.16..23> FMCN: Flash Microsecond Cycle Number <0-255>
  83              	//               <i> Number of Master Clock Cycles in 1us
  84              	//   <o1.8..9>   FWS: Flash Wait State
  85              	//               <0=> Read: 1 cycle / Write: 2 cycles
  86              	//               <1=> Read: 2 cycle / Write: 3 cycles
  87              	//               <2=> Read: 3 cycle / Write: 4 cycles
  88              	//               <3=> Read: 4 cycle / Write: 4 cycles
  89              	// </e>
  90              	*/
  91              	        .equ    EFC_SETUP,      1
  92              	        .equ    EFC_FMR_Val,    0x00320100
  93              	
  94              	
  95              	// Watchdog Timer (WDT) definitions
  96              	        .equ    WDT_BASE,       0xFFFFFD40  /* WDT Base Address */
  97              	        .equ    WDT_MR,         0x04        /* WDT_MR Offset */
  98              	
  99              	/*
 100              	// <e> Watchdog Timer (WDT)
 101              	//   <o1.0..11>  WDV: Watchdog Counter Value <0-4095>
 102              	//   <o1.16..27> WDD: Watchdog Delta Value <0-4095>
 103              	//   <o1.12>     WDFIEN: Watchdog Fault Interrupt Enable
 104              	//   <o1.13>     WDRSTEN: Watchdog Reset Enable
 105              	//   <o1.14>     WDRPROC: Watchdog Reset Processor
 106              	//   <o1.28>     WDDBGHLT: Watchdog Debug Halt
 107              	//   <o1.29>     WDIDLEHLT: Watchdog Idle Halt
 108              	//   <o1.15>     WDDIS: Watchdog Disable
 109              	// </e>
 110              	*/
 111              	        .equ    WDT_SETUP,      1
 112              	        .equ    WDT_MR_Val,     0x00008000
 113              	
 114              	
 115              	// Power Mangement Controller (PMC) definitions
 116              	        .equ    PMC_BASE,       0xFFFFFC00  /* PMC Base Address */
 117              	        .equ    PMC_MOR,        0x20        /* PMC_MOR Offset */
 118              	        .equ    PMC_MCFR,       0x24        /* PMC_MCFR Offset */
 119              	        .equ    PMC_PLLR,       0x2C        /* PMC_PLLR Offset */
 120              	        .equ    PMC_MCKR,       0x30        /* PMC_MCKR Offset */
 121              	        .equ    PMC_SR,         0x68        /* PMC_SR Offset */
 122              	        .equ    PMC_MOSCEN,     (1<<0)      /* Main Oscillator Enable */
 123              	        .equ    PMC_OSCBYPASS,  (1<<1)      /* Main Oscillator Bypass */
 124              	        .equ    PMC_OSCOUNT,    (0xFF<<8)   /* Main OScillator Start-up Time */
 125              	        .equ    PMC_DIV,        (0xFF<<0)   /* PLL Divider */
 126              	        .equ    PMC_PLLCOUNT,   (0x3F<<8)   /* PLL Lock Counter */
 127              	        .equ    PMC_OUT,        (0x03<<14)  /* PLL Clock Frequency Range */
 128              	        .equ    PMC_MUL,        (0x7FF<<16) /* PLL Multiplier */
 129              	        .equ    PMC_USBDIV,     (0x03<<28)  /* USB Clock Divider */
 130              	        .equ    PMC_CSS,        (3<<0)      /* Clock Source Selection */
 131              	        .equ    PMC_PRES,       (7<<2)      /* Prescaler Selection */
 132              	        .equ    PMC_MOSCS,      (1<<0)      /* Main Oscillator Stable */
 133              	        .equ    PMC_LOCK,       (1<<2)      /* PLL Lock Status */
 134              	
 135              	/*
 136              	// <e> Power Mangement Controller (PMC)
 137              	//   <h> Main Oscillator
 138              	//     <o1.0>      MOSCEN: Main Oscillator Enable
 139              	//     <o1.1>      OSCBYPASS: Oscillator Bypass
 140              	//     <o1.8..15>  OSCCOUNT: Main Oscillator Startup Time <0-255>
 141              	//   </h>
 142              	//   <h> Phase Locked Loop (PLL)
 143              	//     <o2.0..7>   DIV: PLL Divider <0-255>
 144              	//     <o2.16..26> MUL: PLL Multiplier <0-2047>
 145              	//                 <i> PLL Output is multiplied by MUL+1
 146              	//     <o2.14..15> OUT: PLL Clock Frequency Range
 147              	//                 <0=> 80..160MHz  <1=> Reserved
 148              	//                 <2=> 150..220MHz <3=> Reserved
 149              	//     <o2.8..13>  PLLCOUNT: PLL Lock Counter <0-63>
 150              	//     <o2.28..29> USBDIV: USB Clock Divider
 151              	//                 <0=> None  <1=> 2  <2=> 4  <3=> Reserved
 152              	//   </h>
 153              	//   <o3.0..1>   CSS: Clock Source Selection
 154              	//               <0=> Slow Clock
 155              	//               <1=> Main Clock
 156              	//               <2=> Reserved
 157              	//               <3=> PLL Clock
 158              	//   <o3.2..4>   PRES: Prescaler
 159              	//               <0=> None
 160              	//               <1=> Clock / 2    <2=> Clock / 4
 161              	//               <3=> Clock / 8    <4=> Clock / 16
 162              	//               <5=> Clock / 32   <6=> Clock / 64
 163              	//               <7=> Reserved
 164              	// </e>
 165              	*/
 166              	        .equ    PMC_SETUP,      1
 167              	        .equ    PMC_MOR_Val,    0x00000601
 168              	        .equ    PMC_PLLR_Val,   0x00191C05
 169              	        .equ    PMC_MCKR_Val,   0x00000007
 170              	
 171              		.comm	__heap_start, 4, 4
 172              		.comm	__heap_end, 4, 4
 173              	
 174              	
 175              	#ifdef VECTORS_IN_RAM
 176              	
 177              	/* 
 178              	 Exception Vectors to be placed in RAM - added by mt
 179              	 -> will be used after remapping
 180              	 Mapped to Address 0 after remapping.
 181              	 Absolute addressing mode must be used.
 182              	 Dummy Handlers are implemented as infinite loops which can be modified.
 183              	 VECTORS_IN_RAM defined in makefile/by commandline 
 184              	*/
 185              				.text
 186              				.arm
 187              				.section .vectram, "ax"
 188              				
 189 0000 18F09FE5 	VectorsRAM:     LDR     PC,Reset_AddrR
 190 0004 18F09FE5 	                LDR     PC,Undef_AddrR
 191 0008 18F09FE5 	                LDR     PC,SWI_AddrR
 192 000c 18F09FE5 	                LDR     PC,PAbt_AddrR
 193 0010 18F09FE5 	                LDR     PC,DAbt_AddrR
 194 0014 0000A0E1 	                NOP                            /* Reserved Vector */
 195 0018 20FF1FE5 	                LDR     PC,[PC,#-0xF20]        /* Vector From AIC_IVR */
 196 001c 20FF1FE5 	                LDR     PC,[PC,#-0xF20]        /* Vector From AIC_FVR */
 197              	
 198 0020 04000000 	Reset_AddrR:     .word   Reset_Handler
 199 0024 40000000 	Undef_AddrR:     .word   Undef_HandlerR
 200 0028 44000000 	SWI_AddrR:       .word   SWI_HandlerR
 201 002c 48000000 	PAbt_AddrR:      .word   PAbt_HandlerR
 202 0030 4C000000 	DAbt_AddrR:      .word   DAbt_HandlerR
 203              	//               .word   0xdeadbeef     /* Test Reserved Address */
 204 0034 00000000 	                 .word   0     /* Reserved Address */
 205 0038 50000000 	IRQ_AddrR:       .word   IRQ_HandlerR
 206 003c 54000000 	FIQ_AddrR:       .word   FIQ_HandlerR
 207              	
 208 0040 FEFFFFEA 	Undef_HandlerR:  B       Undef_HandlerR
 209 0044 FEFFFFEA 	SWI_HandlerR:    B       SWI_HandlerR
 210 0048 FEFFFFEA 	PAbt_HandlerR:   B       PAbt_HandlerR
 211 004c FEFFFFEA 	DAbt_HandlerR:   B       DAbt_HandlerR
 212 0050 FEFFFFEA 	IRQ_HandlerR:    B       IRQ_HandlerR
 213 0054 FEFFFFEA 	FIQ_HandlerR:    B       FIQ_HandlerR
 214              	
 215              	#endif /* VECTORS_IN_RAM */
 216              	
 217              	
 218              	
 219              	/*
 220              	 Exception Vectors in ROM 
 221              	 -> will be used during startup if remapping is done
 222              	 -> will be used "always" in code without remapping
 223              	 Mapped to Address 0.
 224              	 Absolute addressing mode must be used.
 225              	 Dummy Handlers are implemented as infinite loops which can be modified.
 226              	*/
 227              				.text
 228              				.arm
 229              				.section .vectrom, "ax"
 230              	
 231 0000 18F09FE5 	Vectors:        LDR     PC,Reset_Addr         
 232 0004 18F09FE5 	                LDR     PC,Undef_Addr
 233 0008 18F09FE5 	                LDR     PC,SWI_Addr
 234 000c 18F09FE5 	                LDR     PC,PAbt_Addr
 235 0010 18F09FE5 	                LDR     PC,DAbt_Addr
 236 0014 0000A0E1 	                NOP                            /* Reserved Vector */
 237              	//                LDR     PC,IRQ_Addr
 238 0018 20FF1FE5 	                LDR     PC,[PC,#-0xF20]        /* Vector From AIC_IVR */
 239              	//                LDR     PC,FIQ_Addr
 240 001c 20FF1FE5 	                LDR     PC,[PC,#-0xF20]        /* Vector From AIC_FVR */
 241              	
 242 0020 04000000 	Reset_Addr:     .word   Reset_Handler
 243 0024 40000000 	Undef_Addr:     .word   Undef_Handler
 244 0028 44000000 	SWI_Addr:       .word   SWI_Handler
 245 002c 48000000 	PAbt_Addr:      .word   PAbt_Handler
 246 0030 4C000000 	DAbt_Addr:      .word   DAbt_Handler
 247 0034 00000000 	                .word   0                      /* Reserved Address */
 248 0038 50000000 	IRQ_Addr:       .word   IRQ_Handler
 249 003c 54000000 	FIQ_Addr:       .word   FIQ_Handler
 250              	
 251 0040 FEFFFFEA 	Undef_Handler:  B       Undef_Handler
 252 0044 FEFFFFEA 	SWI_Handler:    B       SWI_Handler
 253 0048 FEFFFFEA 	PAbt_Handler:   B       PAbt_Handler
 254 004c FEFFFFEA 	DAbt_Handler:   B       DAbt_Handler
 255 0050 FEFFFFEA 	IRQ_Handler:    B       IRQ_Handler
 256 0054 FEFFFFEA 	FIQ_Handler:    B       FIQ_Handler
 257              	
 258              	
 259              	// Starupt Code must be linked first at Address at which it expects to run.
 260              	
 261              			.text
 262              			.arm
 263              			.section .init, "ax"
 264              		
 265              			.global _startup
 266              			.func   _startup
 267              	_startup:
 268              	
 269              	
 270              	// Reset Handler
 271 0000 00F19FE5 	                LDR     pc, =Reset_Handler
 272              	Reset_Handler:
 273              	
 274              	// Setup EFC
 275              	.if EFC_SETUP
 276 0004 FF00E0E3 	                LDR     R0, =EFC_BASE
 277 0008 FC109FE5 	                LDR     R1, =EFC_FMR_Val
 278 000c 601080E5 	                STR     R1, [R0, #EFC_FMR]
 279              	.endif
 280              	
 281              	
 282              	// Setup WDT
 283              	.if WDT_SETUP
 284 0010 F8009FE5 	                LDR     R0, =WDT_BASE
 285 0014 0219A0E3 	                LDR     R1, =WDT_MR_Val
 286 0018 041080E5 	                STR     R1, [R0, #WDT_MR]
 287              	.endif
 288              	
 289              	
 290              	// Setup PMC
 291              	.if PMC_SETUP
 292 001c F0009FE5 	                LDR     R0, =PMC_BASE
 293              	
 294              	//  Setup Main Oscillator
 295 0020 F0109FE5 	                LDR     R1, =PMC_MOR_Val
 296 0024 201080E5 	                STR     R1, [R0, #PMC_MOR]
 297              	
 298              	//  Wait until Main Oscillator is stablilized
 299              	.if (PMC_MOR_Val & PMC_MOSCEN)
 300 0028 682090E5 	MOSCS_Loop:     LDR     R2, [R0, #PMC_SR]
 301 002c 012012E2 	                ANDS    R2, R2, #PMC_MOSCS
 302 0030 FCFFFF0A 	                BEQ     MOSCS_Loop
 303              	.endif
 304              	
 305              	//  Setup the PLL
 306              	.if (PMC_PLLR_Val & PMC_MUL)
 307 0034 E0109FE5 	                LDR     R1, =PMC_PLLR_Val
 308 0038 2C1080E5 	                STR     R1, [R0, #PMC_PLLR]
 309              	
 310              	//  Wait until PLL is stabilized
 311 003c 682090E5 	PLL_Loop:       LDR     R2, [R0, #PMC_SR]
 312 0040 042012E2 	                ANDS    R2, R2, #PMC_LOCK
 313 0044 FCFFFF0A 	                BEQ     PLL_Loop
 314              	.endif
 315              	
 316              	//  Select Clock
 317 0048 0710A0E3 	                LDR     R1, =PMC_MCKR_Val
 318 004c 301080E5 	                STR     R1, [R0, #PMC_MCKR]
 319              	.endif
 320              	
 321              	
 322              	// Setup Stack for each mode
 323              	
 324 0050 8109A0E3 	                LDR     R0, =Top_Stack
 325              	
 326              	//  Enter Undefined Instruction Mode and set its Stack Pointer
 327 0054 DBF021E3 	                MSR     CPSR_c, #Mode_UND|I_Bit|F_Bit
 328 0058 00D0A0E1 	                MOV     SP, R0
 329 005c 040040E2 	                SUB     R0, R0, #UND_Stack_Size
 330              	
 331              	//  Enter Abort Mode and set its Stack Pointer
 332 0060 D7F021E3 	                MSR     CPSR_c, #Mode_ABT|I_Bit|F_Bit
 333 0064 00D0A0E1 	                MOV     SP, R0
 334 0068 040040E2 	                SUB     R0, R0, #ABT_Stack_Size
 335              	
 336              	//  Enter FIQ Mode and set its Stack Pointer
 337 006c D1F021E3 	                MSR     CPSR_c, #Mode_FIQ|I_Bit|F_Bit
 338 0070 00D0A0E1 	                MOV     SP, R0
 339 0074 040040E2 	                SUB     R0, R0, #FIQ_Stack_Size
 340              	
 341              	//  Enter IRQ Mode and set its Stack Pointer
 342 0078 D2F021E3 	                MSR     CPSR_c, #Mode_IRQ|I_Bit|F_Bit
 343 007c 00D0A0E1 	                MOV     SP, R0
 344 0080 010C40E2 	                SUB     R0, R0, #IRQ_Stack_Size
 345              	
 346              	//  Enter Supervisor Mode and set its Stack Pointer
 347 0084 D3F021E3 	                MSR     CPSR_c, #Mode_SVC|I_Bit|F_Bit
 348 0088 00D0A0E1 	                MOV     SP, R0
 349 008c 010C40E2 	                SUB     R0, R0, #SVC_Stack_Size
 350              	
 351              	//  Enter User Mode and set its Stack Pointer
 352 0090 10F021E3 	                MSR     CPSR_c, #Mode_USR
 353 0094 00D0A0E1 	                MOV     SP, R0
 354              	
 355              	// Setup a default Stack Limit (when compiled with "-mapcs-stack-check")
 356 0098 01AB4DE2 	                SUB     SL, SP, #USR_Stack_Size
 357              	
 358              	
 359              	// Relocate .data section (Copy from ROM to RAM)
 360 009c 7C109FE5 	                LDR     R1, =_etext
 361 00a0 7C209FE5 	                LDR     R2, =_data
 362 00a4 7C309FE5 	                LDR     R3, =_edata
 363 00a8 030052E1 	LoopRel:        CMP     R2, R3
 364 00ac 04009134 	                LDRLO   R0, [R1], #4
 365 00b0 04008234 	                STRLO   R0, [R2], #4
 366 00b4 FBFFFF3A 	                BLO     LoopRel
 367              	
 368              	
 369              	// Clear .bss section (Zero init)
 370 00b8 0000A0E3 	                MOV     R0, #0
 371 00bc 68109FE5 	                LDR     R1, =__bss_start__
 372 00c0 68209FE5 	                LDR     R2, =__bss_end__
 373 00c4 020051E1 	LoopZI:         CMP     R1, R2
 374 00c8 04008134 	                STRLO   R0, [R1], #4
 375 00cc FCFFFF3A 	                BLO     LoopZI
 376              	
 377              	
 378              	#ifdef VECTORS_IN_RAM
 379              	/* 
 380              	   remap - exception vectors for RAM have been already copied 
 381              	   to 0x00200000 by the .data copy-loop 
 382              	*/
 383              					.equ    MC_BASE,0xFFFFFF00  /* MC Base Address */
 384              					.equ    MC_RCR, 0x00        /* MC_RCR Offset */
 385              	
 386 00d0 FF00E0E3 					LDR     R0, =MC_BASE
 387 00d4 0110A0E3 					MOV     R1, #1
 388 00d8 001080E5 					STR     R1, [R0, #MC_RCR]   // Remap
 389              	#endif /* VECTORS_IN_RAM */
 390              	
 391              	
 392              	/*
 393              	   Call C++ constructors (for objects in "global scope")
 394              	   added by Martin Thomas based on a Anglia Design 
 395              	   example-application for STR7 ARM
 396              	*/
 397              	
 398 00dc 50009FE5 				LDR 	r0, =__ctors_start__
 399 00e0 50109FE5 				LDR 	r1, =__ctors_end__
 400              	ctor_loop:
 401              	//			CMP 	r0, r1
 402              	//			BEQ 	ctor_end
 403              	//			LDR 	r2, [r0], #4   /* this ctor's address */
 404              	//			STMFD 	sp!, {r0-r1}   /* save loop counters  */
 405              	//			MOV 	lr, pc         /* set return address  */
 406              	////			MOV 	pc, r2
 407              	//			BX      r2             /* call ctor */
 408              	//			LDMFD 	sp!, {r0-r1}   /* restore loop counters */
 409              	//			B 		ctor_loop
 410              	ctor_end:
 411              	
 412              	       
 413              	// Enter the C code
 414 00e4 0000A0E3 					mov   r0,#0            // no arguments (argc = 0)
 415 00e8 0010A0E1 					mov   r1,r0
 416 00ec 0020A0E1 					mov   r2,r0
 417 00f0 00B0A0E1 					mov   fp,r0            // null frame pointer
 418 00f4 0070A0E1 					mov   r7,r0            // null frame pointer for thumb
 419 00f8 3CA09FE5 					ldr   r10,=main
 420 00fc 00E08FE2 					adr   lr, __main_exit
 421 0100 1AFF2FE1 					bx    r10              // enter main()
 422              	
 423 0104 FEFFFFEA 	__main_exit:    B       __main_exit
 424              	
 425              	
 427              					.endfunc
 428              	
 429 0108 04000000 	.end
 429      00013200 
 429      40FDFFFF 
 429      00FCFFFF 
 429      01060000 
DEFINED SYMBOLS
                            *ABS*:00000000 ../sys/startup_SAM7S.S
../sys/startup_SAM7S.S:37     *ABS*:00000010 Mode_USR
../sys/startup_SAM7S.S:38     *ABS*:00000011 Mode_FIQ
../sys/startup_SAM7S.S:39     *ABS*:00000012 Mode_IRQ
../sys/startup_SAM7S.S:40     *ABS*:00000013 Mode_SVC
../sys/startup_SAM7S.S:41     *ABS*:00000017 Mode_ABT
../sys/startup_SAM7S.S:42     *ABS*:0000001b Mode_UND
../sys/startup_SAM7S.S:43     *ABS*:0000001f Mode_SYS
../sys/startup_SAM7S.S:45     *ABS*:00000080 I_Bit
../sys/startup_SAM7S.S:46     *ABS*:00000040 F_Bit
../sys/startup_SAM7S.S:50     *ABS*:00100000 FLASH_BASE
../sys/startup_SAM7S.S:51     *ABS*:00200000 RAM_BASE
../sys/startup_SAM7S.S:67     *ABS*:00204000 Top_Stack
../sys/startup_SAM7S.S:68     *ABS*:00000004 UND_Stack_Size
../sys/startup_SAM7S.S:69     *ABS*:00000100 SVC_Stack_Size
../sys/startup_SAM7S.S:70     *ABS*:00000004 ABT_Stack_Size
../sys/startup_SAM7S.S:71     *ABS*:00000004 FIQ_Stack_Size
../sys/startup_SAM7S.S:72     *ABS*:00000100 IRQ_Stack_Size
../sys/startup_SAM7S.S:73     *ABS*:00000400 USR_Stack_Size
../sys/startup_SAM7S.S:77     *ABS*:ffffff00 EFC_BASE
../sys/startup_SAM7S.S:78     *ABS*:00000060 EFC_FMR
../sys/startup_SAM7S.S:91     *ABS*:00000001 EFC_SETUP
../sys/startup_SAM7S.S:92     *ABS*:00320100 EFC_FMR_Val
../sys/startup_SAM7S.S:96     *ABS*:fffffd40 WDT_BASE
../sys/startup_SAM7S.S:97     *ABS*:00000004 WDT_MR
../sys/startup_SAM7S.S:111    *ABS*:00000001 WDT_SETUP
../sys/startup_SAM7S.S:112    *ABS*:00008000 WDT_MR_Val
../sys/startup_SAM7S.S:116    *ABS*:fffffc00 PMC_BASE
../sys/startup_SAM7S.S:117    *ABS*:00000020 PMC_MOR
../sys/startup_SAM7S.S:118    *ABS*:00000024 PMC_MCFR
../sys/startup_SAM7S.S:119    *ABS*:0000002c PMC_PLLR
../sys/startup_SAM7S.S:120    *ABS*:00000030 PMC_MCKR
../sys/startup_SAM7S.S:121    *ABS*:00000068 PMC_SR
../sys/startup_SAM7S.S:122    *ABS*:00000001 PMC_MOSCEN
../sys/startup_SAM7S.S:123    *ABS*:00000002 PMC_OSCBYPASS
../sys/startup_SAM7S.S:124    *ABS*:0000ff00 PMC_OSCOUNT
../sys/startup_SAM7S.S:125    *ABS*:000000ff PMC_DIV
../sys/startup_SAM7S.S:126    *ABS*:00003f00 PMC_PLLCOUNT
../sys/startup_SAM7S.S:127    *ABS*:0000c000 PMC_OUT
../sys/startup_SAM7S.S:128    *ABS*:07ff0000 PMC_MUL
../sys/startup_SAM7S.S:129    *ABS*:30000000 PMC_USBDIV
../sys/startup_SAM7S.S:130    *ABS*:00000003 PMC_CSS
../sys/startup_SAM7S.S:131    *ABS*:0000001c PMC_PRES
../sys/startup_SAM7S.S:132    *ABS*:00000001 PMC_MOSCS
../sys/startup_SAM7S.S:133    *ABS*:00000004 PMC_LOCK
../sys/startup_SAM7S.S:166    *ABS*:00000001 PMC_SETUP
../sys/startup_SAM7S.S:167    *ABS*:00000601 PMC_MOR_Val
../sys/startup_SAM7S.S:168    *ABS*:00191c05 PMC_PLLR_Val
../sys/startup_SAM7S.S:169    *ABS*:00000007 PMC_MCKR_Val
                            *COM*:00000004 __heap_start
                            *COM*:00000004 __heap_end
../sys/startup_SAM7S.S:186    .text:00000000 $a
../sys/startup_SAM7S.S:189    .vectram:00000000 VectorsRAM
../sys/startup_SAM7S.S:189    .vectram:00000000 $a
../sys/startup_SAM7S.S:198    .vectram:00000020 Reset_AddrR
../sys/startup_SAM7S.S:199    .vectram:00000024 Undef_AddrR
../sys/startup_SAM7S.S:200    .vectram:00000028 SWI_AddrR
../sys/startup_SAM7S.S:201    .vectram:0000002c PAbt_AddrR
../sys/startup_SAM7S.S:202    .vectram:00000030 DAbt_AddrR
../sys/startup_SAM7S.S:198    .vectram:00000020 $d
../sys/startup_SAM7S.S:272    .init:00000004 Reset_Handler
../sys/startup_SAM7S.S:208    .vectram:00000040 Undef_HandlerR
../sys/startup_SAM7S.S:209    .vectram:00000044 SWI_HandlerR
../sys/startup_SAM7S.S:210    .vectram:00000048 PAbt_HandlerR
../sys/startup_SAM7S.S:211    .vectram:0000004c DAbt_HandlerR
../sys/startup_SAM7S.S:205    .vectram:00000038 IRQ_AddrR
../sys/startup_SAM7S.S:212    .vectram:00000050 IRQ_HandlerR
../sys/startup_SAM7S.S:206    .vectram:0000003c FIQ_AddrR
../sys/startup_SAM7S.S:213    .vectram:00000054 FIQ_HandlerR
../sys/startup_SAM7S.S:208    .vectram:00000040 $a
../sys/startup_SAM7S.S:231    .vectrom:00000000 Vectors
../sys/startup_SAM7S.S:231    .vectrom:00000000 $a
../sys/startup_SAM7S.S:242    .vectrom:00000020 Reset_Addr
../sys/startup_SAM7S.S:243    .vectrom:00000024 Undef_Addr
../sys/startup_SAM7S.S:244    .vectrom:00000028 SWI_Addr
../sys/startup_SAM7S.S:245    .vectrom:0000002c PAbt_Addr
../sys/startup_SAM7S.S:246    .vectrom:00000030 DAbt_Addr
../sys/startup_SAM7S.S:242    .vectrom:00000020 $d
../sys/startup_SAM7S.S:251    .vectrom:00000040 Undef_Handler
../sys/startup_SAM7S.S:252    .vectrom:00000044 SWI_Handler
../sys/startup_SAM7S.S:253    .vectrom:00000048 PAbt_Handler
../sys/startup_SAM7S.S:254    .vectrom:0000004c DAbt_Handler
../sys/startup_SAM7S.S:248    .vectrom:00000038 IRQ_Addr
../sys/startup_SAM7S.S:255    .vectrom:00000050 IRQ_Handler
../sys/startup_SAM7S.S:249    .vectrom:0000003c FIQ_Addr
../sys/startup_SAM7S.S:256    .vectrom:00000054 FIQ_Handler
../sys/startup_SAM7S.S:251    .vectrom:00000040 $a
../sys/startup_SAM7S.S:267    .init:00000000 _startup
../sys/startup_SAM7S.S:271    .init:00000000 $a
../sys/startup_SAM7S.S:300    .init:00000028 MOSCS_Loop
../sys/startup_SAM7S.S:311    .init:0000003c PLL_Loop
../sys/startup_SAM7S.S:363    .init:000000a8 LoopRel
../sys/startup_SAM7S.S:373    .init:000000c4 LoopZI
../sys/startup_SAM7S.S:383    *ABS*:ffffff00 MC_BASE
../sys/startup_SAM7S.S:384    *ABS*:00000000 MC_RCR
../sys/startup_SAM7S.S:400    .init:000000e4 ctor_loop
../sys/startup_SAM7S.S:410    .init:000000e4 ctor_end
../sys/startup_SAM7S.S:423    .init:00000104 __main_exit
../sys/startup_SAM7S.S:429    .init:00000108 $d

UNDEFINED SYMBOLS
_etext
_data
_edata
__bss_start__
__bss_end__
__ctors_start__
__ctors_end__
main
